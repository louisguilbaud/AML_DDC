<!DOCTYPE html>
<html lang="en">
<head>
    <script src='./javascripts/sas/util/messagingUtil.js'></script>
    <script src="./javascripts/jquery/jquery.min.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Response</title>
    <style>
        .parsed-container {
            white-space: pre-wrap;
            background-color: #f0f0f0;
            padding: 10px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <h1>API Response</h1>
    <div id="alert_details"></div>

    <script>
        const myHeaders = new Headers();
        myHeaders.append("Cookie", "sas-ingress-nginx=6866adc2289a112d6ea7fd0775261540|f0e9e5d83f1b459459b54939af4feb2b");

        const requestOptions = {
            method: "GET",
            headers: myHeaders,
            redirect: "follow"
        };

        async function fetchInitialApiResponse(apiKey) {

                const response = await fetch('https://sasserver.demo.sas.com/svi-alert/alerts/b63203ba-d218-410d-b3fe-95108afb5208', requestOptions);
                if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);
                
                const result = await response.json();
                displayResponse('alert_details', result);

                const currentAlertingEventId = result.currentAlertingEventId;
                const actionableEntityId = result.actionableEntityId;

                console.log('Current Alerting Event ID:', currentAlertingEventId);
                console.log('Actionable Entity ID:', actionableEntityId);

                await fetchCurrentAlertingEvent(currentAlertingEventId);
                await fetchTransactionDetails(actionableEntityId);
                await fetchPtyDetails(actionableEntityId);

                if (result.scenarioFiredEvents && Array.isArray(result.scenarioFiredEvents)) {
                    const scenarioFiredEvents = result.scenarioFiredEvents.map(event => ({
                        scenarioDescription: event.scenarioDescription,
                        messageTemplateText: event.messageTemplateText
                    }));
                    displayResult(scenarioFiredEvents);
                    fetchOpenAIResponse(apiKey, scenarioFiredEvents, filteredTransactions);
                } else {
                    console.error('scenarioFiredEvents is not defined or not an array:', result.scenarioFiredEvents);
                } 
        }
    </script>
</body>
</html>
