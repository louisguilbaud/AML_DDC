<!DOCTYPE html>
<html lang="en">
<head>
    <script src='./javascripts/sas/util/messagingUtil.js'></script>
    <script src="./javascripts/jquery/jquery.min.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Response</title>
</head>
<body>
    <h1>API Response</h1>
    <div id="apiResponse"></div>
    <div id="scenario_fired_event"></div>

    <script>
        const myHeaders = new Headers();
        myHeaders.append("Cookie", "sas-ingress-nginx=6866adc2289a112d6ea7fd0775261540|f0e9e5d83f1b459459b54939af4feb2b");

        const requestOptions = {
            method: "GET",
            headers: myHeaders,
            redirect: "follow"
        };

        // API Call to get alert informations 
        fetch("https://sasserver.demo.sas.com/svi-alert/alerts/b63203ba-d218-410d-b3fe-95108afb5208", requestOptions)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                // Extract specific fields to store in JavaScript variables
                const currentAlertingEventId = data.currentAlertingEventId;
                const actionableEntityId = data.actionableEntityId;
                console.error(currentAlertingEventId);
                // Convert the entire JSON response to a formatted string
                const jsonResponse = JSON.stringify(data, null, 2);

                // display the json in a div
                document.getElementById("apiResponse").innerHTML = jsonResponse;

            })
            .catch(error => console.error('Error:', error));

        // API Call to get alert informations 
        fetch('https://sasserver.demo.sas.com/svi-alert/alertingEvents/${currentAlertingEventId}', requestOptions)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                // Extract only the desired properties from scenarioFiredEvents
                if (data.scenarioFiredEvents && Array.isArray(result.scenarioFiredEvents)) {
                    const filteredScenarioFiredEvents = data.scenarioFiredEvents.map(event => ({
                        scenarioName: event.scenarioName,
                        scenarioDescription: event.scenarioDescription,
                        messageTemplateText: event.messageTemplateText
                    }));

                    // Convert the filtered data to a formatted JSON string
                    const filteredJson = JSON.stringify(filteredScenarioFiredEvents, null, 2);


                    // Convert the entire JSON response to a formatted string
                     const jsonResponse = JSON.stringify(filteredScenarioFiredEvents, null, 2);

                    // display the json in a div
                    document.getElementById("scenario_fired_event").innerHTML = jsonResponse;

            } else {
                    console.error('scenarioFiredEvents is not defined or not an array:', result.scenarioFiredEvents);
                }
            })
            .catch(error => console.error('Error:', error));
    </script>
</body>
</html>
