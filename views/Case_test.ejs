<!DOCTYPE html>
<html lang="en">
<head>
    <script src='./javascripts/sas/util/messagingUtil.js'></script>
    <script src="./javascripts/jquery/jquery.min.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Response</title>
</head>
<body>
    <h1>API Response</h1>
    <div id="apiResponse"></div>
    <div id="scenario_fired_event"></div>
    <div id="transactions"></div>
    <div id="Party_info"></div>
    <div id="network_info</div>

    <button type="submit" class="btn-primary" id="callApiButton">Case Narrative</button>
    <div class="api-response-box"> 
        <p><span id="chatgptResponse"></span></p>
    </div>
    <p hidden><span id="apiKeyContainer"></span></p>

    <script>
        const myHeaders = new Headers();
        myHeaders.append("Cookie", "sas-ingress-nginx=6866adc2289a112d6ea7fd0775261540|f0e9e5d83f1b459459b54939af4feb2b");

        const requestOptions = {
            method: "GET",
            headers: myHeaders,
            redirect: "follow"
        };

        "use strict";
        va.messagingUtil.setOnDataReceivedCallback(updateURL);

        function updateURL(vaMsgObj) {
            console.log('Received vaMsgObj:', vaMsgObj);
            if (vaMsgObj && vaMsgObj.data && vaMsgObj.data.length > 0) {
                const apiKey = vaMsgObj.data[0][0];
                console.log('Fetched API Key:', apiKey);
                document.getElementById("apiKeyContainer").textContent = apiKey;
            } else {
                document.getElementById("apiKeyContainer").textContent = "No API key available";
            }
        }

        // API Call to get alert information
        fetch("https://sasserver.demo.sas.com/svi-alert/alerts/b63203ba-d218-410d-b3fe-95108afb5208", requestOptions)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                const currentAlertingEventId = data.currentAlertingEventId;
                const actionableEntityId = data.actionableEntityId;
                console.log(currentAlertingEventId);
                const jsonResponse = JSON.stringify(data, null, 2);
                document.getElementById("apiResponse").innerHTML = jsonResponse;

                fetch(`https://sasserver.demo.sas.com/svi-alert/alertingEvents/${currentAlertingEventId}`, requestOptions)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.scenarioFiredEvents && Array.isArray(data.scenarioFiredEvents)) {
                            const filteredScenarioFiredEvents = data.scenarioFiredEvents.map(event => ({
                                scenarioName: event.scenarioName,
                                scenarioDescription: event.scenarioDescription,
                                messageTemplateText: event.messageTemplateText
                            }));
                            const filteredJson = JSON.stringify(filteredScenarioFiredEvents, null, 2);
                            document.getElementById("scenario_fired_event").innerHTML = filteredJson;
                        } else {
                            console.error('scenarioFiredEvents is not defined or not an array:', data.scenarioFiredEvents);
                        }

                        fetch(`https://sasserver.demo.sas.com/amlCore/transactions?entityLevelCode=PTY&entityNumber=${actionableEntityId}`, requestOptions)
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Network response was not ok ' + response.statusText);
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.items && Array.isArray(data.items)) {
                                    const filteredTransactions = data.items.map(transaction => ({
                                        transactionNumber: transaction.transactionNumber,
                                        primaryMediumDesc: transaction.primaryMediumDesc,
                                        secondaryMediumDesc: transaction.secondaryMediumDesc,
                                        mechanismDesc: transaction.mechanismDesc,
                                        currencyAmount: transaction.currencyAmount,
                                        transactionCDIDesc: transaction.transactionCDIDesc,
                                    }));
                                    const filteredJsonTrans = JSON.stringify(filteredTransactions, null, 2);
                                    document.getElementById("transactions").innerHTML = filteredJsonTrans;
                                } else {
                                    console.error('Transaction details result.items is not defined or not an array:', result.items);
                                }

                                fetch(`https://sasserver.demo.sas.com/SASVisualInvestigator/pages/PTY/${actionableEntityId}`, requestOptions)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok ' + response.statusText);
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        const KYC_data = data.data;
                                        const jsonResponse = JSON.stringify(KYC_data, null, 2);
                                        document.getElementById("Party_info").innerHTML = jsonResponse;

					fetch("https://sasserver.demo.sas.com/svi-sand/traversals?calculateMetrics=false&expansionLimit=2000", {
					    method: "POST",
					    headers: {
					        "Content-Type": "application/json",
        					"Authorization": "eyJhbGciOiJSUzI1NiIsImprdSI6Imh0dHBzOi8vbG9jYWxob3N0L1NBU0xvZ29uL3Rva2VuX2tleXMiLCJraWQiOiJsZWdhY3ktdG9rZW4ta2V5IiwidHlwIjoiSldUIn0.eyJqdGkiOiIxNWZlYTdkY2VlOTA0NDdmYTM4ZWRmZDc3ZjYxOTc4MSIsImF1dGhvcml0aWVzIjpbImNzX2ludGVybmFsX2RiX2FjY2VzcyIsInN2aXVzcnMiLCJjc19hbWxfZW1wbG95ZWVfYWNjZXNzIiwiY3NfYW1sX3NjZW5hcmlvX2FuYWx5c3QiLCJjc19lZmlsZXJfZGJfYWNjZXNzIiwiY3NfYW1sX2FkbWluaXN0cmF0b3IiLCJjc19pbnZlc3RpZ2F0b3JfZGJfYWNjZXNzX2VtcCIsImNzX2ludmVzdGlnYXRvcl9kYl9hY2Nlc3MiLCJjc19hbWxfdG1fc3RyYXRfYWNjZXNzIiwiY3NfYW1sX3FhX2FuYWx5c3QiLCJjc19hbWxfYXVkaXRvciIsInN2aWFkbXMiLCJjc19zY2VuYXJpb19hZG1pbmlzdHJhdG9yX2RiX2FjY2VzcyIsImNzX2FtbF9vcGVyYXRpb25zX21hbmFnZXIiLCJjc19jZGRfY3JyX2dyb3VwIiwic3ZpYXVkdCIsImNzX2FtbF9hbmFseXN0IiwiY3NfYW1sX2VmaWxlciIsImNzX2NkZF9oaWdoX3Jpc2tfY3VzdF9zdHJhdF9hY2Nlc3MiLCJjc19jZGRfbWVkaXVtX3Jpc2tfY3VzdF9zdHJhdF9hY2Nlc3MiLCJjc19hbWxfc2NlbmFyaW9fYWRtaW5pc3RyYXRvciIsImNzX2NkZF9hbmFseXN0IiwiY3NfYW1sX2ludmVzdGlnYXRvciIsImNzX2FtbF9kYl9hY2Nlc3MiLCJjc19hbWxfd2xfc3RyYXRfYWNjZXNzIiwiY3NfYW1sX21hbmFnZXIiLCJjc19hbWxldGxfZGJfYWNjZXNzX2VtcCIsInZzZGRuZ3MiLCJTQVNBZG1pbmlzdHJhdG9ycyIsImNzX2NkZF9wcm9tb3RlZF90b19lZGRfc3RyYXRfYWNjZXNzIiwiY3NfYmF0Y2hfZGJfYWNjZXNzX2VtcCIsImNzX2NkZF9sb3dfcmlza19jdXN0X3N0cmF0X2FjY2VzcyIsImNzX2ludGVybmFsX2RiX2FjY2Vzc19lbXAiLCJjc19lZmlsZXJfZGJfYWNjZXNzX2VtcCIsImNzX2FtbF90bV9ncm91cCJdLCJleHRfaWQiOiJ1aWQ9dml5YWFkbWluLG91PVBlb3BsZSxkYz1zYXMsZGM9Y29tIiwic3ViIjoiM2MwZTlkNjItNTY4MC00Y2UzLThjZTAtM2U4ZTE0MjFjZDZlIiwic2NvcGUiOlsiY2xpZW50cy5yZWFkIiwiY2xpZW50cy5zZWNyZXQiLCJ1YWEucmVzb3VyY2UiLCJvcGVuaWQiLCJ1YWEuYWRtaW4iLCJjbGllbnRzLmFkbWluIiwic2NpbS5yZWFkIiwidWFhLnVzZXIiLCJTQVNBZG1pbmlzdHJhdG9ycyIsImNsaWVudHMud3JpdGUiLCJzY2ltLndyaXRlIl0sImNsaWVudF9pZCI6InNhcy5lYyIsImNpZCI6InNhcy5lYyIsImF6cCI6InNhcy5lYyIsImdyYW50X3R5cGUiOiJwYXNzd29yZCIsInVzZXJfaWQiOiIzYzBlOWQ2Mi01NjgwLTRjZTMtOGNlMC0zZThlMTQyMWNkNmUiLCJvcmlnaW4iOiJsZGFwIiwidXNlcl9uYW1lIjoidml5YWFkbWluIiwiZW1haWwiOiJ2aXlhYWRtaW5AdXNlci5mcm9tLmxkYXAuY2YiLCJhdXRoX3RpbWUiOjE3MjIzMjc1NTQsInJldl9zaWciOiI0OWY2YmIwNyIsImlhdCI6MTcyMjMyNzU1NCwiZXhwIjoxNzIyMzMxMTU0LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0L1NBU0xvZ29uL29hdXRoL3Rva2VuIiwiemlkIjoidWFhIiwiYXVkIjpbInNjaW0iLCJjbGllbnRzIiwidWFhIiwib3BlbmlkIiwic2FzLmVjIl19.DJUoCPziI5P1d5MaSYSfsOfQCyY8C4hxJOk62wIDaUT6nBLgmp_poJ7PGNl_j0ICWqkYEdJ067mT3sgY_jECdkjioDSxMcaZ9gKTno4EKbmM_wbKhFucNIz77p09cOiK9IjdM-ys_ImAbS6Peiulq9QhnWp84xALKk4xXm07aixc7F6ujr9EW21YbInb0PHiBuyWuPwyNFQc0fhTBtLmsL6z7PlzEjXjee3lxyK9T5p5Px2w4TDvNUvU_fSon3E9MqFEfe3d1qIuPNfVH3iPAYsHaJta_adhho-I92Wqc1fpyAk-ikCmQDB2tdsRI-PgIYBZAAZzO8C-naF1Do0mhg",
					        "Cookie": "sas-ingress-nginx=465a78167134495424fe1d90f9dbaa56|12b794cb5ca279bec1edb7e510234855"
					    },
					    body: JSON.stringify({
					        edgeTypes: ["social_link"],
					        depth: 1,
					        extendedFormat: true,
					        graphObjectIds: [
					            { type: "PTY", id: "10056215" },
					            { type: "alerts", id: "b63203ba-d218-410d-b3fe-95108afb5208" }
					        ],
					        query: {
					            type: "object",
					            objectIds: [
					                { type: "PTY", id: "10056215" }
					            ]
					        }
					    }),
					    redirect: "follow"
					})
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok ' + response.statusText);
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        const network_data = data.data;
                                        const jsonResponse = JSON.stringify(network_data, null, 2);
                                        document.getElementById("network_info").innerHTML = jsonResponse;
                                    }).catch(error => console.error('Error:', error));

                                    }).catch(error => console.error('Error:', error));
                            }).catch(error => console.error('Error:', error));
                    }).catch(error => console.error('Error:', error));
            }).catch(error => console.error('Error:', error));

        document.getElementById("callApiButton").addEventListener("click", function() {
            var apiKey = document.getElementById("apiKeyContainer").textContent;
            var apiUrl = "https://api.openai.com/v1/chat/completions";
            
            fetch(apiUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apiKey
                },
                body: JSON.stringify({
                    "model": "gpt-3.5-turbo",
                    "messages": [{"role": "user", "content": "You are here to help an AML investator of a bank. In json format there is a list of scenarios that trigger a customer. There is also the list of transactions of this customer in json format.  Based on that give recomandation for the investigation. send back a text on where the investigator should look. You can provide details at Scenario fired event level and give the transactions supicious for each scenario fired event and why they are suspicious. Give also generalrecomandation on this alert: Filtered Scenario Fired Events:" + scenario_fired_event + "Filtered transactions:" +transactions
			}]
                })
            })
            .then(response => response.json())
            .then(data => {
                var content = data.choices[0].message.content;
                document.getElementById("chatgptResponse").textContent = content;
            })
            .catch(error => {
                console.error("Error:", error);
                document.getElementById("chatgptResponse").textContent = "Error occurred while fetching API data.";
            });
        });
    </script>
</body>
</html>
