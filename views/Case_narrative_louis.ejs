<!DOCTYPE html>
<html lang="en">

<head>
    <script src='./javascripts/sas/util/messagingUtil.js'></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: Arial, sans-serif;
            font-size: 16px;
            margin: 0 30px;
            width: 100%;
            display: flex;
            flex-direction: column;
        }

        pre {
            white-space: pre-wrap;
            font-family: monospace;
            font-size: 14px;
        }

        details {
            margin: 20px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: 90%;
            padding: 10px;
        }

        summary {
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            color: #fff;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            margin: 20px;
            border-radius: 5px;
            box-shadow: inset 0px 0px 0px 1px #0a0a0a;
        }

        form {
            display: flex;
            flex-direction: column;
            margin: 10px;
            align-items: center;
            justify-content: center;
        }

        label {
            margin-bottom: 10px;
        }

        textarea {
            width: 90%;
            min-height: 80px;
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            text-wrap: wrap;
            height: auto;
            overflow: hidden;
            resize: none;
            padding: 0.8em;
        }

        #chatgptResponse {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            color: #02022f;
        }

        .loading {
            display: none;
            z-index: 999;
            height: 2em;
            width: 2em;
        }

        .api-response-box {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 20px;
        }

        .api-pricing {
            display: flex;
            width: 80%;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
        }

        .api-pricing>p {
            margin-left: 10px;
        }
    </style>
    <title>Data Workbench</title>
</head>

<body>
    <details>
        <summary>API Response</summary>
        <h2>API response</h2>
        <pre id="apiResponse"></pre>
        <h2>Filtered Scenario Fired Events</h2>
        <pre id="scenario_fired_event"></pre>
        <h2>Filtered Transactions</h2>
        <pre id="transactions"></pre>
        <h2>Personal Information</h2>
        <pre id="Party_info"></pre>
        <h2>Nonnormalized graph</h2>
        <pre id="postResponse"></pre>
    </details>
    <details>
        <summary>Graph Of Transactions</summary>
        <h2>Vertices JSON</h2>
        <pre id="verticesJson"></pre>
        <h2>Edges JSON</h2>
        <pre id="edgesJson"></pre>
        <p id="alertid"></p>
    </details>

    <form id="chatForm">
        <div class="row">
            <label for="model">Model:</label>
            <select id="model" name="model">
                <option value="gpt-4o">GPT-4o</option>
                <option value="gpt-4o-mini">GPT-4o mini</option>
            </select>
        </div>
        <button type="submit" class="btn-primary" id="callApiButton">Case Narrative</button>
    </form>

    <h2 class="loading" id="loading-indicator">
        Loading response
    </h2>

    <div class="api-response-box">
        <pre style="width: 100%;"><span id="chatgptResponse"></span></pre>
    </div>
    <p hidden><span id="apiKeyContainer"></span></p>
    <p hidden><span id="alertid"></span></p>

    <script>
        "use strict";

        function autoGrow(element) {
            element.style.height = 'auto';
            element.style.height = (element.scrollHeight) + 'px';
        }

        // Attach the autoGrow function to input event for all textareas
        document.querySelectorAll('textarea').forEach(textarea => {
            textarea.addEventListener('input', function () {
                autoGrow(this);
            });
            // Call autoGrow on page load to set initial height
            autoGrow(textarea);
        });

        const myHeaders = new Headers();
        myHeaders.append("Cookie", "sas-ingress-nginx=6866adc2289a112d6ea7fd0775261540|f0e9e5d83f1b459459b54939af4feb2b");

        const requestOptions = {
            method: "GET",
            headers: myHeaders,
            redirect: "follow"
        };

        va.messagingUtil.setOnDataReceivedCallback(updateURL);

        function updateURL(vaMsgObj) {
            console.log('Received vaMsgObj:', vaMsgObj);
            if (vaMsgObj && vaMsgObj.data && vaMsgObj.data.length > 0) {
                const apiKey = vaMsgObj.data[0][0];
                console.log('[debug]: Fetched API Key:', apiKey);
                document.getElementById("apiKeyContainer").textContent = apiKey;

                // Extract the value from the parameters array
                if (vaMsgObj.parameters && vaMsgObj.parameters.length > 0) {
                    const alert_id = vaMsgObj.parameters[0].value;
                    console.log('[debug]: Fetched Parameter Value:', alert_id);
                    document.getElementById("alertid").textContent = alert_id;
                } else {
                    document.getElementById("alertid").textContent = "No parameter value available";
                }
            } else {
                document.getElementById("apiKeyContainer").textContent = "No API key available";
                document.getElementById("alertid").textContent = "No parameter value available";
            }
        }

        async function getCsrfToken() {
            const url = 'https://amlglobalteam-03.unx.sas.com/svi-sand/traversals?calculateMetrics=false&expansionLimit=2000';
            try {
                const response = await fetch(url, {
                    method: 'GET',
                    credentials: 'include'
                });
                const csrfToken = response.headers.get('X-CSRF-TOKEN');
                if (!csrfToken) {
                    console.error('CSRF token not found in response headers');
                    throw new Error('CSRF token not found in response headers');
                }
                console.log("[debug]: csrfToken set")
                return csrfToken;
            } catch (error) {
                console.error('[debug]: Error in getCsrfToken:', error);
                throw error;
            }
        }

        async function postData(csrfToken) {
            const url = 'https://amlglobalteam-03.unx.sas.com/svi-sand/traversals?calculateMetrics=false&expansionLimit=2000';
            const data = {
                "edgeTypes": [
                    "social_link"
                ],
                "depth": 2,
                "extendedFormat": true,
                "graphObjectIds": [
                    {
                        "type": "PTY",
                        "id": "10056215"
                    },
                    {
                        "type": "alerts",
                        "id": "b63203ba-d218-410d-b3fe-95108afb5208"
                    }
                ],
                "query": {
                    "type": "object",
                    "objectIds": [
                        {
                            "type": "PTY",
                            "id": "10056215"
                        }
                    ]
                }
            };

            const myHeaderspost = new Headers();
            myHeaderspost.append("Content-Type", "application/json");
            myHeaderspost.append("Cookie", "sas-ingress-nginx=465a78167134495424fe1d90f9dbaa56|12b794cb5ca279bec1edb7e510234855");
            myHeaderspost.append("X-CSRF-TOKEN", csrfToken);

            const requestOptionspost = {
                method: "POST",
                headers: myHeaderspost,
                body: JSON.stringify(data),
                redirect: "follow"
            };

            try {
                const response = await fetch(url, requestOptionspost);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                const postResponseText = await response.json();
                document.getElementById('postResponse').textContent = JSON.stringify(postResponseText, null, 2);

                const verticesJson = postResponseText['vertices'];
                const edgesJson = postResponseText['edges'];
                console.log(verticesJson);
                document.getElementById('verticesJson').textContent = JSON.stringify(verticesJson, null, 2);
                document.getElementById('edgesJson').textContent = JSON.stringify(edgesJson, null, 2);
                console.log(edgesJson);

                return postResponseText;
            } catch (error) {
                console.error('[debug]: Error in postData:', error);
                throw error;
            }
        }

        document.getElementById("chatForm").addEventListener("submit", async function (event) {
            event.preventDefault();
            console.log("[debug]: form submitted");

            const loading = document.getElementById("loading-indicator");
            if (loading) {
                loading.classList.toggle("loading");
                console.log("[debug]: Loading indicator toggled");
            } else {
                console.error("Loading indicator not found");
            }

            try {
                const csrfToken = await getCsrfToken();
                const postResponseText = await postData(csrfToken);
                console.log('[debug]: Post response:', postResponseText);

                // Once data is received, hide the loading indicator
                if (loading) {
                    loading.classList.remove("loading");
                    console.log("[debug]: Loading indicator removed");
                }
            } catch (error) {
                console.error('[debug]: Error in form submission:', error);

                // If an error occurs, hide the loading indicator
                if (loading) {
                    loading.classList.remove("loading");
                }
            }
        });
    </script>
</body>

</html>
