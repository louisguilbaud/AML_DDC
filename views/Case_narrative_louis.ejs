<!--
Written by Arnav Priyadarshi
Date: August 2024
arnav.priyadarshi@sas.com
-->
<!DOCTYPE html>
<html lang="en">

<head>
    <script src="./javascripts/sas/util/messagingUtil.js"></script>
    <script type="module" src="https://md-block.verou.me/md-block.js"></script>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            font-size: 16px;
            width: 80%;
            display: flex;
            flex-direction: column;
            margin: 0 auto;
            padding: 0;
            min-height: 100vh;
        }

        /* Overlay styles */
        .overlay {
            position: absolute; /* Change to absolute */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent grey */
            display: none; /* Hidden by default */
            justify-content: center;
            align-items: center;
            z-index: 9999; /* Ensure it stays on top */
        }

        .overlay.loading {
            display: flex; /* Make it visible */
        }

        .loading-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .dots {
            display: flex;
            justify-content: space-around;
            align-items: center;
            width: 60px;
            margin-bottom: 5px;
        }

        .dot {
            width: 10px;
            height: 10px;
            margin: 3px;
            background-color: #007bff; /* Blue color */
            border-radius: 50%;
            animation: bounce 0.6s infinite alternate;
        }

        @keyframes bounce {
            to {
                transform: translateY(-10px);
            }
        }

        .dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        .loading-text {
            font-size: 14px;
            color: #fff;
            margin-top: 5px;
        }

        /* Tab styles */
        .tab {
            display: flex;
            background-color: #f1f1f1;
            border-bottom: 1px solid #ccc;
            padding: 10px 0;
        }

        .tab button {
            background-color: #f1f1f1;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .tab button:hover {
            background-color: #ddd;
        }

        .tab button.active {
            background-color: #e7e7e7;
            border-bottom: 2px solid #007bff;
            font-weight: bold;
        }

        .tabcontent {
            padding: 20px;
            display: none;
            position: relative; /* Added to position overlay correctly */
        }

        .tabcontent.active {
            display: block;
        }

        /* Other styles omitted for brevity... */

        .chat {
            display: flex;
            flex-direction: column;
            align-items: center;
            flex: 1;
        }

        #conversation,
        #conversation-cn {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 20px;
            margin-top: 0;
            width: 100%;
            border-radius: 5px;
            background-color: #eeeeee;
            margin-bottom: 40px;
            min-height: 200px;
            padding-top: 12px;
            padding-bottom: 12px;
            position: relative; /* Ensure it holds the overlay */
        }
    </style>
    <title>AML LLM</title>
</head>

<body>
    <div class="tab">
        <button class="tablinks" onclick="openTab(event, 'CaseNarrative')" aria-label="Case Narrative" id="defaultOpen">
            Case Recommendation
        </button>
        <button class="tablinks" onclick="openTab(event, 'QnA')" aria-label="QnA">
            Digital Assistant
        </button>
    </div>

    <div id="QnA" class="tabcontent">
        <div class="chat">
            <h1>AML Digital Assistant</h1>
            <div id="conversation">
                <div class="overlay" id="loading-indicator">
                    <div class="loading-container">
                        <div class="dots">
                            <div class="dot"></div>
                            <div class="dot"></div>
                            <div class="dot"></div>
                        </div>
                        <p class="loading-text">Loading...</p>
                    </div>
                </div>
            </div>
            <form id="chatForm">
                <div class="prompt">
                    <label for="userPrompt"> Ask a question </label>
                    <textarea id="userPrompt" name="userPrompt"></textarea>
                </div>
                <button type="submit" class="btn-primary" id="callApiButton">
                    Send
                </button>
            </form>
        </div>
    </div>

    <div id="CaseNarrative" class="tabcontent">
        <div class="chat">
            <div id="conversation-cn">
                <div class="overlay" id="loading-indicator-cn">
                    <div class="loading-container">
                        <div class="dots">
                            <div class="dot"></div>
                            <div class="dot"></div>
                            <div class="dot"></div>
                        </div>
                        <p class="loading-text">Loading...</p>
                    </div>
                </div>
            </div>
            <form id="chatForm-cn">
                <div class="row">
                    <label for="model-cn">Model:</label>
                    <select id="model-cn" name="model">
                        <option value="gpt-4o">GPT-4o</option>
                        <option value="gpt-4o-mini">GPT-4o mini</option>
                    </select>
                </div>
                <button type="submit" class="btn-primary" id="callApiButton-cn">
                    Get Case Narrative
                </button>
            </form>
        </div>
    </div>

    <script>
        "use strict";

        const body = document.querySelector("body");
        const tabcontents = document.querySelectorAll(".tabcontent");

        function openTab(evt, tabName) {
            let i, tabcontent, tablinks;

            // Hide all tab contents
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
                // Hide the loading indicator for all tabs
                const loadingIndicator = tabcontent[i].querySelector(".overlay");
                if (loadingIndicator) {
                    loadingIndicator.style.display = "none";
                }
            }

            // Remove active class from all tab links
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            // Show the selected tab
            const tab = document.getElementById(tabName);
            tab.style.display = "block";

            // Set the active tab
            evt.currentTarget.className += " active";
        }

        // Open the default tab
        document.getElementById("defaultOpen").click();

        function showLoading(tabName) {
            const tab = document.getElementById(tabName);
            const loadingIndicator = tab.querySelector(".overlay");
            if (loadingIndicator) {
                loadingIndicator.style.display = "flex"; // Show the loading overlay
            }

            // Simulate a loading delay (you can replace this with your actual API call)
            setTimeout(() => {
                if (loadingIndicator) {
                    loadingIndicator.style.display = "none"; // Hide the loading overlay after 2 seconds
                }
            }, 2000); // Simulate a 2-second loading time
        }

        // Attach event listeners to buttons
        document.getElementById("chatForm").addEventListener("submit", function (event) {
            event.preventDefault(); // Prevent default form submission
            showLoading("QnA"); // Show loading in QnA tab
        });

        document.getElementById("chatForm-cn").addEventListener("submit", function (event) {
            event.preventDefault(); // Prevent default form submission
            showLoading("CaseNarrative"); // Show loading in Case Narrative tab
        });

		function autoGrow(element) {
			element.style.height = "auto";
			element.style.height = element.scrollHeight + "px";
		}


		// Attach the autoGrow function to input event for all textareas
		document.querySelectorAll("textarea").forEach(textarea => {
			textarea.addEventListener("input", function () {
				autoGrow(this);
				autoGrow(body);
				for (const tabcontent of tabcontents) {
					autoGrow(tabcontent);
				}
			});
			// Call autoGrow on page load to set initial height
			autoGrow(textarea);
			autoGrow(body);
			for (const tabcontent of tabcontents) {
					autoGrow(tabcontent);
			}
		});

		//=============================================

		const myHeaders = new Headers();
		myHeaders.append(
			"Cookie",
			"sas-ingress-nginx=6866adc2289a112d6ea7fd0775261540|f0e9e5d83f1b459459b54939af4feb2b"
		);

		const requestOptions = {
			method: "GET",
			headers: myHeaders,
			redirect: "follow"
		};

		va.messagingUtil.setOnDataReceivedCallback(updateURL);

		function updateURL(vaMsgObj) {
			console.log("Received vaMsgObj:", vaMsgObj);
			if (vaMsgObj && vaMsgObj.data && vaMsgObj.data.length > 0) {
				const apiKey = vaMsgObj.data[0][0];
				console.log("[debug]: Fetched API Key:", apiKey);
				document.getElementById("apiKeyContainer").textContent =
					apiKey;

				// Extract the value from the parameters array
				if (vaMsgObj.parameters && vaMsgObj.parameters.length > 0) {
					const alert_id = vaMsgObj.parameters[0].value;
					console.log(
						"[debug]: Fetched Parameter Value:",
						alert_id
					);
					document.getElementById("alertid").textContent =
						alert_id;
				} else {
					document.getElementById("alertid").textContent =
						"No parameter value available";
				}
			} else {
				document.getElementById("apiKeyContainer").textContent =
					"No API key available";
				document.getElementById("alertid").textContent =
					"No parameter value available";
			}
		}

		async function getCsrfToken() {
			const url =
				"https://sasserver.demo.sas.com/svi-sand/traversals?calculateMetrics=false&expansionLimit=2000";
			try {
				const response = await fetch(url, {
					method: "GET",
					credentials: "include"
				});
				const csrfToken = response.headers.get("X-CSRF-TOKEN");
				if (!csrfToken) {
					console.error(
						"CSRF token not found in response headers"
					);
					throw new Error(
						"CSRF token not found in response headers"
					);
				}
				console.log("[debug]: csrfToken set");
				return csrfToken;
			} catch (error) {
				console.error("[debug]: Error in getCsrfToken:", error);
				throw error;
			}
		}

		async function postData(csrfToken) {
			const url =
				"https://sasserver.demo.sas.com/svi-sand/traversals?calculateMetrics=false&expansionLimit=2000";
			const data = {
				edgeTypes: ["social_link"],
				depth: 2,
				extendedFormat: true,
				graphObjectIds: [
					{
						type: "PTY",
						id: "326315"
					},
					{
						type: "alerts",
						id: "3d9a7119-640a-420a-a273-e7f0520259f4"
					}
				],
				query: {
					type: "object",
					objectIds: [
						{
							type: "PTY",
							id: "326315"
						}
					]
				}
			};

			const myHeaderspost = new Headers();
			myHeaderspost.append("Content-Type", "application/json");
			myHeaderspost.append(
				"Cookie",
				"sas-ingress-nginx=465a78167134495424fe1d90f9dbaa56|12b794cb5ca279bec1edb7e510234855"
			);
			myHeaderspost.append("X-CSRF-TOKEN", csrfToken);

			const requestOptionspost = {
				method: "POST",
				headers: myHeaderspost,
				body: JSON.stringify(data),
				redirect: "follow"
			};

			try {
				const response = await fetch(url, requestOptionspost);
				if (!response.ok) {
					throw new Error(
						"Network response was not ok " + response.statusText
					);
				}
				const postResponseText = await response.json();
				document.getElementById("postResponse").textContent =
					JSON.stringify(postResponseText, null, 2);

				const vertices = postResponseText.vertices.map(vertex => ({
					type: vertex.type,
					id: vertex.id,
					typeLabel: vertex.typeLabel,
					label: vertex.label
				}));

				const edges = postResponseText.edges.map(edge => ({
					id: edge.id,
					endpoints: edge.endpoints.map(endpoint => ({
						type: endpoint.type,
						id: endpoint.id
					})),
					subtype: edge.subtype,
					label: edge.label
				}));

				console.log("[debug]: set pty and graph data");

				document.getElementById("verticesJson").textContent =
					JSON.stringify(vertices, null, 2);
				document.getElementById("edgesJson").textContent =
					JSON.stringify(edges, null, 2);
			} catch (error) {
				console.error("[debug]: Error in postData:", error);
				document.getElementById(
					"postResponse"
				).textContent = `Error: ${error}`;
			}
		}

		async function fetchData() {
			const alertIdElement = document.getElementById("alertid");
			let alertId = alertIdElement.textContent.trim(); // Get the alert ID from the element

			if (!alertId) {
				console.warn(
					"[debug]: Alert ID is not immediately available. Waiting for it to be populated..."
				);

				// Wait for the alert ID to be available
				for (let i = 0; i < 10; i++) {
					// Retry up to 10 times (adjust as needed)
					await new Promise(resolve => setTimeout(resolve, 500)); // Wait for 500ms
					alertId = alertIdElement.textContent.trim();
					if (alertId) {
						break; // Exit the loop once alertId is available
					}
				}
			}

			if (!alertId) {
				console.error(
					"Alert ID is still not available after waiting."
				);
				return;
			}
			const alertUrl = `https://sasserver.demo.sas.com/svi-alert/alerts/${alertId}`;

			console.log("[debug]: called alerts data");
			try {
				const response = await fetch(alertUrl, requestOptions);
				if (!response.ok) {
					throw new Error(
						"Network response was not ok " + response.statusText
					);
				}
				const data = await response.json();
				const currentAlertingEventId = data.currentAlertingEventId;
				const actionableEntityId = data.actionableEntityId;
				document.getElementById("apiResponse").innerHTML =
					JSON.stringify(data, null, 2);

				const alertingEventsUrl = `https://sasserver.demo.sas.com/svi-alert/alertingEvents/${currentAlertingEventId}`;
				const alertingEventsResponse = await fetch(
					alertingEventsUrl,
					requestOptions
				);
				if (!alertingEventsResponse.ok) {
					throw new Error(
						"Network response was not ok " +
						alertingEventsResponse.statusText
					);
				}
				const alertingEventsData =
					await alertingEventsResponse.json();
				const filteredScenarioFiredEvents =
					alertingEventsData.scenarioFiredEvents.map(event => ({
						scenarioName: event.scenarioName,
						scenarioDescription: event.scenarioDescription,
						messageTemplateText: event.messageTemplateText
					}));
				document.getElementById("scenario_fired_event").innerHTML =
					JSON.stringify(filteredScenarioFiredEvents, null, 2);

				const transactionsUrl = `https://sasserver.demo.sas.com/amlCore/transactions?entityLevelCode=PTY&entityNumber=${actionableEntityId}`;
				const transactionsResponse = await fetch(
					transactionsUrl,
					requestOptions
				);
				if (!transactionsResponse.ok) {
					throw new Error(
						"Network response was not ok " +
						transactionsResponse.statusText
					);
				}
				const transactionsData = await transactionsResponse.json();
				const filteredTransactions = transactionsData.items.map(
					transaction => ({
						transactionNumber: transaction.transactionNumber,
						transactionDate: transaction.transactionDate,
						primaryMediumDesc: transaction.primaryMediumDesc,
						secondaryMediumDesc:
							transaction.secondaryMediumDesc,
						mechanismDesc: transaction.mechanismDesc,
						currencyAmount: transaction.currencyAmount,
						transactionCDIDesc: transaction.transactionCDIDesc
					})
				);
				document.getElementById("transactions").innerHTML =
					JSON.stringify(filteredTransactions, null, 2);

				const partyInfoUrl = `https://sasserver.demo.sas.com/SASVisualInvestigator/pages/PTY/${actionableEntityId}`;
				const partyInfoResponse = await fetch(
					partyInfoUrl,
					requestOptions
				);
				if (!partyInfoResponse.ok) {
					throw new Error(
						"Network response was not ok " +
						partyInfoResponse.statusText
					);
				}
				const partyInfoData = await partyInfoResponse.json();
				document.getElementById("Party_info").innerHTML =
					JSON.stringify(partyInfoData.data, null, 2);

				console.log("[debug]: fetched VI data");

				const csrfToken = await getCsrfToken();
				await postData(csrfToken);
			} catch (error) {
				console.error("Error:", error);
				document.getElementById(
					"postResponse"
				).textContent = `Error: ${error}`;
			}
			console.log("[debug]: fetched data - all ok");
			// make the buttons no longer disabled
			document.getElementById("callApiButton").disabled = false;
			document.getElementById("callApiButton-cn").disabled = false;
			return true;
		}

		// chat GPT code
		// ========================

		const conversation = document.getElementById("conversation");
		const conversationCN = document.getElementById("conversation-cn");
		const form = document.getElementById("chatForm");
		const formCN = document.getElementById("chatForm-cn");
		const loading = document.getElementById("loading-indicator");
		const loadingCN = document.getElementById("loading-indicator-cn");

		const apiUrl = "https://api.openai.com/v1/chat/completions";


		const messages = [];
		const systemPrompt = `You are a helpful Anti Money Laundering AI tool of a bank. You're used to reading and understanding complex JSON representations of alerts and can get why they're flagged based on filtered transactions and customer information. You are helping an Investigator make sense of the alerts that they're receiving by providing informative and actionable insights and discussing any issues that they're having, while not being afraid to admit your own ignorance and say that the answer may be unclear from just the data provided.

			Make sure to output responses that are easy to understand and actionable.`;
		const systemMessage = {
			role: "assistant",
			content: systemPrompt
		};
		messages.push(systemMessage);

		let firstMessage = true;


		function getCaseNarrative(event) {
			const apiKey = document.getElementById("apiKeyContainer").textContent;
			const filteredScenarioFiredEvents = document.getElementById(
				"scenario_fired_event"
			).textContent;
			const filteredTransactions = document.getElementById(
				"transactions"
			).textContent;
			const partyInfo = document.getElementById("Party_info").textContent;
			console.log("[debug]: CaseNarrative called");
			event.preventDefault();

			const model = document.getElementById("model-cn").value;
			const userPrompt = `Please review the following account activity and identify any suspicious patterns or behaviors that could indicate potential money laundering. Focus on analyzing any large transactions, unusual frequency of activities, or connections to high-risk jurisdictions. Provide a detailed case narrative that includes an overview of the activity, specific transaction details, behavioral indicators, and how these activities align with the customer's KYC profile. Conclude with a risk assessment and recommendations for further action, such as enhanced due diligence or filing a SAR. You may respond in Markdown.
			
			Filtered Scenario Fired Events: ${filteredScenarioFiredEvents}
			
			Filtered transactions: ${filteredTransactions}
			
			Personal information on the customer: ${partyInfo}`;

			const newMessage = {
				role: "user",
				content: userPrompt
			};

			for (let i = 0; i < formCN.children.length; i++) {
				formCN.children[i].style.display = "none";
			}

			console.log("[debug]: prompt: ", userPrompt);
			console.log("[debug]: model: ", model);

			loadingCN.classList.add("loading");
			autoGrow(conversationCN);

			fetch(apiUrl, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					Authorization: "Bearer " + apiKey
				},
				body: JSON.stringify({
					model: model,
					messages: [...messages, newMessage]
				})
			})
				.then(response => response.json())
				.then(data => {
					loadingCN.classList.add("loading");
					console.log("[debug]: chatgpt response", data);
					const content = data.choices[0].message.content;
					const inputTokens = data.usage.prompt_tokens;
					const outputTokens = data.usage.completion_tokens;

					const responseMessage = {
						role: "assistant",
						content: content
					};
					addMessage(responseMessage, true);
					messages.push(responseMessage);
					console.log("[debug]: messages", messages);

					// log it to job execution
					callJob(inputTokens, outputTokens);
				})
				.catch(error => {
					loadingCN.classList.add("loading");
					console.error("[debug]: Error:", error);
					document.getElementById(
						"chatgptResponse"
					).textContent =
						"Error occurred while fetching API data.";
				});
			console.log("[debug]: CaseNarrative end");
		}

		document
			.getElementById("chatForm-cn")
			.addEventListener("submit", getCaseNarrative);

		document
			.getElementById("chatForm")
			.addEventListener("submit", function () {
				const apiKey = document.getElementById("apiKeyContainer").textContent;
				const filteredScenarioFiredEvents = document.getElementById(
					"scenario_fired_event"
				).textContent;
				const filteredTransactions = document.getElementById(
					"transactions"
				).textContent;
				const partyInfo = document.getElementById("Party_info").textContent;

				console.log("[debug]: form submitted");
				event.preventDefault();
				console.log("[debug]: called api button");


				const model = document.getElementById("model").value;


				let userPrompt =
					document.getElementById("userPrompt").value;
				document.getElementById("userPrompt").value = "";

				const newMessage = {
					role: "user",
					content: userPrompt
				};
				addMessage(newMessage, false);

				if (firstMessage) {
					firstMessage = false;


					userPrompt = `${userPrompt}

Here is the data on the alerts
that our system generated. Please review this for your answer.


Filtered Scenario Fired Events: ${filteredScenarioFiredEvents}

Filtered transactions: ${filteredTransactions}

Personal information on the customer: ${partyInfo}`;

					newMessage.content = userPrompt;
				}

				messages.push(newMessage);
				console.log("[debug]: prompt: ", userPrompt);
				console.log("[debug]: model: ", model);

				const loading =
					document.getElementById("loading-indicator");
				loading.classList.add("loading");
				autoGrow(conversation);

				fetch(apiUrl, {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
						Authorization: "Bearer " + apiKey
					},
					body: JSON.stringify({
						model: model,
						messages: messages.map(message => {
							return {
								role: message.role,
								content: message.content
							};
						})
					})
				})
					.then(response => response.json())
					.then(data => {
						loading.classList.remove("loading");
						console.log("[debug]: chatgpt response", data);
						const content = data.choices[0].message.content;
						const inputTokens = data.usage.prompt_tokens;
						const outputTokens = data.usage.completion_tokens;

						const responseMessage = {
							role: "assistant",
							content: content
						};
						addMessage(responseMessage, false);
						messages.push(responseMessage);
						console.log("[debug]: messages", messages);

						// log it to job execution
						callJob(inputTokens, outputTokens);
					})
					.catch(error => {
						loading.classList.remove("loading");
						console.error("[debug]: Error:", error);
						document.getElementById(
							"chatgptResponse"
						).textContent =
							"Error occurred while fetching API data.";
					});
			});

		function addMessage(message, cn) {
			const messageElement = document.createElement("md-block");
			messageElement.classList.add("message");
			messageElement.classList.add(message.role + "-response");
			messageElement.innerHTML = message.content;

			const convo = cn ? conversationCN : conversation;
			convo.appendChild(messageElement);
			if (cn) {
				messageElement.classList.add("case-narrative-message");
				messageElement.classList.remove("message");
			}

			autoGrow(conversation);
			autoGrow(conversationCN);
			autoGrow(body);

			setTimeout(() => {
				autoGrow(conversation);
				autoGrow(conversationCN);
				for (const chat of chats) {
					autoGrow(chat);
				}
				autoGrow(qna);
				autoGrow(casenarrative);
				autoGrow(body);
			}, 200);

			setTimeout(() => {
				autoGrow(conversation);
				autoGrow(conversationCN);
				for (const chat of chats) {
					autoGrow(chat);
				}
				autoGrow(qna);
				autoGrow(casenarrative);
				autoGrow(body);
			}, 500);
		}

		// calls the job on SASJobExecution
		async function callJob(inputTokens, outputTokens) {
			console.log("[debug]: called job execution");
			const vajson = {
				inputTokens: inputTokens,
				outputTokens: outputTokens
			};

			const paramStr =
				"?_program=" +
				encodeURIComponent("/Public/Report/Prices") +
				"&_action=" +
				encodeURIComponent("execute") +
				"&_outputType=ods_html5" +
				"&vajson=" +
				encodeURIComponent(JSON.stringify(vajson));
			+"&_debug=log";

			try {
				const url = "/SASJobExecution/" + paramStr;

				console.log("[debug]: Job URL: ", url);
				// console.log("[debug]: vajson ", vajson);

				const requestHeaders = new Headers();
				requestHeaders.append("Accept", "text/html");

				const requestOptions = {};
				requestOptions.headers = requestHeaders;
				requestOptions.method = "GET";

				const response = await fetch(url, requestOptions);

				if (!response.ok) {
					const error = response.statusText;
					console.log("[debug]: Job failed with error: ", error);
				}

				const jobOutput = await response.text();
				// console.log("[debug]: Job output: ", jobOutput);
				return jobOutput;
			} catch (error) {
				console.error("************** JOB FAILED ***************");
				console.error("[debug]: Error: ", error);
			}
		}

		// Fetch data on page load
		document.addEventListener("DOMContentLoaded", function () {
			fetchData();
		});
	</script>
</body>

</html>
