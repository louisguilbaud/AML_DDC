
<!DOCTYPE html>
<html>
    <script src='./javascripts/sas/util/messagingUtil.js'></script>
	<script src="./javascripts/jquery/jquery.min.js"></script>

<head>
    <title>API Call Example</title>
    <style>
        body {
            background-color: #f8f9fa;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .container {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            margin: 50px auto;
            overflow: hidden; /* Ensures the container wraps around floated elements */
        }
        .tabs {
            border-bottom: 2px solid #0056b3;
            display: flex;
        }
        .tab-button {
            background-color: #f8f9fa;
            border: none;
            border-bottom: 2px solid transparent; /* Initially transparent */
            border-radius: 4px 4px 0 0;
            cursor: pointer;
            flex: 1; /* Equal width for all tab buttons */
            padding: 15px 20px;
            text-align: center;
            transition: border-bottom-color 0.3s ease;
        }
        .tab-button.active {
            border-bottom-color: #0056b3; /* Blue border for active tab */
            color: #0056b3; /* Blue text for active tab */
        }
        .tab-content {
            display: none;
            padding: 20px;
            border: 1px solid #ccc;
            border-top: none;
            border-radius: 0 0 4px 4px;
        }
        .tab-content.active {
            display: block;
        }
        .btn-primary {
            background-color: #007bff;
            border: none;
            border-radius: 4px;
            color: #fff;
            cursor: pointer;
            padding: 10px 20px;
            transition: background-color 0.3s ease;
        }
        .btn-primary:hover {
            background-color: #0056b3;
        }
	.input-container {
	            margin-bottom: 10px; /* Add margin */
	        }
	/* Added style for the API response box */
        .api-response-box {
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 10px;
            margin-top: 20px;
	    text-align: justify;
        }
	.summary-size-container {
	    display: flex;
	    align-items: center;
	}

	.summary-size-container label {
	    margin-right: 10px;
	}
	select {
	    padding: 8px;
	    border-radius: 4px;
	    border: 1px solid #ccc;
	    font-size: 14px;
	    font-family: Arial, sans-serif;
	    margin-right: 10px; /* Adjust spacing */
	}
    </style>
</head>
	<body>
	<div class="container">
	<h2 style="text-align: center;">LLM Support for Negative News</h2>
	<div class="tabs">
	<button class="tab-button active" onclick="openTab('summary')">Summary</button>
	<button class="tab-button" onclick="openTab('qa')">Q&A</button>
	<button class="tab-button" onclick="openTab('EntityExtraction')">Entity Extraction</button>
	</div>
	    <div id="summary" class="tab-content active">
		<div class="summary-size-container">
		    <label for="summarySizeSelect">Choose the size of the summary:</label>
		    <select id="summarySizeSelect">
		        <option value="20">Short</option>
		        <option value="40">Medium</option>
		        <option value="60">Long</option>
		    </select>
		</div>
		<div class="summary-size-container">
			<label for="summaryLanguageSelect">Choose the Language of the summary:</label>
		    	<select id="summaryLanguageSelect">
				<option value="english">English</option>
			        <option value="french">Français</option>
			        <option value="spanish">Español</option>
				<option value="Chinese">Chinese</option>
			</select>
		</div>
	        <button type="submit" class="btn-primary" id="callApiButton">Summarize the negative news</button>
		<p>Summary of the Negative News:</p>
		<div class="api-response-box"> 
	            <p><span id="apiResponse"></span></p>
	        </div>
		<p><span id="test"></span></p>
	    </div>
	    <div id="qa" class="tab-content">
		<label for="textInput" class="form-label">Enter your question:</label>
		<textarea class="form-input" id="textInput" rows="5" style="width: calc(100% - 20px); /* Subtract padding */ padding: 10px; border-radius: 8px; border: 1px solid #ccc; background-color: #f8f9fa; font-family: Arial, sans-serif; resize: vertical;"></textarea>
	        <button type="submit" class="btn-primary" id="callApiButtonQa">Submit the question</button>
		<p>Answer:</p>
	        <div class="api-response-box"> 
	            <p><span id="apiResponseQ&A"></span></p>
	        </div>
	    </div>
	   <div id="EntityExtraction" class="tab-content">
		    <button type="submit" class="btn-primary" id="callApiButtonEntity">Extract Entities</button>
		    <p>List of Entities:</p>
		    <p><span id="entityList"></span></p>
	   </div>
	</div>
		<p hidden> <span id="urlText"></span></p>
   	 	<p hidden><span id="api_key"></span> </p>
		<p hidden><span id="title"></span> </p>

    <script>

        "use strict";

	function openTab(tabName) {
	      const tabs = document.querySelectorAll('.tab-button');
	      tabs.forEach(tab => tab.classList.remove('active'));
	 
	      const contents = document.querySelectorAll('.tab-content');
	      contents.forEach(content => content.classList.remove('active'));
	 
	      document.getElementById(tabName).classList.add('active');
	      event.currentTarget.classList.add('active');
	    }

        va.messagingUtil.setOnDataReceivedCallback(updateURL);

        function updateURL(vaMsgObj) {
            console.log(vaMsgObj.data[0][0]);
            if (vaMsgObj && vaMsgObj.data && vaMsgObj.data.length > 0) {
                document.getElementById("urlText").textContent = vaMsgObj.data[0][0];
                document.getElementById("api_key").textContent = vaMsgObj.data[0][1];
		document.getElementById("title").textContent = vaMsgObj.data[0][2];
		document.getElementById("article_content").textContent = vaMsgObj.data[0][3];
            } else {
                document.getElementById("urlText").textContent = "No URL available";
            }
        }

	// API call for the summary
        document.getElementById("callApiButton").addEventListener("click", function() {

            var apiKey = document.getElementById("api_key").textContent;
	    var urlText = document.getElementById("urlText").textContent;
	    var title = document.getElementById("title").textContent;
	    var size = document.getElementById("summarySizeSelect").value;
	    var language = document.getElementById("summaryLanguageSelect").value;
	    var article_content = document.getElementById("article_content").textContent;
            // Construct API call
            var apiUrl = "https://api.openai.com/v1/chat/completions";
	    document.getElementById("apiResponse").innerHTML = "";

            // Make API call
             fetch(apiUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apiKey
                },
                body: JSON.stringify({
			"model": "gpt-3.5-turbo",
			"messages": [{"role": "user", "content": "Create a summary of arround" +size+ " words in " +language+ " based on this article:" +article_content
 			}]
                })
            })
            .then(response => response.json())
            .then(data => {
                var content = data.choices[0].message.content;

		    document.getElementById("apiResponse").innerHTML = "<strong>Title:</strong> " + title + "<br><br>" + content;
            })
            .catch(error => {
                console.error("Error:", error);
                document.getElementById("apiResponse").textContent = "Error occurred while fetching API data.";
            });
        });


	document.getElementById("callApiButtonQa").addEventListener("click", function() {
	        var apiKey = document.getElementById("api_key").textContent;
	        var urlText = document.getElementById("urlText").textContent;
	        var question = document.getElementById("textInput").value; // Retrieve the question from the textarea
		var article_content = document.getElementById("article_content").textContent;
	        // Construct API call
	        var apiUrl = "https://api.openai.com/v1/chat/completions";
	        // Make API call
	        fetch(apiUrl, {
	            method: "POST",
	            headers: {
	                "Content-Type": "application/json",
	                "Authorization": "Bearer " + apiKey
	            },
	            body: JSON.stringify({
	                "model": "gpt-3.5-turbo",
	                "messages": [{"role": "user", "content": "Answer the question: " + question + "\nBased on the article in this link: " + article_content}]
	            })
	        })
	        .then(response => response.json())
	        .then(data => {
	            var answer = data.choices[0].message.content; // Retrieve the answer from the API response
	            document.getElementById("apiResponseQ&A").textContent = answer; // Display the answer
	        })
	        .catch(error => {
	            console.error("Error:", error);
	            document.getElementById("apiResponseQ&A").textContent = "Error occurred while fetching API data.";
	        });
	    });

document.getElementById("callApiButtonEntity").addEventListener("click", function() {
    var apiKey = document.getElementById("api_key").textContent;
    // Construct API call
    var apiUrl = "https://api.openai.com/v1/chat/completions";
    var article_content = document.getElementById("article_content").textContent;
    
    // Make API call to extract entities
    fetch(apiUrl, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + apiKey
        },
        body: JSON.stringify({
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": "Extract company names and person names that are in this article:" +article_content }]
        })
    })
.then(response => response.json())
    .then(data => {
        // Extracted entities
        var entitiesString = data.choices[0].message.content;
        
        // Parse company names and person names from the response
        var companyNames = [];
        var personNames = [];
        entitiesString.split('\n\n').forEach(section => {
            var lines = section.split('\n');
            if (lines[0].startsWith('Company names:')) {
                companyNames = lines[0].replace('Company names:', '').trim().split(', ');
            } else if (lines[0].startsWith('Person names:')) {
                personNames = lines[0].replace('Person names:', '').trim().split(', ');
            }
        });
        
        // Display the extracted names in the HTML
        var entityList = document.getElementById("entityList");
        entityList.innerHTML = ""; // Clear previous content
        
        if (companyNames.length > 0) {
            var companyNamesTitle = document.createElement('p');
            companyNamesTitle.textContent = "Company Names:";
            entityList.appendChild(companyNamesTitle);
            var ulCompanyNames = document.createElement('ul');
            companyNames.forEach(name => {
                var li = document.createElement('li');
                li.textContent = name.trim();
                ulCompanyNames.appendChild(li);
            });
            entityList.appendChild(ulCompanyNames);
        }
        
        if (personNames.length > 0) {
            var personNamesTitle = document.createElement('p');
            personNamesTitle.textContent = "Person Names:";
            entityList.appendChild(personNamesTitle);
            var ulPersonNames = document.createElement('ul');
            personNames.forEach(name => {
                var li = document.createElement('li');
                li.textContent = name.trim();
                ulPersonNames.appendChild(li);
            });
            entityList.appendChild(ulPersonNames);
        }
    })
    .catch(error => {
        console.error("Error:", error);
        document.getElementById("entityList").textContent = "Error occurred while fetching entities.";
    });
});





    </script>
</body>
</html>
