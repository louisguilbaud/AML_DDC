<!DOCTYPE html>
<html lang="en">
    <script src='./javascripts/sas/util/messagingUtil.js'></script>
	<script src="./javascripts/jquery/jquery.min.js"></script>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Response</title>
</head>
<body>
    <h1>API Response</h1>
    <div id="response"></div>
    <h2>Current Alerting Event Details</h2>
    <div id="currentAlertingEventResponse"></div>
    <h2>Transaction Details</h2>
    <div id="transactionDetails"></div>
    <h2>PTY Details</h2>
    <div id="ptyDetails"></div>
    <div id="content"></div>
    <div id="contenttrans"></div>
<div id="apiResponseQ&A"></div>

<p hidden><span id="api_key"></span> </p>

    <script>
	"use strict";
        va.messagingUtil.setOnDataReceivedCallback(updateURL);

		function updateURL(vaMsgObj) {
			console.log(vaMsgObj.data[0][0]);
			if (vaMsgObj && vaMsgObj.data && vaMsgObj.data.length > 0) {
				document.getElementById("api_key").textContent = vaMsgObj.data[0][0];
			} else {
				document.getElementById("urlText").textContent = "No URL available";
			}
		}
        const cookie = 'sas-ingress-nginx=065cb3791bb3583f0df2865f6eeb8a3a|f0e9e5d83f1b459459b54939af4feb2b';
        var apiKey = document.getElementById("api_key").textContent;

        const myHeaders = new Headers();
        myHeaders.append("Cookie", cookie);

        const requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
        };

        async function fetchInitialApiResponse() {
            const url = 'https://sasserver.demo.sas.com/svi-alert/alerts/b63203ba-d218-410d-b3fe-95108afb5208';

            try {
                const response = await fetch(url, requestOptions);
                if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);
                
                const result = await response.json();
                displayResponse('response', result);

                const currentAlertingEventId = result.currentAlertingEventId;
                const actionableEntityId = result.actionableEntityId;

                console.log('Current Alerting Event ID:', currentAlertingEventId);
                console.log('Actionable Entity ID:', actionableEntityId);

                await fetchCurrentAlertingEvent(currentAlertingEventId);
                await fetchTransactionDetails(actionableEntityId);
                await fetchPtyDetails(actionableEntityId);

                const scenarioFiredEvents = result.scenarioFiredEvents.map(event => ({
                    scenarioDescription: event.scenarioDescription,
                    messageTemplateText: event.messageTemplateText
                }));

                displayResult(scenarioFiredEvents);
            } catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
            }
        }

        function displayResponse(id, result) {
            const div = document.getElementById(id);
            div.innerHTML = `<pre>${JSON.stringify(result, null, 2)}</pre>`;
        }

        async function fetchCurrentAlertingEvent(eventId) {
            const url = `https://sasserver.demo.sas.com/svi-alert/alertingEvents/${eventId}`;

            try {
                const response = await fetch(url, requestOptions);
                if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);

                const result = await response.json();
                console.log('Current Alerting Event Details:', result);
                displayResponse('currentAlertingEventResponse', result);

                // Extract only the desired properties from scenarioFiredEvents
                const filteredScenarioFiredEvents = result.scenarioFiredEvents.map(event => ({
                    scenarioName: event.scenarioName,
                    scenarioDescription: event.scenarioDescription,
                    messageTemplateText: event.messageTemplateText
                }));

                // Convert the filtered data to a formatted JSON string
                const filteredJson = JSON.stringify(filteredScenarioFiredEvents, null, 2);

                // Get the container to display the content
                const contentContainer = document.getElementById('content');

                // Create a pre element to display the parsed data in JSON format
                const parsedPre = document.createElement('pre');
                parsedPre.className = 'parsed-container';
                parsedPre.textContent = 'Filtered Scenario Fired Events:\n' + filteredJson;

                // Append the parsed data pre element to the content container
                contentContainer.appendChild(parsedPre);
            } catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
            }
        }

        async function fetchTransactionDetails(actionableEntityId) {
            const url = `https://sasserver.demo.sas.com/amlCore/transactions?entityLevelCode=PTY&entityNumber=${actionableEntityId}`;

            try {
                const response = await fetch(url, requestOptions);
                if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);

                const result = await response.json();
                console.log('Transaction Details:', result);
                displayResponse('transactionDetails', result);

                if (Array.isArray(result.items)) {
                    // Extract only the desired properties from transactions
                    const filteredTransactions = result.items.map(transaction => ({
                        transactionNumber: transaction.transactionNumber,
                        primaryMediumDesc: transaction.primaryMediumDesc,
                        secondaryMediumDesc: transaction.secondaryMediumDesc,
                        mechanismDesc: transaction.mechanismDesc,
                        currencyAmount: transaction.currencyAmount,
                        transactionCDIDesc: transaction.transactionCDIDesc,
                    }));

                    // Convert the filtered data to a formatted JSON string
                    const filteredJsonTrans = JSON.stringify(filteredTransactions, null, 2);

                    // Get the container to display the content
                    const contentContainerTrans = document.getElementById('contenttrans');

                    // Create a pre element to display the parsed data in JSON format
                    const parsedPreTrans = document.createElement('pre');
                    parsedPreTrans.className = 'parsed-container';
                    parsedPreTrans.textContent = 'Filtered Transactions:\n' + filteredJsonTrans;

                    // Append the parsed data pre element to the content container
                    contentContainerTrans.appendChild(parsedPreTrans);
                } else {
                    console.error('Transaction details result.items is not an array:', result.items);
                }
            } catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
            }
        }

        async function fetchPtyDetails(actionableEntityId) {
            const url = `https://sasserver.demo.sas.com/SASVisualInvestigator/pages/PTY/${actionableEntityId}`;

            try {
                const response = await fetch(url, requestOptions);
                if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);

                const result = await response.json();
                console.log('PTY Details:', result);
                displayResponse('ptyDetails', result);
            } catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
            }
        }


        fetch('https://api.openai.com/v1/chat/completions', {

				method: "POST",
				headers: {
					"Content-Type": "application/json",
					"Authorization": "Bearer " +  apiKey
				},
				body: JSON.stringify({
					"model": "gpt-3.5-turbo",
					"messages": [{"role": "user", "content": "You are here to help an AML investator of a bank. In json format there is a list of scenarios that trigger a customer. There is also the list of transactions of this customer in json format.  Based on that give recomandation for the investigation. send back a text on where the investigator should look. You can provide details at Scenario fired event level and give the transactions supicious for each scenario fired event and why they are suspicious. Give also generalrecomandation on this alert: Filtered Scenario Fired Events:" + content + "Filtered transactions:" +contenttrans}]
				})
			})
			.then(response => response.json())
			.then(data => {
				var answer = data.choices[0].message.content; // Retrieve the answer from the API response
				console.log(data);
				document.getElementById("apiResponseQ&A").textContent = answer; // Display the answer
			})
			.catch(error => {
				console.error("Error:", error);
				document.getElementById("apiResponseQ&A").textContent = "Error occurred while fetching API data.";
			});
        // Initial fetch call
        fetchInitialApiResponse();
    </script>
</body>
</html>
