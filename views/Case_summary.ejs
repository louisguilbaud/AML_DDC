<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Response</title>
</head>
<body>
    <h1>API Response</h1>
    <div id="response"></div>
    <h2>Current Alerting Event Details</h2>
    <div id="currentAlertingEventResponse"></div>
    <h2>Transaction Details</h2>
    <div id="transactionDetails"></div>
    <h2>PTY Details</h2>
    <div id="ptyDetails"></div>
    <div id="content"></div>
    <div id="contenttrans"></div>

    <script>
        const cookie = 'sas-ingress-nginx=065cb3791bb3583f0df2865f6eeb8a3a|f0e9e5d83f1b459459b54939af4feb2b';

        const myHeaders = new Headers();
        myHeaders.append("Cookie", cookie);

        const requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
        };

        async function fetchInitialApiResponse() {
            const url = 'https://sasserver.demo.sas.com/svi-alert/alerts/b63203ba-d218-410d-b3fe-95108afb5208';

            try {
                const response = await fetch(url, requestOptions);
                if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);
                
                const result = await response.json();
                displayResponse('response', result);

                const currentAlertingEventId = result.currentAlertingEventId;
                const actionableEntityId = result.actionableEntityId;

                console.log('Current Alerting Event ID:', currentAlertingEventId);
                console.log('Actionable Entity ID:', actionableEntityId);

                await fetchCurrentAlertingEvent(currentAlertingEventId);
                await fetchTransactionDetails(actionableEntityId);
                await fetchPtyDetails(actionableEntityId);

                const scenarioFiredEvents = result.scenarioFiredEvents.map(event => ({
                    scenarioDescription: event.scenarioDescription,
                    messageTemplateText: event.messageTemplateText
                }));

                displayResult(scenarioFiredEvents);
            } catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
            }
        }

        function displayResponse(id, result) {
            const div = document.getElementById(id);
            div.innerHTML = `<pre>${JSON.stringify(result, null, 2)}</pre>`;
        }

        async function fetchCurrentAlertingEvent(eventId) {
            const url = `https://sasserver.demo.sas.com/svi-alert/alertingEvents/${eventId}`;

            try {
                const response = await fetch(url, requestOptions);
                if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);

                const result = await response.json();
                console.log('Current Alerting Event Details:', result);
                displayResponse('currentAlertingEventResponse', result);

                // Extract only the desired properties from scenarioFiredEvents
                const filteredScenarioFiredEvents = result.scenarioFiredEvents.map(event => ({
                    scenarioName: event.scenarioName,
                    scenarioDescription: event.scenarioDescription,
                    messageTemplateText: event.messageTemplateText
                }));

                // Convert the filtered data to a formatted JSON string
                const filteredJson = JSON.stringify(filteredScenarioFiredEvents, null, 2);

                // Get the container to display the content
                const contentContainer = document.getElementById('content');

                // Create a pre element to display the parsed data in JSON format
                const parsedPre = document.createElement('pre');
                parsedPre.className = 'parsed-container';
                parsedPre.textContent = 'Filtered Scenario Fired Events:\n' + filteredJson;

                // Append the parsed data pre element to the content container
                contentContainer.appendChild(parsedPre);
            } catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
            }
        }

        async function fetchTransactionDetails(actionableEntityId) {
            const url = `https://sasserver.demo.sas.com/amlCore/transactions?entityLevelCode=PTY&entityNumber=${actionableEntityId}`;

            try {
                const response = await fetch(url, requestOptions);
                if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);

                const result = await response.json();
                console.log('Transaction Details:', result);
                displayResponse('transactionDetails', result);
            } catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
            }

        // Extract only the desired properties from scenarioFiredEvents
        const filteredtransactions = result.map(event => ({
            transactionNumber: event.transactionNumber,
            primaryMediumDesc: event.primaryMediumDesc,
            secondaryMediumDesc: event.secondaryMediumDesc,
			mechanismDesc: event.mechanismDesc,
			currencyAmount: event.currencyAmount,
			transactionCDIDesc: event.transactionCDIDesc,
        }));

        // Convert the filtered data to a formatted JSON string
        const filteredJsontrans = JSON.stringify(filteredtransactions, null, 2);

        // Get the container to display the content
        const contentContainertrans = document.getElementById('contenttrans');

        // Create a div to display the parsed data in JSON format
        const parsedDivtrans = document.createElement('div');
        parsedDivtrans.className = 'parsed-container';
        parsedDivtrans.textContent = 'Filtered transactions:\n' + filteredJsontrans;

        // Append the parsed data div to the content container
        contentContainertrans.appendChild(parsedDivtrans); 
        }

        async function fetchPtyDetails(actionableEntityId) {
            const url = `https://sasserver.demo.sas.com/SASVisualInvestigator/pages/PTY/${actionableEntityId}`;

            try {
                const response = await fetch(url, requestOptions);
                if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);

                const result = await response.json();
                console.log('PTY Details:', result);
                displayResponse('ptyDetails', result);
            } catch (error) {
                console.error('There has been a problem with your fetch operation:', error);
            }
        }

        // Initial fetch call
        fetchInitialApiResponse();
    </script>
</body>
</html>
