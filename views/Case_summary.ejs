<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Response</title>
</head>
<body>
    <h1>API Response</h1>
    <div id="response"></div>
    <h2>Current Alerting Event Details</h2>
    <div id="currentAlertingEventResponse"></div>
    <h2>Transaction Details</h2>
    <div id="transactionDetails"></div>
    <h2>PTY Details</h2>
    <div id="ptyDetails"></div>

    <script>
        const cookie = 'your-secure-cookie-value'; // Ideally, get this value from a secure storage

        const myHeaders = new Headers();
        myHeaders.append("Cookie", cookie);

        const requestOptions = {
            method: 'GET',
            headers: myHeaders,
            redirect: 'follow'
        };

        async function fetchInitialApiResponse() {
            const url = 'https://sasserver.demo.sas.com/svi-alert/alerts/b63203ba-d218-410d-b3fe-95108afb5208';

            try {
                const result = await fetchApi(url);
                displayResponse('response', result);

                const { currentAlertingEventId, actionableEntityId, scenarioFiredEvents } = result;

                console.log('Current Alerting Event ID:', currentAlertingEventId);
                console.log('Actionable Entity ID:', actionableEntityId);

                await Promise.all([
                    fetchCurrentAlertingEvent(currentAlertingEventId),
                    fetchTransactionDetails(actionableEntityId),
                    fetchPtyDetails(actionableEntityId)
                ]);

                const scenarioEvents = scenarioFiredEvents.map(event => ({
                    scenarioDescription: event.scenarioDescription,
                    messageTemplateText: event.messageTemplateText
                }));

                displayResponse('response', scenarioEvents);
            } catch (error) {
                displayError(error);
            }
        }

        async function fetchApi(url) {
            const response = await fetch(url, requestOptions);
            if (!response.ok) throw new Error('Network response was not ok ' + response.statusText);
            return await response.json();
        }

        function displayResponse(id, result) {
            const div = document.getElementById(id);
            div.innerHTML = `<pre>${JSON.stringify(result, null, 2)}</pre>`;
        }

        function displayError(error) {
            console.error('There has been a problem with your fetch operation:', error);
            document.body.innerHTML += `<p style="color:red;">Error: ${error.message}</p>`;
        }

        async function fetchCurrentAlertingEvent(eventId) {
            const url = `https://sasserver.demo.sas.com/svi-alert/alertingEvents/${eventId}`;
            const result = await fetchApi(url);
            console.log('Current Alerting Event Details:', result);
            displayResponse('currentAlertingEventResponse', result);
        }

        async function fetchTransactionDetails(actionableEntityId) {
            const url = `https://sasserver.demo.sas.com/amlCore/transactions?entityLevelCode=PTY&entityNumber=${actionableEntityId}`;
            const result = await fetchApi(url);
            console.log('Transaction Details:', result);
            displayResponse('transactionDetails', result);
        }

        async function fetchPtyDetails(actionableEntityId) {
            const url = `https://sasserver.demo.sas.com/SASVisualInvestigator/pages/PTY/${actionableEntityId}`;
            const result = await fetchApi(url);
            console.log('PTY Details:', result);
            displayResponse('ptyDetails', result);
        }

        // Initial fetch call
        fetchInitialApiResponse();
    </script>
</body>
</html>
