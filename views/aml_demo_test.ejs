<!--
Written by Tsun Wai Wong, Anton Johansson & ChatGPT
Date: September 2025
tsunWai.wong@sas.com
anton.johansson@sas.com
-->

<!DOCTYPE html>
<html lang="en">

<head>
        <!--
        Alert Summarizer Application
        ============================
        Enterprise AML (Anti-Money Laundering) alert processing and AI-powered summarization system
        designed for SAS Visual Analytics integration. Provides analysts with intelligent alert
        summarization, contextual chat interactions, and streamlined case documentation workflows.

        Key Features:
        - AI-powered alert summarization with configurable models (GPT-4, Claude, etc.)
        - Interactive chat interface for detailed alert investigation
        - Real-time comment/annotation system for case documentation
        - Responsive design optimized for compliance workflow efficiency
        - Secure content sanitization for enterprise security requirements
        - SAS Visual Analytics iframe integration with bidirectional messaging

        Technical Architecture:
        - Single-page application with tab-based navigation (Summary/Chat)
        - CSS-only animations and transitions for performance
        - No framework dependencies - vanilla JavaScript for minimal overhead
        - Enterprise-grade security with CSP-compliant external resources
        -->

        <!-- Standard HTML5 metadata for character encoding and responsive viewport configuration -->
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <title>Alert Summarizer</title>

        <!--
        External Library Dependencies
        ============================
        Critical security and integration libraries for enterprise AML processing.
        All CDN resources include integrity checking and strict CORS policies.
        -->

        <!--
        SAS Visual Analytics Messaging Utility
        Integration component for bidirectional communication with SAS VA dashboards.
        Handles parameter passing, data exchange, and iframe postMessage protocols.
        -->
        <script src="./javascripts/sas/util/messagingUtil.js"></script>

        <!--
        DOMPurify v3.1.6 - XSS Sanitization Library
        Enterprise-grade HTML sanitization to prevent XSS attacks in user-generated content.
        Essential for processing alert descriptions and user comments safely.
        Integrity hash ensures CDN resource hasn't been tampered with.
        -->
        <script src="https://unpkg.com/dompurify@3.1.6/dist/purify.min.js"
                integrity="sha384-+VfUPEb0PdtChMwmBcBmykRMDd+v6D/oFmB3rZM/puCMDYcIvF968OimRh4KQY9a"
                crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <style>
                /*
                Alert Summarizer Stylesheet
                ===========================
                Comprehensive styling system for enterprise AML alert processing application.
                Designed for optimal readability, accessibility, and professional compliance workflows.

                Architecture Overview:
                1. CSS Custom Properties (Design System Foundation)
                2. Base Typography & Layout (Cross-browser compatibility)
                3. Component-Specific Styles (Modular design patterns)
                4. Interactive States & Micro-animations (Performance-optimized)
                5. Responsive Design (Mobile-first approach)
                6. Accessibility Enhancements (WCAG 2.1 AA compliance)
                7. Performance Optimizations (GPU acceleration, contain properties)

                Design System Philosophy:
                - SAS brand-compliant color palette and typography
                - Consistent 14px base content indentation for visual hierarchy
                - Rounded corners (14px-24px) for modern, approachable aesthetic
                - Subtle shadows and transparency for depth without distraction
                - High contrast ratios for compliance environment readability
                */

                /*
                CSS Custom Properties - Design System Foundation
                ===============================================
                Central theme configuration using CSS custom properties for consistent
                branding, easy maintenance, and potential dark mode implementation.
                All components reference these tokens rather than hardcoded values.
                */
                :root {
                        /*
                        Base Color Palette - High Contrast for Compliance
                        ================================================
                        Semantic color tokens following enterprise design patterns
                        */
                        --bg: #fff;
                        /* Primary background - pure white for maximum contrast */
                        --fg: #1d1d1f;
                        /* Primary text - near-black for optimal readability */
                        --muted: #6e6e73;
                        /* Secondary text - sufficient contrast for WCAG AA */
                        --card: #fff;
                        /* Surface/card background - maintains consistency */
                        --border: rgba(0, 0, 0, .08);
                        /* Subtle borders - minimal visual weight */

                        /*
                        SAS Brand Colors - Primary Interactive Elements
                        ==============================================
                        Official SAS brand blue palette for CTAs and active states
                        */
                        --primary: #0478CE;
                        /* SAS brand blue - primary action color */
                        --primary-press: #0366AF;
                        /* Darker variant for active/pressed states */
                        --primary-soft: #E8F3FF;
                        /* Light blue tint for secondary surfaces */
                        --grey-soft: #fafafa;
                        /* Neutral light background for input fields */

                        /*
                        Layout System Variables
                        ======================
                        Consistent spacing and sizing tokens
                        */
                        --content-indent: 14px;
                        /* Standard content indentation for hierarchy */

                        /*
                        Typography Scale - Font Size System
                        ==================================
                        Semantic font size tokens for consistent typography hierarchy
                        */
                        --fs-1: 12px;
                        /* Smallest text - model disclaimers */
                        --fs-2: 13px;
                        /* Small text - labels, captions, summary cutoff */
                        --fs-3: 14px;
                        /* Small+ text - general disclaimers */
                        --fs-4: 15px;
                        /* Medium-small - subtitles, secondary buttons, selects, tab labels */
                        --fs-5: 16px;
                        /* Base text - summary content, textareas, messages, inputs, comments */
                        --fs-6: 17px;
                        /* Base+ text - body text, primary buttons */
                        --fs-7: 19px;
                        /* Medium heading - summary h2 subheadings */
                        --fs-8: 26px;
                        /* Large heading - summary h1 headings */
                        --fs-9: 30px;
                        /* Largest heading - main page title */
                }

                /*
                Base Element Reset & Typography
                ===============================
                Cross-browser normalization and base styling for consistent rendering
                */
                * {
                        box-sizing: border-box
                                /* Predictable sizing model */
                }

                html,
                body {
                        height: 100%
                                /* Full viewport height for single-page layout */
                }

                body {
                        margin: 0;
                        /* Remove default browser margins */
                        background: var(--bg);
                        /* Apply theme background */
                        color: var(--fg);
                        /* Apply theme text color */
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, system-ui;
                        /* System font stack for optimal performance and native feel across platforms */
                        font-size: var(--fs-6);
                }


                /*
                Layout Container - Responsive Main Wrapper
                ==========================================
                Centered layout with responsive width constraints optimized for
                both desktop compliance workstations and mobile device access
                */
                .container {
                        width: min(96vw, 1600px);
                        /* Responsive width: 96% viewport up to 1600px max */
                        margin: 2vh auto 8vh;
                        /* Vertical spacing: 2% top, 8% bottom for breathing room */
                        padding: 0 24px;
                        /* Horizontal padding for edge-to-edge mobile safety */
                }

                /*
                Primary Card Component - Main Content Container
                ==============================================
                Elevated surface design for the main application interface.
                Uses layered shadows for subtle depth and professional appearance.
                */
                .card {
                        background: var(--card);
                        /* Theme-aware surface color */
                        border: 1px solid var(--border);
                        /* Subtle edge definition */
                        border-radius: 24px;
                        /* Generous rounding for modern aesthetic */
                        box-shadow: 0 1px 2px rgba(0, 0, 0, .04), 0 8px 30px rgba(0, 0, 0, .06);
                        /* Layered shadow: subtle contact shadow + ambient shadow for depth */
                        padding: 32px;
                        /* Generous internal spacing for content breathing room */
                        display: grid;
                        /* CSS Grid for flexible content layout */
                        gap: 18px
                                /* Consistent spacing between card sections */
                }

                /*
                Header Layout & Typography
                ==========================
                Application header with title area and controls
                */
                .header {
                        display: flex;
                        /* Horizontal layout for title and controls */
                        justify-content: space-between;
                        /* Push content to edges */
                        align-items: flex-start;
                        /* Top-align for multi-line content */
                        gap: 12px
                                /* Breathing room between title and controls */
                }

                h1 {
                        margin: 0 0 6px 0;
                        /* Minimal bottom margin for subtitle spacing */
                        font-size: var(--fs-9);
                        font-weight: 650;
                        /* Semi-bold for authority without heaviness */
                        letter-spacing: -.02em
                                /* Slight negative tracking for large text */
                }

                .subtitle {
                        margin: 0;
                        /* Reset default paragraph margins */
                        color: var(--muted);
                        /* Reduced contrast for hierarchy */
                        font-size: var(--fs-4);
                }

                /*
                Utility Components - Layout & Form Base
                =======================================
                Reusable layout patterns and form element normalization
                */
                .row {
                        display: flex;
                        /* Horizontal content flow */
                        gap: 10px;
                        /* Consistent item spacing */
                        align-items: center
                                /* Vertical center alignment */
                }

                button {
                        appearance: none;
                        /* Remove default browser styling */
                        border: none;
                        /* Clean slate for custom styling */
                        cursor: pointer;
                        /* Indicate interactivity */
                        font-family: inherit
                                /* Inherit system font stack */
                }

                /*
                Button Component System
                =======================
                Consistent interactive elements with accessibility and micro-interactions
                */

                /* Primary CTA button (Summarize, Send) - High-emphasis actions */
                .btn-primary {
                        background: var(--primary);
                        /* SAS brand blue for primary actions */
                        color: #fff;
                        /* High contrast white text */
                        border-radius: 14px;
                        /* Rounded corners matching design system */
                        padding: 12px 18px;
                        /* Comfortable touch target (44px+ height) */
                        font-size: var(--fs-6);
                        font-weight: 600;
                        /* Semi-bold for emphasis and readability */
                        box-shadow: 0 6px 18px rgba(0, 122, 255, .25);
                        /* Colored shadow reinforces button importance and adds depth */
                        transition: transform .06s, box-shadow .2s, filter .2s
                                /* Fast micro-interactions for responsive feel */
                }

                .btn-primary:hover {
                        filter: brightness(1.02)
                                /* Subtle brightness increase on hover */
                }

                .btn-primary:active {
                        transform: scale(.985)
                                /* Slight scale down for tactile feedback */
                }

                .btn-primary:disabled {
                        opacity: .65;
                        /* Reduced opacity indicates disabled state */
                        cursor: not-allowed;
                        /* Clear visual feedback for disabled state */
                        box-shadow: none
                                /* Remove elevation when non-interactive */
                }

                /* Secondary/neutral button (Clear/Save) - Medium-emphasis actions */
                .btn-secondary {
                        background: var(--grey-soft);
                        /* Neutral background for secondary actions */
                        color: var(--fg);
                        /* Primary text color for readability */
                        border-radius: 14px;
                        /* Consistent rounding with primary buttons */
                        padding: 10px 16px;
                        /* Slightly smaller padding for hierarchy */
                        font-size: var(--fs-4);
                        /* Scalable secondary text size */
                        font-weight: 600
                                /* Maintain readability with semi-bold weight */
                }

                .btn-secondary:hover {
                        filter: brightness(.97)
                                /* Subtle darkening on hover for feedback */
                }

                .btn-secondary:active {
                        filter: brightness(.94)
                                /* More pronounced darkening when pressed */
                }

                /*
                Loading States & Micro-animations
                =================================
                Performance-optimized animations for user feedback during AI processing
                */

                /* Inline spinner for button loading states */
                .spinner {
                        width: 16px;
                        /* Compact size for inline use */
                        height: 16px;
                        border: 2px solid rgba(255, 255, 255, .6);
                        /* Semi-transparent border for subtle appearance */
                        border-top-color: #fff;
                        /* Full opacity top for rotation visual */
                        border-radius: 50%;
                        /* Perfect circle */
                        animation: spin 1s linear infinite;
                        /* Smooth continuous rotation */
                        display: none
                                /* Hidden by default, shown via JavaScript */
                }

                @keyframes spin {
                        to {
                                transform: rotate(360deg)
                                        /* Full rotation for smooth spinner animation */
                        }
                }

                /* Loading state management - toggle between text and spinner */
                .loading .spinner {
                        display: inline-block
                                /* Show spinner during loading */
                }

                .loading .labeltext {
                        display: none
                                /* Hide button text during loading */
                }

                /*
                Typography & Content Hierarchy
                ==============================
                Section headers and content organization elements
                */

                /* Section label headers (Summary, Comments, Chat) */
                .label {
                        font-size: var(--fs-2);
                        text-transform: uppercase;
                        /* All caps for section emphasis */
                        letter-spacing: .08em;
                        /* Wide tracking for readability */
                        color: var(--muted);
                        /* Reduced contrast for hierarchy */
                        margin-bottom: 8px;
                        /* Spacing before section content */
                        padding-left: var(--content-indent);
                        /* Consistent left alignment */
                }

                /*
                Accessibility Utilities
                =======================
                WCAG 2.1 AA compliance utilities for screen reader support
                */

                /* Visually hidden content for screen readers (WCAG 2.1 AA compliant) */
                .sr-only {
                        position: absolute;
                        /* Remove from normal document flow */
                        width: 1px;
                        /* Minimal dimensions */
                        height: 1px;
                        padding: 0;
                        /* Remove all spacing */
                        margin: -1px;
                        /* Negative margin to fully hide */
                        overflow: hidden;
                        /* Prevent content overflow */
                        clip: rect(0, 0, 0, 0);
                        /* Legacy clipping for older browsers */
                        white-space: nowrap;
                        /* Prevent text wrapping */
                        border: 0;
                        /* Remove any borders */
                }

                /*
                Form Controls - Select Dropdown
                ===============================
                Styled select element matching button design system
                */

                /* Model selection dropdown styled to match secondary buttons */
                .select-model {
                        background: var(--grey-soft);
                        /* Neutral background matching btn-secondary */
                        color: var(--fg);
                        /* Primary text color */
                        border: none;
                        /* Clean appearance without borders */
                        border-radius: 14px;
                        /* Consistent rounding */
                        padding: 10px 12px;
                        /* Comfortable padding for readability */
                        font-size: var(--fs-4);
                        font-weight: 600;
                        /* Semi-bold for consistency */
                }

                .select-model:disabled {
                        opacity: .65;
                        /* Visual feedback for disabled state */
                        cursor: not-allowed;
                        /* Clear interaction feedback */
                }

                /*
                Content Display Areas
                =====================
                Containers for AI-generated content and user input
                */

                /* AI summary output container - supports rich HTML content */
                .summary {
                        border: 1px solid var(--border);
                        /* Subtle edge definition */
                        border-radius: 14px;
                        /* Consistent rounding */
                        background: var(--grey-soft);
                        /* Light background for content separation */
                        padding: 14px;
                        /* Internal spacing for readability */
                        min-height: 140px;
                        /* Minimum height prevents layout shift */
                        white-space: normal;
                        /* Allow normal text wrapping */
                        font-size: var(--fs-5);
                }

                /* Rich text styling within summary content */
                .summary h1 {
                        font-size: var(--fs-8);
                        margin: 0 0 8px
                                /* Bottom spacing for content separation */
                }

                .summary h2 {
                        font-size: var(--fs-7);
                        margin: 14px 0 6px
                                /* Top and bottom spacing for hierarchy */
                }

                .summary p {
                        margin: 6px 0
                                /* Minimal paragraph spacing */
                }

                .summary ul {
                        margin: 6px 0 6px 18px;
                        /* List spacing with left offset */
                        padding-left: 14px
                                /* Additional indentation for bullets */
                }

                .summary li {
                        margin: 3px 0
                                /* Compact list item spacing */
                }

                /* AI model knowledge cutoff disclaimer */
                .summary .cutoff {
                        margin-top: 10px;
                        /* Separation from main content */
                        font-size: var(--fs-2);
                        color: var(--muted)
                                /* Reduced emphasis for footnote content */
                }

                /*
                Form Input Elements
                ==================
                Text input areas with focus states and accessibility
                */

                /* Comment textarea with auto-resize functionality */
                textarea {
                        width: 100%;
                        /* Full width for maximum usability */
                        min-height: 120px;
                        /* Minimum height for comfortable editing */
                        padding: 14px 14px;
                        /* Generous padding for touch targets */
                        border-radius: 16px;
                        /* Slightly larger radius for text areas */
                        border: 1px solid rgba(0, 0, 0, .12);
                        /* Subtle border with transparency */
                        background: #fff;
                        /* Clean white background for text clarity */
                        outline: none;
                        /* Remove default focus outline */
                        line-height: 1.5;
                        /* Comfortable reading line height */
                        overflow: hidden;
                        /* Hide scrollbars for auto-resize */
                        resize: none;
                        /* Disable manual resize for consistent layout */
                        font-size: var(--fs-5);
                }

                textarea:focus {
                        border-color: var(--primary-press);
                        /* Brand color focus indication */
                        box-shadow: 0 0 0 4px rgba(10, 132, 255, .12)
                                /* Accessible focus ring with sufficient contrast */
                }

                .caption {
                        font-size: var(--fs-2);
                        color: var(--muted)
                                /* Reduced contrast for supporting text */
                }

                /*
                User Experience Enhancements
                ============================
                Prevent accidental text selection on UI elements
                */

                /* Disable text selection on non-content UI elements */
                h1#title,
                .subtitle,
                .label {
                        -webkit-user-select: none;
                        /* Safari */
                        -moz-user-select: none;
                        /* Firefox */
                        -ms-user-select: none;
                        /* IE/Edge legacy */
                        user-select: none;
                        /* Standard property */
                        -webkit-touch-callout: none;
                        /* Disable iOS long-press context menu */
                }

                /* Prevent selection of loading states and skeleton content */
                .summary .working,
                .summary .working *,
                .summary .skel,
                .summary .skel * {
                        -webkit-user-select: none;
                        /* Cross-browser text selection prevention */
                        -moz-user-select: none;
                        -ms-user-select: none;
                        user-select: none;
                        -webkit-touch-callout: none;
                        /* iOS touch interaction prevention */
                }


                /*
                Notification System
                ==================
                Toast notifications for user feedback
                */

                /* Toast notification component for save/clear confirmations */
                .toast {
                        position: fixed;
                        /* Fixed positioning for overlay */
                        left: 50%;
                        /* Center horizontally */
                        bottom: 24px;
                        /* Fixed distance from bottom */
                        transform: translateX(-50%) translateY(20px);
                        /* Center and initially offset down for animation */
                        background: #111;
                        /* High contrast dark background */
                        color: #fff;
                        /* White text for maximum readability */
                        padding: 10px 14px;
                        /* Compact padding for brief messages */
                        border-radius: 999px;
                        /* Pill shape for modern appearance */
                        box-shadow: 0 10px 30px rgba(0, 0, 0, .25);
                        /* Strong shadow for overlay emphasis */
                        opacity: 0;
                        /* Hidden by default */
                        pointer-events: none;
                        /* Non-interactive during fade */
                        transition: transform .35s, opacity .35s
                                /* Smooth slide-up animation */
                }

                .toast.show {
                        opacity: 1;
                        /* Visible state */
                        transform: translateX(-50%) translateY(0)
                                /* Final position - centered and at bottom */
                }

                /*
                Loading State Animations
                ========================
                Animated feedback during AI processing with skeleton screens
                */

                /* "Working..." text with animated dots */
                .working {
                        display: inline-flex;
                        /* Horizontal layout with text and dots */
                        align-items: center;
                        /* Vertical center alignment */
                        gap: 6px;
                        /* Spacing between text and animation */
                        color: var(--muted);
                        /* Reduced contrast for loading state */
                        font-weight: 600
                                /* Semi-bold for visibility */
                }

                .working .dots {
                        display: inline-flex;
                        /* Horizontal dot layout */
                        gap: 4px;
                        /* Spacing between dots */
                        margin-left: 2px
                                /* Small offset from text */
                }

                .working .dots i {
                        width: 6px;
                        /* Small dot size */
                        height: 6px;
                        border-radius: 50%;
                        /* Perfect circle */
                        background: var(--muted);
                        /* Muted color for subtlety */
                        opacity: .25;
                        /* Base transparency */
                        animation: dotpulse 1s ease-in-out infinite
                                /* Smooth pulsing animation */
                }

                .working .dots i:nth-child(2) {
                        animation-delay: .2s
                                /* Staggered animation timing */
                }

                .working .dots i:nth-child(3) {
                        animation-delay: .4s
                                /* Further staggered timing */
                }

                @keyframes dotpulse {

                        0%,
                        100% {
                                transform: translateY(0);
                                /* Rest position */
                                opacity: .25
                                        /* Base transparency */
                        }

                        50% {
                                transform: translateY(-3px);
                                /* Small upward movement */
                                opacity: 1
                                        /* Full opacity at peak */
                        }
                }

                /* Skeleton screen placeholder content */
                .skel {
                        display: grid;
                        /* Vertical layout for skeleton lines */
                        gap: 8px;
                        /* Spacing between skeleton elements */
                        margin-top: 10px
                                /* Separation from loading text */
                }

                .skel .line {
                        height: 10px;
                        /* Text line height simulation */
                        border-radius: 6px;
                        /* Rounded line ends */
                        background: linear-gradient(90deg, #ececec, #f7f7f7, #ececec);
                        /* Gradient for shimmer effect */
                        background-size: 200% 100%;
                        /* Oversized background for animation */
                        animation: shimmer 2.5s linear infinite
                                /* Continuous shimmer movement */
                }

                @keyframes shimmer {
                        0% {
                                background-position: 200% 0
                                        /* Start position - off right */
                        }

                        100% {
                                background-position: -200% 0
                                        /* End position - off left */
                        }
                }

                /*
                Content Alignment & Spacing
                ===========================
                Consistent indentation system for visual hierarchy
                */

                #charCount {
                        margin-left: var(--content-indent);
                        /* Align with other content elements */
                }

                .header>div:first-child {
                        padding-left: var(--content-indent);
                        /* Header content indentation */
                }

                /*
                Chat Interface Component
                ========================
                Interactive messaging system for alert investigation and Q&A.
                Optimized for compliance workflows with clear message hierarchy.
                */
                .chat {
                        border: 1px solid var(--border);
                        /* Subtle container definition */
                        border-radius: 14px;
                        /* Consistent rounding */
                        background: var(--grey-soft);
                        /* Light background for message contrast */
                        padding: 14px;
                        /* Internal spacing */
                        display: flex;
                        /* Vertical flex layout */
                        flex-direction: column;
                        /* Stack messages over input */
                        gap: 10px;
                        /* Spacing between messages and input */
                }

                .chat-messages {
                        min-height: 273px;
                        /* Minimum scrollable area */
                        max-height: clamp(360px, 55vh, 720px);
                        /* Responsive height: min 360px, max 720px, prefer 55% viewport */
                        overflow: auto;
                        /* Scrollable when content exceeds height */
                        display: grid;
                        /* Grid layout for message stacking */
                        gap: 10px;
                        /* Spacing between messages */
                        padding-right: 4px;
                        /* Account for scrollbar width */
                        align-content: start;
                        /* Top-align message grid */
                        align-items: start;
                        /* Top-align individual messages */
                        grid-auto-rows: max-content;
                        /* Size rows to content height */
                }

                /*
                Message Bubble System
                =====================
                Distinct styling for user and bot messages with conversation flow
                */

                .msg {
                        display: flex;
                        /* Horizontal message layout */
                }

                .msg .bubble {
                        border: 1px solid var(--border);
                        /* Subtle edge definition */
                        background: #f7f7f7;
                        /* Default message background */
                        color: var(--fg);
                        /* Primary text color */
                        padding: 10px 12px;
                        /* Comfortable reading padding */
                        border-radius: 14px 14px 4px 14px;
                        /* Asymmetric rounding for speech bubble effect */
                        font-size: var(--fs-5);
                        line-height: 1.35;
                        /* Compact line height for conversation */
                        max-width: 72%;
                        /* Prevent overly wide messages */
                        box-shadow: 0 1px 2px rgba(0, 0, 0, .04);
                        /* Subtle shadow for message separation */
                }

                /* Bot message styling - clean white bubbles */
                .msg.bot .bubble {
                        background: #fff;
                        /* Clean white for AI responses */
                        color: var(--fg);
                        /* Standard text color */
                        border-color: var(--border);
                        /* Consistent border treatment */
                }

                .msg.user {
                        justify-content: flex-end;
                        /* Right-align user messages */
                }

                /* User message styling - branded color treatment */
                .msg.user .bubble {
                        background: var(--primary-soft);
                        /* Light brand color for user messages */
                        color: var(--fg);
                        /* Maintain text readability */
                        border-color: var(--border);
                        /* Consistent border treatment */
                        border-radius: 14px 14px 14px 4px;
                        /* Flipped radius for right alignment */
                }

                /*
                Chat Input Area
                ==============
                Message composition interface with send button
                */

                .chat-input {
                        display: flex;
                        /* Horizontal layout: input + button */
                        gap: 8px;
                        /* Spacing between input and send button */
                }

                #chatText {
                        flex: 1;
                        /* Expand to fill available width */
                        border: 1px solid rgba(0, 0, 0, .12);
                        /* Subtle border for input definition */
                        border-radius: 14px;
                        /* Consistent rounding */
                        padding: 12px 14px;
                        /* Comfortable typing padding */
                        font: inherit;
                        /* Use system font stack */
                        outline: none;
                        /* Remove default focus outline */
                        font-size: var(--fs-5);
                }

                #chatText:focus {
                        border-color: var(--primary-press);
                        /* Brand color focus indication */
                        box-shadow: 0 0 0 4px rgba(10, 132, 255, .12);
                        /* Accessible focus ring */
                }

                /*
                Typing Indicator Animation
                ==========================
                Visual feedback when AI is processing/responding
                */

                .typing {
                        display: inline-flex;
                        /* Horizontal layout for typing indicator */
                        align-items: center;
                        /* Vertical center alignment */
                        gap: 6px;
                        /* Spacing between text and dots */
                }

                .typing .dots {
                        display: inline-flex;
                        /* Horizontal dot arrangement */
                        gap: 4px;
                        /* Spacing between dots */
                }

                .typing .dots i {
                        width: 6px;
                        /* Small dot size for subtlety */
                        height: 6px;
                        border-radius: 50%;
                        /* Perfect circle */
                        background: var(--muted);
                        /* Muted color for non-intrusive feedback */
                        opacity: .35;
                        /* Base transparency */
                        animation: dotpulse 1s ease-in-out infinite;
                        /* Reuse dotpulse animation for consistency */
                }

                .typing .dots i:nth-child(2) {
                        animation-delay: .2s;
                        /* Staggered timing for wave effect */
                }

                .typing .dots i:nth-child(3) {
                        animation-delay: .4s;
                        /* Further staggered timing */
                }

                /*
                Form Element Normalization
                ==========================
                Consistent typography across all form controls
                */

                input,
                textarea,
                button,
                select {
                        font-family: inherit;
                        /* Use system font stack consistently */
                        font-size: inherit;
                        /* Inherit contextual sizing */
                }

                #comments {
                        font-size: var(--fs-5);
                }

                /*
                Tab Navigation System
                =====================
                Segmented control for switching between Summary and Chat views.
                Features animated pill indicator with smooth transitions.
                */
                .viewtoggle {
                        position: relative;
                        /* Required for absolute positioned pill */
                        display: flex;
                        /* Horizontal tab layout */
                        align-items: center;
                        /* Vertical center alignment */
                        gap: 0;
                        /* No gap - tabs should be adjacent */
                        width: 200px;
                        /* Fixed width for consistent layout */
                        height: 36px;
                        /* Comfortable touch target height */
                        padding: 4px;
                        /* Internal padding for pill positioning */
                        border-radius: 999px;
                        /* Pill-shaped container */
                        background: var(--grey-soft);
                        /* Neutral background */
                        border: 1px solid var(--border);
                        /* Subtle edge definition */
                        font-weight: 600;
                        /* Semi-bold for tab readability */
                        user-select: none;
                        /* Prevent text selection */
                        cursor: pointer;
                        /* Indicate interactivity */
                }

                .viewtoggle .label {
                        flex: 1;
                        /* Equal width tabs */
                        display: flex;
                        /* Center content horizontally and vertically */
                        align-items: center;
                        justify-content: center;
                        font-size: var(--fs-4);
                        /* Scalable tab text size */
                        margin: 0;
                        /* Reset global .label margin */
                        padding: 0;
                        /* Reset global .label padding-left */
                        text-transform: none;
                        /* Override global UPPERCASE */
                        letter-spacing: 0;
                        /* Reset global letter-spacing */
                        line-height: 1;
                        /* Precise vertical centering */
                        color: var(--muted);
                        /* Inactive tab color */
                        position: relative;
                        /* Layer above pill background */
                        z-index: 1;
                        /* Ensure text appears above pill */
                }

                /* Active tab text styling - white over brand blue pill */
                .card:not(.show-chat) .viewtoggle .label:first-child,
                .card.show-chat .viewtoggle .label:nth-child(2) {
                        color: #fff !important;
                        /* High contrast white text over blue */
                }

                /* Content spacing optimization */
                #pane-summary .summary {
                        margin-bottom: 20px;
                        /* Breathing room before Comments section */
                }


                /*
                Animated Pill Indicator
                =======================
                Sliding background indicator for active tab state
                */

                .viewtoggle .pill {
                        position: absolute;
                        /* Float above tab background */
                        top: 4px;
                        /* Align with container padding */
                        left: 4px;
                        /* Align with container padding */
                        height: 28px;
                        /* Fill available height */
                        width: calc(50% - 4px);
                        /* Half width minus padding */
                        border-radius: 999px;
                        /* Match container pill shape */
                        background: var(--primary);
                        /* Brand blue for active indication */
                        box-shadow: 0 6px 18px rgba(0, 122, 255, .25);
                        /* Colored shadow for emphasis and depth */
                        transition: transform .0s;
                        /* Instant positioning (can be customized) */
                        z-index: 0;
                        /* Behind text labels */
                        pointer-events: none;
                        /* Non-interactive decoration */
                }

                /*
                Tab Progress Indicators
                =======================
                Micro-animations for showing processing state in tab headers
                */

                /* Compact progress dots for tab-level loading indication */
                .viewtoggle .mini-dots {
                        display: none;
                        /* Hidden by default */
                        margin-left: 4px;
                        /* Small offset from tab text */
                        gap: 3px;
                        /* Tight spacing for compact display */
                        align-items: center;
                        /* Vertical alignment with text */
                }

                .viewtoggle .mini-dots i {
                        width: 4px;
                        /* Smaller dots for tab context */
                        height: 4px;
                        border-radius: 50%;
                        /* Perfect circle */
                        background: currentColor;
                        /* Inherit text color for consistency */
                        opacity: .35;
                        /* Base transparency */
                        animation: dotpulse 1s ease-in-out infinite;
                        /* Reuse established dotpulse animation */
                }

                .viewtoggle .mini-dots i:nth-child(2) {
                        animation-delay: .2s;
                        /* Staggered timing */
                }

                .viewtoggle .mini-dots i:nth-child(3) {
                        animation-delay: .4s;
                        /* Further staggered timing */
                }

                /* Conditional progress indicator visibility */
                .card.show-chat .viewtoggle.is-summarizing .mini-dots {
                        display: inline-flex;
                        /* Show dots when summarizing in Chat tab */
                }

                /* Tab state animations */
                .card.show-chat .viewtoggle .pill {
                        transform: translateX(100%);
                        /* Slide pill to Chat tab position */
                }

                /* Context-sensitive UI element visibility */
                .card.show-chat #summarizeBtn {
                        display: none;
                        /* Hide Summarize button in Chat mode */
                }

                /*
                Content Pane Management
                =======================
                Single-pane visibility system for tab content switching
                */

                /* Default state - Chat pane hidden */
                #pane-chat {
                        display: none;
                        /* Hidden by default */
                }

                /* Chat mode active - show Chat pane */
                .card.show-chat #pane-chat {
                        display: block;
                        /* Visible when Chat tab active */
                }

                /* Chat mode active - hide Summary pane */
                .card.show-chat #pane-summary {
                        display: none;
                        /* Hidden when Chat tab active */
                }

                /*
                AI Disclaimer System
                ====================
                Required compliance messaging for AI-generated content
                */

                /* Chat mode disclaimer - regulatory compliance messaging */
                .card.show-chat::after {
                        content: "Generative AI can make mistakes. Check important info.";
                        /* Standard AI disclaimer text for regulatory compliance */
                        display: block;
                        /* Block display for proper spacing */
                        margin-top: 7px;
                        /* Separation from chat interface */
                        font-size: var(--fs-3);
                        color: var(--muted);
                        /* Reduced emphasis */
                        text-align: center;
                        /* Center alignment for disclaimer */
                }

                /* Inline disclaimer for Summary mode context */
                .disclaimer-inline {
                        position: absolute;
                        /* Positioned overlay */
                        left: 0;
                        right: 0;
                        /* Full width positioning */
                        text-align: center;
                        /* Center alignment */
                        font-size: var(--fs-1);
                        /* Scalable small disclaimer text */
                        color: var(--muted);
                        /* Reduced emphasis */
                        pointer-events: none;
                        /* Non-interactive overlay */
                }

                /*
                Performance Optimizations
                =========================
                CSS containment for improved rendering performance
                */

                #pane-summary,
                #pane-chat {
                        contain: layout paint;
                        /* CSS containment to isolate layout and paint work */
                        /* Improves performance by limiting reflow scope to pane contents */
                }
        </style>
</head>

<!--
=========================================================================
AML ALERT SUMMARIZER APPLICATION BODY
=========================================================================
-->

<body>
        <!--
        =======================================================================
        MAIN APPLICATION CONTAINER
        =======================================================================
        Responsive wrapper providing consistent layout across desktop workstations
        and mobile devices for field compliance work. Uses CSS Grid for flexible
        content organization and viewport-aware sizing (96vw max 1600px).
        -->
        <div class="container">
                <!--
                PRIMARY INTERFACE CARD
                =====================
                Elevated surface containing all application functionality.
                Uses semantic region role with proper labeling for screen readers.
                Implements SAS design system with rounded corners and layered shadows.
                -->
                <div class="card" role="region" aria-labelledby="title">
                        <!--
                        APPLICATION HEADER SECTION
                        ==========================
                        Contains branding, context information, and primary navigation.
                        Flexbox layout ensures proper spacing between title area and controls
                        across different viewport sizes and zoom levels.
                        -->
                        <div class="header">
                                <!--
                                TITLE AND CONTEXT AREA
                                ======================
                                Application identity and user guidance. Title updates dynamically
                                based on active mode (Summary vs Chat) to provide clear context.
                                Subtitle explains current functionality to reduce cognitive load.
                                -->
                                <div>
                                        <h1 id="title">Alert Summarizer</h1>
                                        <p class="subtitle">Generate a concise summary with one click.</p>
                                </div>

                                <!--
                                PRIMARY NAVIGATION CONTROL
                                ==========================
                                Tab-based interface switcher optimized for analyst workflow efficiency.
                                -->
                                <div class="row">
                                        <!--
                                        SEGMENTED CONTROL: SUMMARY/CHAT MODE TOGGLE
                                        ==========================================
                                        Enterprise-grade tabbed interface providing two distinct workflow modes:

                                        SUMMARY MODE: One-click AI summarization for rapid alert triage
                                        - Optimized for high-volume alert processing
                                        - Provides structured summary with key risk indicators
                                        - Supports multiple AI models for risk-appropriate analysis
                                        - Includes regulatory compliance messaging

                                        CHAT MODE: Interactive investigation for complex cases
                                        - Conversational interface for detailed alert analysis
                                        - Maintains context across multiple questions
                                        - Provides general AML knowledge supplementation
                                        - Restricted to alert-specific data for PII protection

                                        ACCESSIBILITY FEATURES:
                                        - Implements ARIA switch pattern for assistive technology
                                        - aria-checked indicates current state to screen readers
                                        - Visual pill indicator with smooth animation for sighted users
                                        - Keyboard accessible with Enter/Space activation
                                        - Focus visible indicator for navigation clarity

                                        ENTERPRISE UX CONSIDERATIONS:
                                        - Animated progress dots during AI processing (mini-dots)
                                        - State persistence across browser sessions
                                        - Clear visual hierarchy with SAS brand colors
                                        - Touch-friendly sizing for tablet compliance reviews
                                        -->
                                        <div id="viewToggle" class="viewtoggle" role="switch" aria-checked="false">
                                                <span class="label">Summary<span class="mini-dots"
                                                                aria-hidden="true"><i></i><i></i><i></i></span></span>
                                                <span class="label">Chat</span>
                                                <span id="togglePill" class="pill" aria-hidden="true"></span>
                                        </div>
                                </div>
                        </div>

                        <!--
                        =======================================================================
                        SUMMARY PANE: AI-POWERED ALERT ANALYSIS
                        =======================================================================
                        Primary workflow interface for rapid alert triage and risk assessment.
                        Designed for high-volume processing with one-click analysis and structured
                        output formatting. Supports regulatory compliance through audit trails
                        and AI transparency requirements.
                        -->
                        <div id="pane-summary">
                                <!--
                                AI SUMMARY OUTPUT SECTION
                                =========================
                                Real-time streaming display of AI-generated alert analysis.
                                -->
                                <div>
                                        <div class="label">Summary</div>
                                        <!--
                                        AI SUMMARY DISPLAY CONTAINER
                                        ============================
                                        Dynamic content area for AI-generated alert summaries with enterprise features:

                                        CONTENT SECURITY:
                                        - DOMPurify sanitization prevents XSS attacks from AI-generated content
                                        - Restricted HTML tag allowlist (headings, paragraphs, lists only)
                                        - Content Security Policy compliance for enterprise security frameworks

                                        ACCESSIBILITY COMPLIANCE:
                                        - aria-live="polite" announces updates to screen readers without interruption
                                        - role="region" identifies as significant page section
                                        - Semantic HTML structure preserves reading order and navigation

                                        STREAMING UX DESIGN:
                                        - Real-time content updates during AI processing
                                        - Skeleton loading animation reduces perceived wait time
                                        - Progressive disclosure of analysis results
                                        - Error handling with graceful degradation

                                        REGULATORY FEATURES:
                                        - Model cutoff date disclosure for audit compliance
                                        - Automatic timestamping of generated content
                                        - Preservation of analysis history for case documentation
                                        -->
                                        <div id="summary" class="summary" role="region" aria-live="polite">Press
                                                "Summarize" to
                                                generate a concise alert summary.</div>
                                </div>

                                <!--
                                ANALYSIS CONTROL PANEL
                                ======================
                                Configuration and execution controls for AI analysis processing.
                                Right-aligned layout prioritizes primary action (Summarize button).
                                -->
                                <div class="row" style="justify-content:flex-end;margin-top:8px">
                                        <!--
                                        LANGUAGE SELECTION INTERFACE
                                        ============================
                                        Multi-language support for international compliance workflows.
                                        Comprehensive language list with native names for better UX.
                                        -->
                                        <label for="langSelect" class="sr-only">Language</label>
                                        <select id="langSelect" class="select-model" aria-label="Language">
                                                <option value="English" selected>English</option>
                                                <option value="Español">Español</option>
                                                <option value="Français">Français</option>
                                                <option value="Deutsch">Deutsch</option>
                                                <option value="Italiano">Italiano</option>
                                                <option value="Português">Português</option>
                                                <option value="Nederlands">Nederlands</option>
                                                <option value="Svenska">Svenska</option>
                                                <option value="Norsk">Norsk</option>
                                                <option value="Dansk">Dansk</option>
                                                <option value="Suomi">Suomi</option>
                                                <option value="Polski">Polski</option>
                                                <option value="Русский">Русский</option>
                                                <option value="Türkçe">Türkçe</option>
                                                <option value="العربية">العربية</option>
                                                <option value="فارسی">فارسی</option>
                                                <option value="हिन्दी">हिन्दी</option>
                                                <option value="বাংলা">বাংলা</option>
                                                <option value="ไทย">ไทย</option>
                                                <option value="Tiếng Việt">Tiếng Việt</option>
                                                <option value="한국어">한국어</option>
                                                <option value="日本語">日本語</option>
                                                <option value="中文（简体）">中文（简体）</option>
                                                <option value="中文（繁體）">中文（繁體）</option>
                                        </select>

                                        <!--
                                        AI MODEL SELECTION INTERFACE
                                        ============================
                                        Risk-tiered model selection for compliance efficiency:

                                        MODEL TIERS FOR AML WORKFLOW:
                                        - GPT-5 nano: High-speed screening for obvious false positives
                                        - GPT-5 mini: Balanced analysis for standard alert investigation
                                        - GPT-5: Comprehensive analysis for complex suspicious activity
                                        - Gemini 1.5 Flash: Google's fast multimodal model
                                        - Mistral Tiny: Efficient European model option

                                        ENTERPRISE CONSIDERATIONS:
                                        - Cost optimization through appropriate model selection
                                        - Audit trail includes model used for compliance reporting
                                        - Performance scaling based on alert complexity and risk level
                                        - Provider selection handled automatically server-side

                                        ACCESSIBILITY IMPLEMENTATION:
                                        - Hidden label prevents visual redundancy while supporting screen readers
                                        - aria-label provides context for assistive technology users
                                        - Keyboard navigation support with visual focus indicators
                                        -->
                                        <label for="modelSelect" class="sr-only">Model</label>
                                        <select id="modelSelect" class="select-model" aria-label="Model">
                                                <option value="gpt-5-nano">GPT-5 nano</option>
                                                <option value="gpt-5-mini" selected>GPT-5 mini</option>
                                                <option value="gpt-5">GPT-5</option>
                                                <option value="gemini-1.5-flash">Gemini 1.5 Flash</option>
                                                <option value="mistral-tiny">Mistral Tiny</option>
                                        </select>

                                        <!--
                                        PRIMARY ACTION: SUMMARIZE BUTTON
                                        ===============================
                                        One-click alert analysis execution with enterprise UX patterns:

                                        WORKFLOW OPTIMIZATION:
                                        - Single-click activation reduces analyst cognitive load
                                        - Immediate visual feedback through loading animation
                                        - Disabled state prevents duplicate API calls and costs
                                        - Progress indication through rotating status messages

                                        ACCESSIBILITY FEATURES:
                                        - aria-busy attribute indicates processing state to assistive technology
                                        - Semantic button element ensures proper keyboard interaction
                                        - Loading spinner hidden from screen readers (aria-hidden="true")
                                        - Clear focus management during state transitions

                                        ENTERPRISE RELIABILITY:
                                        - Error handling with user-friendly messaging
                                        - Graceful degradation if AI service unavailable
                                        - Rate limiting protection through button state management
                                        - Connection retry logic for network resilience
                                        -->
                                        <button id="summarizeBtn" class="btn-primary" aria-busy="false">
                                                <span class="spinner" aria-hidden="true"></span>
                                                <span class="labeltext">Summarize</span>
                                        </button>
                                </div>

                                <!--
                                ANALYST COMMENT AND ANNOTATION SYSTEM
                                ====================================
                                Local audit trail and case documentation interface for compliance workflows.
                                Provides structured annotation capabilities required by regulatory frameworks.
                                -->
                                <div>
                                        <div class="label">Comments</div>
                                        <!--
                                        ANALYST COMMENT INPUT FIELD
                                        ===========================
                                        Professional annotation interface for case documentation:

                                        COMPLIANCE WORKFLOW FEATURES:
                                        - 2000 character limit balances thoroughness with conciseness
                                        - Auto-resize functionality adapts to content length
                                        - Real-time character counting for length awareness
                                        - Placeholder guidance for consistent documentation quality

                                        AUDIT TRAIL CAPABILITIES:
                                        - Comments saved with timestamp and alert ID correlation
                                        - Local browser storage provides immediate persistence
                                        - Structured JSON format enables future export/integration
                                        - Alert-specific commentary linked to case investigation

                                        ACCESSIBILITY COMPLIANCE:
                                        - Semantic textarea element for proper screen reader interaction
                                        - Auto-resize maintains visual context without scrolling
                                        - Clear labeling and instructions reduce user confusion
                                        - Keyboard-only operation support for accessibility requirements
                                        -->
                                        <textarea id="comments"
                                                placeholder="Add comments on the generated response and the alert in general…"></textarea>

                                        <!--
                                        COMMENT MANAGEMENT CONTROL BAR
                                        =============================
                                        Action controls and regulatory compliance messaging for comment system.
                                        Layout balances functional controls with required AI transparency notices.
                                        -->
                                        <div class="row" style="justify-content:space-between;margin-top:8px">
                                                <!--
                                                CHARACTER COUNT INDICATOR
                                                ========================
                                                Real-time feedback for professional documentation standards.
                                                Helps analysts maintain appropriate comment length for audit clarity.
                                                -->
                                                <span id="charCount" class="caption">0 / 2000</span>

                                                <!--
                                                REGULATORY COMPLIANCE DISCLAIMER
                                                ===============================
                                                Required AI transparency messaging for financial regulatory compliance.
                                                Ensures analysts understand limitations of AI-generated content for
                                                critical compliance decisions. Positioned inline for visibility without
                                                disrupting primary workflow.
                                                -->
                                                <span class="caption disclaimer-inline">Generative AI can make mistakes.
                                                        Check important info.</span>

                                                <!--
                                                COMMENT ACTION CONTROLS
                                                ======================
                                                Comment lifecycle management with immediate user feedback.
                                                -->
                                                <div class="row">
                                                        <!--
                                                        CLEAR COMMENT BUTTON
                                                        ===================
                                                        Quick reset functionality for comment field with immediate feedback.
                                                        Secondary button styling indicates non-destructive utility action.
                                                        -->
                                                        <button id="clearBtn" class="btn-secondary"
                                                                type="button">Clear</button>

                                                        <!--
                                                        SAVE COMMENT BUTTON
                                                        ==================
                                                        Local persistence action for audit trail documentation:

                                                        AUDIT TRAIL FEATURES:
                                                        - Saves to browser localStorage for immediate persistence
                                                        - Includes timestamp, alert ID, and summary correlation
                                                        - JSON structure enables future export to compliance systems
                                                        - Toast notification confirms successful save operation

                                                        ENTERPRISE CONSIDERATIONS:
                                                        - Local storage prevents data loss during session interruptions
                                                        - Per-browser, per-user isolation maintains analyst privacy
                                                        - No server transmission reduces data security concerns
                                                        - Future integration points for enterprise document management
                                                        -->
                                                        <button id="saveBtn" class="btn-secondary" type="button">Save
                                                                Comment</button>
                                                </div>
                                        </div>
                                </div>
                        </div>

                        <!--
                        =======================================================================
                        CHAT PANE: INTERACTIVE ALERT INVESTIGATION
                        =======================================================================
                        Conversational AI interface for deep-dive alert analysis and investigation.
                        Provides contextual Q&A capabilities while maintaining strict data boundaries
                        for PII protection and regulatory compliance.
                        -->
                        <div id="pane-chat">
                                <div>
                                        <div class="label">Chat</div>
                                        <!--
                                        CHAT INTERFACE CONTAINER
                                        =======================
                                        Full-featured messaging interface optimized for compliance workflows.
                                        -->
                                        <div class="chat" id="chat">
                                                <!--
                                                MESSAGE HISTORY DISPLAY
                                                ======================
                                                Scrollable conversation interface with enterprise features:

                                                CONVERSATION MANAGEMENT:
                                                - Responsive height adapts to viewport (55vh) for optimal screen usage
                                                - Automatic scrolling maintains focus on latest messages
                                                - Message bubbles distinguish user questions from AI responses
                                                - Conversation history preserved for context continuity

                                                ACCESSIBILITY IMPLEMENTATION:
                                                - aria-live="polite" announces new messages without interrupting workflow
                                                - role="region" identifies conversation area for screen readers
                                                - Semantic message structure preserves conversation flow
                                                - Keyboard navigation support for message review

                                                COMPLIANCE AND SECURITY:
                                                - All responses restricted to alert-specific data provided by SAS MAS
                                                - PII exposure limited to information already present in alert data
                                                - General AML knowledge supplementation without customer data inference
                                                - Conversation logging for audit trail maintenance

                                                UX OPTIMIZATION FOR ANALYSTS:
                                                - Visual distinction between user and bot messages
                                                - Typing indicators during AI processing
                                                - Error handling with graceful degradation
                                                - Context preservation across multiple questions
                                                -->
                                                <div id="chatMessages" class="chat-messages" role="region"
                                                        aria-live="polite">
                                                </div>

                                                <!--
                                                MESSAGE COMPOSITION INTERFACE
                                                ============================
                                                Professional chat input with send controls optimized for compliance workflows.
                                                -->
                                                <div class="chat-input">
                                                        <!--
                                                        CHAT INPUT FIELD
                                                        ===============
                                                        Question composition interface with contextual guidance:

                                                        WORKFLOW OPTIMIZATION:
                                                        - Placeholder suggests appropriate question types for alert analysis
                                                        - Auto-expanding input accommodates complex questions
                                                        - Enter key submission for rapid interaction
                                                        - Shift+Enter for multi-line questions when needed

                                                        ACCESSIBILITY FEATURES:
                                                        - Semantic input element for proper screen reader support
                                                        - Focus management during conversation flow
                                                        - Clear labeling through placeholder and context
                                                        -->
                                                        <input id="chatText" type="text"
                                                                placeholder="Ask any question about this alert…" />

                                                        <!--
                                                        SEND MESSAGE BUTTON
                                                        ==================
                                                        Message submission control with intelligent state management:

                                                        SMART INTERACTION DESIGN:
                                                        - Disabled when input is empty to prevent accidental submissions
                                                        - Disabled during AI processing to prevent request flooding
                                                        - Primary button styling indicates main action
                                                        - Immediate visual feedback on click

                                                        ENTERPRISE RELIABILITY:
                                                        - Rate limiting through button state management
                                                        - Error handling with user-friendly messaging
                                                        - Connection retry logic for network resilience
                                                        - Graceful degradation when AI service unavailable
                                                        -->
                                                        <button id="chatSendBtn" class="btn-primary" type="button"
                                                                disabled>Send</button>
                                                </div>
                                        </div>
                                </div>
                        </div>

                </div>
        </div>

        <!--
        =======================================================================
        TOAST NOTIFICATION SYSTEM
        =======================================================================
        Enterprise-grade user feedback system providing immediate confirmation
        for all user actions. Essential for professional workflows where action
        confirmation reduces uncertainty and improves user confidence.

        NOTIFICATION FEATURES:
        - Slide-up animation from bottom center for non-intrusive feedback
        - Auto-dismiss after 1.4 seconds for appropriate notification duration
        - High contrast styling ensures visibility across different displays
        - Positioned to avoid interference with primary workflow elements

        ACCESSIBILITY COMPLIANCE:
        - role="status" announces important state changes to screen readers
        - aria-live="polite" provides non-interrupting announcements
        - Sufficient color contrast for users with visual impairments
        - Animation respects user motion preferences when implemented

        ENTERPRISE UX PATTERNS:
        - Consistent feedback for Save, Clear, and other state-changing actions
        - Professional pill-shaped design maintains visual hierarchy
        - Fixed positioning ensures visibility regardless of scroll position
        - Semantic content provides clear action confirmation messaging
        -->
        <div id="toast" class="toast" role="status" aria-live="polite">Saved</div>

        <script>
                // Architecture overview:
                // - Config: constants and tunables (endpoints, models, UI timings)
                // - State: runtime state shared across modules (IDs, caches, promises)
                // - UI: DOM caching + view helpers (no business logic)
                // - Utils: small pure helpers (escapeHtml, autoResize, etc.)
                // - API: network helpers (CSRF priming, MAS calling with postMas helper)
                // - Summary: MAS prefetch (summary/chat) + summary generation via ID
                // - Chat: chat UI with single response rendering
                // - Comments: localStorage persistence for analyst notes
                // - Init: wiring (alert ID resolution, listeners, boot)

                (function () {
                        'use strict';

                        // ==========================================================
                        // CONFIGURATION & GLOBAL STATE
                        // - MODULE_URI/CSRF_PRIMER_URL: SAS MAS endpoints for scoring & CSRF
                        // - ALERT_ID: set by URL (?alertId=) or SAS VA message
                        // - alertIdReady: Promise used to defer actions until ALERT_ID exists
                        // - MODULE_URI_LLM: SAS ID endpoint for LLM processing
                        // ==========================================================

                        /*
                        Application Configuration Namespace
                        ===================================
                        Centralized configuration management for AML alert processing system.
                        Contains API endpoints, model configurations, and user experience parameters
                        for both SAS microanalytic services and OpenAI integration.
                        */
                        const Config = {
                                // SAS Microanalytic Service Integration
                                MODULE_URI: '/microanalyticScore/modules/test_aml_demo_data_retrieval1_0/steps/execute', 
                                // Primary execution endpoint for AML data retrieval microanalytic module

                                MODULE_URI_LLM: '/microanalyticScore/modules/document_aml_demo1_0/steps/execute',
                                // Secondary execution endpoint for LLM processing via SAS Intelligent Decisioning

                                CSRF_PRIMER_URL: '/microanalyticScore/modules',
                                // CSRF token acquisition endpoint - required for secure SAS API communication

                                // OpenAI config no longer used (calls are server-side in MAS)

                                // User Experience Parameters
                                COMMENT_LIMIT: 2000,
                                // Maximum character limit for analyst comments to prevent excessive data submission

                                ROTATE_MS: 4000,
                                // Rotation interval (milliseconds) for loading message carousel during AI processing

                                /*
                                Loading Message Pool - UX Psychology Strategy
                                ============================================
                                Carefully curated message rotation to maintain analyst engagement during
                                potentially long AI processing cycles. Combines professional AML terminology
                                with light humor to reduce perceived wait time and add personality to the
                                enterprise application. Messages rotate every 4 seconds to prevent monotony.
                                */
                                LOADING_MESSAGES: [
                                        // Professional AML Investigation Messages
                                        // These messages reinforce the application's purpose while building confidence
                                        "Investigating suspicious activity",
                                        "Connecting the dots between transactions",
                                        "Cross-referencing KYC data",
                                        "Scanning network relationships",
                                        "Following the money trail",
                                        "Reviewing scenario triggers",
                                        "Generating advanced insights",
                                        "Running enhanced due diligence protocols",
                                        "Finding patterns no human could see",
                                        "Hunting for needle-in-a-haystack transfers",
                                        "Checking for unusual velocity spikes",
                                        "Sifting through transaction histories",
                                        "Raising potential red flags",
                                        "Flagging politically exposed persons",
                                        "Analyzing cash structuring patterns",
                                        "Verifying source of funds",

                                        // Lighthearted Messages for Psychological Relief
                                        // Humor helps reduce stress during intensive compliance work
                                        "Following the breadcrumbs",
                                        "Checking today's horoscope",
                                        "With great power comes great compliance responsibility – Uncle Ben",
                                        "I'm gonna make him an offer he can't explain to compliance – The Godfather",
                                        "May the fraud be with you – Star Wars",
                                        "Looking for the usual suspects",
                                        "Elementary, my dear Watson... the account is offshore – Sherlock Holmes",
                                        "The name's Bond... Transaction Bond – James Bond",
                                        "Houston, we have a suspicious transfer – Apollo 13",
                                        "Winter is coming... for fraudsters – Game of Thrones",
                                        "Binge-watching transaction histories",
                                        "Taking a siesta"
                                ]
                        };

                        /*
                        Content Security Configuration
                        ==============================
                        DOMPurify sanitization rules for SAS ID LLM responses to prevent XSS attacks
                        while preserving essential formatting for readability in AML analysis reports.
                        */
                        const SANITIZE_CFG = {
                                ALLOWED_TAGS: ['article','h1','h2','h3','p','ul','ol','li','strong','em','blockquote','b','i'],
                                // Whitelist of safe HTML tags for AI-generated content formatting
                                // Limited to basic text formatting and structure elements

                                ALLOWED_ATTR: ['class'],
                                // Only allow class attributes for CSS styling (e.g., .cutoff truncation)
                                // Prevents dangerous attributes like onclick, onload, href, src

                                FORBID_TAGS: ['style', 'script', 'img', 'video', 'audio', 'iframe', 'object', 'embed', 'link', 'meta']
                                // Explicitly blocked tags that could introduce security vulnerabilities
                                // DOMPurify already strips event handlers like onclick by default
                        };

                        /*
                        Defensive Content Sanitization Function
                        =======================================
                        Multi-layered security approach for processing OpenAI responses:
                        1. Primary: DOMPurify with strict whitelist (preferred)
                        2. Fallback: HTML entity escaping for plain text safety
                        Essential for enterprise environments handling sensitive financial data.
                        */
                        const sanitize = (html) => {
                                if (window.DOMPurify && typeof window.DOMPurify.sanitize === 'function') {
                                        return window.DOMPurify.sanitize(html, SANITIZE_CFG);
                                        // Use DOMPurify with enterprise security configuration when available
                                }
                                console.warn('[sanitizer] DOMPurify missing — falling back to escapeHtml');
                                return Utils.escapeHtml(html);
                                // Graceful degradation to basic HTML escaping if DOMPurify fails to load
                        };


                        /*
                        Application State Management Namespace
                        =====================================
                        Centralized state container for AML alert processing workflow.
                        Manages alert identification, caching strategies, API communication state,
                        and asynchronous operation coordination between SAS VA and OpenAI services.
                        */
                        const State = {
                                // Alert Identification & Lifecycle Management
                                ALERT_ID: null,
                                // Primary alert identifier received from SAS Visual Analytics via postMessage
                                // Null until VA iframe communicates the target alert for analysis

                                ALERT_ID_SOURCE: 'unset',
                                // Diagnostic tracking for alert ID source (VA message, URL param, manual)
                                // Enables troubleshooting of integration issues in production

                                resolveAlertIdReady: null,
                                // Promise resolver function to signal when ALERT_ID becomes available
                                // Enables coordinated initialization across dependent components

                                alertIdReady: null,
                                // Promise that resolves when ALERT_ID is established
                                // All API operations await this promise to prevent premature execution

                                // Conversational Context Management
                                chatHistory: [],
                                // Rolling window of recent chat exchanges for context preservation
                                // Maintains conversation continuity while managing memory constraints

                                // Performance Optimization Caches
                                summaryCache: null,
                                // Cached summary results to prevent redundant OpenAI API calls
                                // Improves response time for repeated summary requests

                                chatCache: null,
                                // Cached chat context for session persistence
                                // Reduces API overhead and maintains conversation state

                                // SAS Microanalytic Service Connection State
                                summaryMasPromise: null,
                                // Active promise for summary microanalytic service calls
                                // Prevents duplicate requests and enables proper error handling

                                chatMasPromise: null,
                                // Active promise for chat microanalytic service calls
                                // Manages concurrent chat request lifecycle

                                // UI State Management
                                chatBusy: false,
                                // Flag indicating active OpenAI streaming request in progress
                                // Controls UI responsiveness and prevents concurrent chat submissions

                                // Security & Authentication
                                csrfToken: null
                                // CSRF protection token for SAS API communication
                                // Essential for secure enterprise API integration

                        };

                        /*
                        Alert ID Availability Promise Initialization
                        ===========================================
                        Creates a promise-based coordination mechanism for alert ID readiness.
                        Components can await State.alertIdReady to ensure alert context is
                        established before performing operations that depend on alert data.
                        */
                        State.alertIdReady = new Promise(r => (State.resolveAlertIdReady = r));

                        /*
                        User Interface Management Namespace
                        ===================================
                        Centralized DOM manipulation and UI state management for AML alert interface.
                        Implements performance-optimized element caching, accessibility compliance,
                        and responsive user feedback during AI processing operations.
                        */
                        const UI = {
                                elements: {}, // DOM element cache for performance optimization

                                /*
                                UI Initialization & DOM Element Caching
                                =======================================
                                Performance optimization strategy: cache all frequently accessed DOM elements
                                during initialization to avoid repeated getElementById() calls during runtime.
                                Critical for responsive UI during intensive AI processing operations.
                                */
                                init() {
                                        this.elements = {
                                                // Primary Action Elements
                                                summarizeBtn: document.getElementById('summarizeBtn'),
                                                // Main CTA button for triggering AI summary generation

                                                // Control Elements
                                                langSelect: document.getElementById('langSelect'),
                                                // Language selection dropdown

                                                // Content Display Areas
                                                summaryEl: document.getElementById('summary'),
                                                // Container for AI-generated alert summaries with loading states

                                                // User Input Elements
                                                commentsEl: document.getElementById('comments'),
                                                // Analyst comment textarea with character limit validation

                                                charCountEl: document.getElementById('charCount'),
                                                // Real-time character counter for comment length feedback

                                                // Secondary Actions
                                                saveBtn: document.getElementById('saveBtn'),
                                                clearBtn: document.getElementById('clearBtn'),
                                                // Data persistence and reset functionality

                                                // User Feedback Elements
                                                toast: document.getElementById('toast'),
                                                // Temporary notification system for user feedback

                                                // AI Model Configuration
                                                modelSelect: document.getElementById('modelSelect'),
                                                // Dropdown for OpenAI model selection

                                                // Chat Interface Elements
                                                chatMessages: document.getElementById('chatMessages'),
                                                // Scrollable container for chat conversation history

                                                chatText: document.getElementById('chatText'),
                                                // Chat input field with streaming response integration

                                                chatSendBtn: document.getElementById('chatSendBtn'),
                                                // Chat submission button with busy state management

                                                // Layout & Navigation Elements
                                                cardEl: document.querySelector('.card'),
                                                // Main card container for view state management

                                                titleEl: document.getElementById('title'),
                                                subtitleEl: document.querySelector('.subtitle'),
                                                // Dynamic heading elements that change with view mode

                                                toggleEl: document.getElementById('viewToggle')
                                                // ARIA-compliant toggle switch for Summary/Chat mode
                                        };

                                        // Security measure: disable summarization until alert context is established
                                        // Prevents premature API calls that could fail or process wrong data
                                        this.elements.summarizeBtn.disabled = true;

                                        // Restore saved user preferences from localStorage
                                        const savedLang = localStorage.getItem('aml_lang');
                                        if (savedLang) this.elements.langSelect.value = savedLang;
                                        const savedModel = localStorage.getItem('aml_model');
                                        if (savedModel) this.elements.modelSelect.value = savedModel;
                                },

                                /*
                                Toast Notification System
                                =========================
                                Lightweight, accessible user feedback mechanism for operation status.
                                Auto-dismisses after 1.4 seconds to avoid UI clutter while ensuring
                                message visibility for screen readers and users with disabilities.
                                */
                                showToast(msg) {
                                        this.elements.toast.textContent = msg;
                                        this.elements.toast.classList.add('show');
                                        // 1400ms timing balances readability with non-intrusiveness
                                        setTimeout(() => this.elements.toast.classList.remove('show'), 1400);
                                },

                                /*
                                AI Processing Loading State Renderer
                                ====================================
                                Creates engaging loading experience during AI operations with:
                                1. Animated status message with rotating dots for activity indication
                                2. Skeleton placeholder lines to maintain layout stability
                                3. Variable line widths (88%, 96%, 72%) simulate realistic content
                                Reduces perceived wait time and maintains professional appearance.
                                */
                                renderWorking(message) {
                                        this.elements.summaryEl.innerHTML = `<div class="working">${message}<span class="dots"><i></i><i></i><i></i></span></div>
      <div class="skel"><div class="line" style="width:88%"></div><div class="line" style="width:96%"></div><div class="line" style="width:72%"></div></div>`;
                                },

                                /*
                                Dual-Mode View State Management
                                ===============================
                                Toggles between Summary and Chat modes with comprehensive UI updates:
                                - CSS class management for layout transitions
                                - Dynamic content updates for headings and descriptions
                                - ARIA accessibility compliance for screen readers
                                - Semantic state management for assistive technologies
                                */
                                setView(showChat) {
                                        // Apply CSS class for layout mode switching
                                        this.elements.cardEl.classList.toggle('show-chat', showChat);

                                        // Update semantic content for current mode
                                        this.elements.titleEl.textContent = showChat ? 'Alert Chat' : 'Alert Summarizer';
                                        this.elements.subtitleEl.textContent = showChat
                                                ? 'Converse with our chatbot for alert insights.'
                                                : 'Generate a concise summary with one click.';

                                        // Maintain ARIA compliance for accessibility
                                        this.elements.toggleEl.setAttribute('aria-checked', showChat ? 'true' : 'false');
                                }
                        };

                        /*
                        Utility Functions Namespace
                        ===========================
                        Core helper functions for DOM manipulation, data processing, and security.
                        Provides essential functionality for UI responsiveness, data normalization,
                        and content sanitization across the AML alert processing workflow.
                        */
                        const Utils = {
                                /*
                                Frame-Perfect UI Update Coordination
                                ===================================
                                Returns a promise that resolves on the next animation frame.
                                Essential for ensuring DOM updates are properly painted before
                                subsequent operations, preventing visual lag during intensive processing.
                                */
                                nextFrame: () => new Promise(requestAnimationFrame),

                                /*
                                Enterprise HTML Security Sanitization
                                ====================================
                                Escapes dangerous HTML characters to prevent XSS attacks in user-generated content.
                                Critical security layer for analyst comments and any dynamic content display.
                                Complements DOMPurify as a lightweight fallback for basic text sanitization.
                                */
                                escapeHtml(s) {
                                        return s.replace(/[&<>"']/g, m => ({
                                                "&": "&amp;",    // Ampersand - must be first to avoid double-escaping
                                                "<": "&lt;",     // Less-than - prevents tag injection
                                                ">": "&gt;",     // Greater-than - closes tag prevention
                                                "\"": "&quot;",  // Double quote - attribute injection prevention
                                                "'": "&#39;"     // Single quote - additional attribute protection
                                        }[m]));
                                },

                                /*
                                Dynamic AI Provider Mapping
                                ===========================
                                Maps model names to their corresponding AI providers for API calls.
                                Supports OpenAI, Google, and Mistral models with fallback to OpenAI.
                                */
                                getProviderForModel(modelName) {
                                        if (!modelName) return 'openai'; // Default fallback
                                        if (modelName.startsWith('gpt-')) return 'openai';
                                        if (modelName.startsWith('gemini-')) return 'google';
                                        if (modelName.startsWith('mistral-')) return 'mistral';
                                        return 'openai'; // Fallback for unknown models
                                },

                                /*
                                SAS Microanalytic Service Response Normalizer
                                =============================================
                                Converts MAS outputs array format [{name, value}, ...] into a convenient
                                key-value object for easier property access. Essential for processing
                                systemPrompt, API keys, and configuration data from SAS services.
                                */
                                outputsToMap(outputs) {
                                        const m = {};
                                        (outputs || []).forEach(o => m[o.name] = o.value);
                                        return m;
                                },

                                /*
                                Content Length Management for API Limits
                                ========================================
                                Truncates long text content to prevent API payload size issues while
                                preserving readability. Default 8000 character limit accommodates most
                                OpenAI model constraints while providing clear truncation indication.
                                */
                                trimChars(s, max = 8000) {
                                        if (!s) return '';
                                        return s.length <= max ? s : (s.slice(0, max) + '\n[...trimmed]');
                                },

                                /*
                                Dynamic Textarea Auto-Resize for Analyst Comments
                                =================================================
                                Automatically adjusts textarea height to match content, improving UX
                                for analysts entering variable-length comments. Prevents scrolling
                                within the textarea while maintaining clean, responsive layout.
                                */
                                autoResize(el) {
                                        el.style.height = 'auto';              // Reset to natural height
                                        el.style.height = el.scrollHeight + 'px'; // Set to content height
                                }
                        };

                        /*
                        API Communication Namespace
                        ===========================
                        Manages all external API communications for the AML alert processing system.
                        Handles CSRF security, OpenAI integration with streaming support, and robust
                        error handling for enterprise-grade reliability in financial compliance environments.
                        */
                        const API = {
                                /*
                                CSRF Token Management for SAS Security
                                ======================================
                                Implements enterprise security by fetching and caching CSRF tokens
                                required for all SAS Microanalytic Service communications. Prevents
                                cross-site request forgery attacks in sensitive financial data environments.
                                */
                                async getCsrfToken() {
                                        if (State.csrfToken !== null) return State.csrfToken; // Return cached token ('' if none available)

                                        const res = await fetch(Config.CSRF_PRIMER_URL, {
                                                method: 'GET',
                                                credentials: 'include' // Essential for session-based authentication
                                        });

                                        // Multi-case header checking for robust token extraction
                                        State.csrfToken =
                                                res.headers.get('X-CSRF-TOKEN') ||     // Standard case
                                                res.headers.get('x-csrf-token') ||     // Lowercase variant
                                                '';                                     // Empty string if no token available

                                        return State.csrfToken;
                                },

                                /*
                                Generic MAS Module Caller
                                ========================
                                Unified helper for calling any SAS Microanalytic Service module endpoint.
                                Handles CSRF security, input/output formatting, and error handling for
                                enterprise-grade reliability in financial compliance environments.
                                */
                                async postMas(moduleUri, inputObj) {
                                        const csrf = await this.getCsrfToken();
                                        const res = await fetch(moduleUri, {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrf },
                                                credentials: 'include',
                                                body: JSON.stringify({
                                                        inputs: Object.entries(inputObj).map(([name, value]) => ({ name, value }))
                                                })
                                        });
                                        const json = await res.json().catch(() => ({}));
                                        if (!res.ok) throw new Error(`${res.status} ${res.statusText}\n${JSON.stringify(json).slice(0, 500)}`);
                                        const out = (json.outputs || []).reduce((m, { name, value }) => (m[name] = value, m), {});
                                        return (
                                                out.llm_response || out.response || out.answer || out.summary ||
                                                (json.outputs && json.outputs[0]?.value) || ''
                                        );
                                },

                                /* OpenAI functions removed - all LLM calls now go through MAS #2 */
                        };

                        /*
                        AML Alert Summary Processing Namespace
                        =====================================
                        Orchestrates the complete AML alert summarization workflow including SAS data
                        prefetching, OpenAI integration, and progressive UI rendering. Implements
                        enterprise-grade caching strategies and robust error handling for financial
                        compliance environments requiring high reliability and performance.
                        */
                        const Summary = {
                                /*
                                SAS Microanalytic Service Data Prefetching Strategy
                                ==================================================
                                Proactively fetches alert-specific prompts, API keys, and configuration
                                data from SAS MAS before OpenAI calls. Implements promise-based caching
                                to prevent duplicate network requests and ensure data consistency across
                                multiple summary operations for the same alert.
                                */

                                /*
                                Summary-Specific MAS Data Prefetch
                                =================================
                                Retrieves alert context, system prompts, and OpenAI API credentials
                                specifically configured for summary generation. Includes data cutoff
                                information for compliance audit trails and temporal data boundaries.
                                */
                                async prefetchSummary() {
                                        await State.alertIdReady; // Ensure alert context is established before MAS call

                                        const csrf = await API.getCsrfToken(); // Security: CSRF protection for enterprise environment
                                        const payload = {
                                                inputs: [
                                                        { name: "ALERT_ID_", value: State.ALERT_ID },      // Target alert identifier
                                                        { name: "SUMMARY_OR_CHAT_", value: "summary" }     // Operation type for MAS routing
                                                ]
                                        };

                                        const res = await fetch(Config.MODULE_URI, {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrf },
                                                credentials: 'include', // Include session cookies for authentication
                                                body: JSON.stringify(payload)
                                        });

                                        const json = await res.json().catch(() => ({}));

                                        if (!res.ok) {
                                                // Enterprise error handling: surface detailed server error information
                                                throw new Error(`${res.status} ${res.statusText}\n${JSON.stringify(json).slice(0, 500)}`);
                                        }

                                        // Transform MAS outputs array into accessible object structure
                                        const out = Utils.outputsToMap(json.outputs || []);
                                        State.summaryCache = {
                                                systemPrompt: out['systemPrompt'], // AI prompt with AML context and instructions
                                                cutoff: out['CUTOFF_DATE']         // Data boundary for compliance reporting
                                        };

                                        return State.summaryCache;
                                },

                                /*
                                Chat-Specific MAS Data Prefetch
                                ==============================
                                Fetches conversational context and API credentials optimized for
                                interactive chat sessions. Retrieves different prompt formatting
                                and context data compared to summary operations for enhanced
                                conversational experience in AML investigations.
                                */
                                async prefetchChat() {
                                        await State.alertIdReady; // Coordinate with alert context availability

                                        const csrf = await API.getCsrfToken(); // Maintain CSRF security for all MAS communications
                                        const payload = {
                                                inputs: [
                                                        { name: "ALERT_ID_", value: State.ALERT_ID },  // Same alert, different operation type
                                                        { name: "SUMMARY_OR_CHAT_", value: "chat" }    // Chat-specific MAS configuration
                                                ]
                                        };

                                        const res = await fetch(Config.MODULE_URI, {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrf },
                                                credentials: 'include',
                                                body: JSON.stringify(payload)
                                        });
                                        const json = await res.json().catch(() => ({}));

                                        if (!res.ok) {
                                                throw new Error(`${res.status} ${res.statusText}\n${JSON.stringify(json).slice(0, 500)}`);
                                        }

                                        const out = Utils.outputsToMap(json.outputs || []);
                                        State.chatCache = {
                                                dataString: out['systemPrompt'] || '' // Chat-optimized prompt and context data
                                        };

                                        return State.chatCache;
                                },

                                /*
                                Intelligent Prefetch Orchestration
                                ==================================
                                Implements idempotent prefetch strategy with promise-based deduplication.
                                Ensures data is available when needed without duplicate network calls.
                                Sequential dependency: summary data fetched first, then chat data,
                                optimizing for most common usage patterns (summary before chat).
                                */
                                startPrefetch() {
                                        // Summary prefetch with error recovery and promise caching
                                        if (!State.summaryMasPromise)
                                                State.summaryMasPromise = this.prefetchSummary().catch(e => {
                                                        console.error('[prefetch summary]', e);
                                                        State.summaryMasPromise = null; // Clear failed promise to allow retry
                                                        throw e;
                                                });

                                        // Chat prefetch depends on summary completion for optimal sequencing
                                        if (!State.chatMasPromise)
                                                State.chatMasPromise = (State.summaryMasPromise || this.prefetchSummary())
                                                        .then(() => this.prefetchChat())
                                                        .catch(e => {
                                                                console.error('[prefetch chat]', e);
                                                                State.chatMasPromise = null; // Enable retry on failure
                                                                throw e;
                                                        });
                                },

                                /*
                                Complete AML Alert Summarization Workflow
                                ========================================
                                Orchestrates the full summarization process with enterprise UX:
                                1. Alert context validation and waiting
                                2. Engaging loading states with rotating messages
                                3. Streaming OpenAI response with progressive rendering
                                4. Compliance data cutoff integration
                                5. Comprehensive error handling and accessibility support
                                */
                                async summarize() {
                                        // Step 1: Ensure alert context is available before proceeding
                                        if (!State.ALERT_ID) {
                                                UI.renderWorking('Waiting for Alert ID from Visual Analytics');
                                                await State.alertIdReady;
                                        }
                                        console.log(`[id] summarize() with ALERT_ID=${State.ALERT_ID} (source=${State.ALERT_ID_SOURCE})`);

                                        // Step 2: Configure UI for processing state with accessibility support
                                        UI.elements.summarizeBtn.disabled = true;
                                        UI.elements.summarizeBtn.classList.add('loading');
                                        UI.elements.summarizeBtn.setAttribute('aria-busy', 'true'); // Screen reader support

                                        let started = false; // Flag to stop loading messages when streaming begins

                                        // Step 3: Initialize engaging loading experience with message rotation
                                        const shuffledMessages = [...Config.LOADING_MESSAGES].sort(() => Math.random() - 0.5);
                                        let msgIndex = 0;

                                        UI.renderWorking(shuffledMessages[msgIndex]);
                                        await Utils.nextFrame(); // Ensure initial render completes

                                        // Rotate loading messages every 4 seconds to maintain engagement
                                        const timer = setInterval(() => {
                                                if (started) return; // Stop rotation when streaming begins
                                                msgIndex = (msgIndex + 1) % shuffledMessages.length;
                                                UI.renderWorking(shuffledMessages[msgIndex]);
                                        }, Config.ROTATE_MS);

                                        // Step 4: Visual indicator for summarization process across interface modes
                                        UI.elements.toggleEl.classList.add('is-summarizing');
                                        UI.elements.toggleEl.setAttribute('aria-busy', 'true'); // Accessibility compliance

                                        let rafId = null;

                                        try {
                                                // Call MAS #2 LLM endpoint server-side
                                                const chosenModel = UI.elements.modelSelect.value || 'gpt-5-mini';
                                                const s = State.summaryCache || await (State.summaryMasPromise || (this.startPrefetch(), State.summaryMasPromise));
                                                if (!s?.systemPrompt) throw new Error('Summary data not ready from MAS');

                                                // Single MAS #2 call - no streaming
                                                const finalText = await API.postMas(Config.MODULE_URI_LLM, {
                                                        documents_content_: s.systemPrompt,
                                                        language_: UI.elements.langSelect.value || 'English',
                                                        language_model_name_: chosenModel,
                                                        language_model_provider_: Utils.getProviderForModel(chosenModel),
                                                        mode_: 'summary',
                                                        number_documents_: 'single',
                                                        user_question_: 'Summarize the document.'
                                                });

                                                // Stop loading animations once response received
                                                if (!started) {
                                                        started = true;
                                                        clearInterval(timer);
                                                }

                                                // Final synchronous write (includes cutoff if present)
                                                const cutoffHtml = s.cutoff ? `<p class="cutoff">${Utils.escapeHtml(s.cutoff)}</p>` : '';
                                                const finalSafe = sanitize(finalText + cutoffHtml);
                                                UI.elements.summaryEl.innerHTML = finalSafe;

                                        } catch (e) {
                                                UI.elements.summaryEl.textContent = `Error:\n${e.message}`;
                                                console.error(e);
                                        } finally {
                                                clearInterval(timer);
                                                UI.elements.summarizeBtn.disabled = false;
                                                UI.elements.summarizeBtn.classList.remove('loading');
                                                UI.elements.summarizeBtn.setAttribute('aria-busy', 'false');
                                                UI.elements.toggleEl.classList.remove('is-summarizing');
                                                UI.elements.toggleEl.removeAttribute('aria-busy');
                                                if (rafId) { cancelAnimationFrame(rafId); rafId = null; }
                                        }
                                }
                        };

                        /*
                        AML Chat Interface Namespace
                        ============================
                        Manages intelligent conversational interactions between AML analysts and AI assistant.
                        Implements secure prompt engineering, streaming conversation flow, and context
                        management optimized for financial compliance investigations and alert analysis.
                        */
                        const Chat = {
                                /* Prompt building now handled server-side in MAS #2 */

                                /*
                                Orchestrated Chat Query Processing
                                =================================
                                Coordinates alert context verification, MAS data retrieval, prompt assembly,
                                and OpenAI API communication for secure, compliant chat interactions.
                                Implements fallback strategies for API key resolution and error handling.
                                */
                                async chatQuery(userText) {
                                        // Step 1: Ensure alert context is established before chat operations
                                        if (!State.ALERT_ID) {
                                                this.addMessage('bot', '<em>Waiting for Alert ID from Visual Analytics…</em>');
                                                await State.alertIdReady;
                                        }

                                        // Step 2: Retrieve chat-specific data from MAS
                                        const cc = State.chatCache || await (State.chatMasPromise || (Summary.startPrefetch(), State.chatMasPromise));
                                        const model = UI.elements.modelSelect.value || 'gpt-5-mini';

                                        // Step 3: Call MAS #2 LLM endpoint with documents and user question
                                        const docs = cc.dataString || (State.summaryCache?.systemPrompt ?? '');
                                        if (!docs) throw new Error('No documents content available for MAS LLM.');
                                        const reply = await API.postMas(Config.MODULE_URI_LLM, {
                                                documents_content_: docs,
                                                language_: UI.elements.langSelect.value || 'English',
                                                language_model_name_: model,
                                                language_model_provider_: Utils.getProviderForModel(model),
                                                mode_: 'chat',
                                                number_documents_: 'single',
                                                user_question_: userText
                                        });
                                        return reply.trim();
                                },

                                /*
                                Chat Interface User Experience Management
                                ========================================
                                Handles all aspects of the conversational UI including message rendering,
                                typing indicators, input validation, and progressive streaming visualization.
                                Optimized for AML analyst workflows with responsive feedback and accessibility.
                                */

                                /*
                                Dynamic Send Button State Management
                                ===================================
                                Intelligently enables/disables chat send functionality based on input content
                                and processing state. Prevents empty messages and concurrent submissions while
                                maintaining clear visual feedback for user interaction readiness.
                                */
                                refreshSend() {
                                        const empty = UI.elements.chatText.value.trim().length === 0;
                                        UI.elements.chatSendBtn.disabled = State.chatBusy || empty; // Leverage existing CSS styling for disabled state
                                },

                                /*
                                Message Bubble Rendering System
                                ==============================
                                Creates accessible chat message bubbles with role-based styling.
                                Supports HTML content (pre-sanitized by caller) and maintains
                                consistent visual hierarchy for analyst-bot conversations.
                                */
                                addMessage(role, html) {
                                        const wrap = document.createElement('div');
                                        wrap.className = 'msg ' + role; // Apply role-specific CSS styling (user/bot)
                                        const bubble = document.createElement('div');
                                        bubble.className = 'bubble';
                                        bubble.innerHTML = html; // Content assumed pre-sanitized by caller
                                        wrap.appendChild(bubble);
                                        UI.elements.chatMessages.appendChild(wrap);
                                        // Auto-scroll to latest message for conversation flow
                                        UI.elements.chatMessages.scrollTop = UI.elements.chatMessages.scrollHeight;
                                },

                                /*
                                AI Processing Indicator with Animation
                                =====================================
                                Displays engaging "thinking" animation during AI response generation.
                                Provides immediate feedback to analysts while maintaining professional
                                appearance. Returns control object for programmatic removal when streaming begins.
                                */
                                showBotThinking() {
                                        const wrap = document.createElement('div');
                                        wrap.className = 'msg bot';
                                        const bubble = document.createElement('div');
                                        bubble.className = 'bubble';
                                        bubble.innerHTML = `<span class="typing">Thinking<span class="dots"><i></i><i></i><i></i></span></span>`;
                                        wrap.appendChild(bubble);
                                        UI.elements.chatMessages.appendChild(wrap);
                                        UI.elements.chatMessages.scrollTop = UI.elements.chatMessages.scrollHeight;
                                        return { bubble, stop: () => { wrap.remove(); } }; // Control interface for cleanup
                                },

                                /*
                                Complete Chat Message Processing Workflow
                                ========================================
                                Orchestrates the full chat interaction lifecycle from user input to AI response:
                                1. Input validation and message history management
                                2. UI state management and typing indicators
                                3. Streaming response handling with progressive rendering
                                4. Error recovery and conversation state maintenance
                                5. Accessibility focus management and cleanup
                                */
                                async handleSend() {
                                        const text = UI.elements.chatText.value.trim();
                                        if (!text) return; // Prevent empty message submission

                                        // Step 1: Add user message and update conversation state
                                        this.addMessage('user', Utils.escapeHtml(text));
                                        State.chatHistory.push({ role: 'user', content: text });
                                        UI.elements.chatText.value = '';
                                        State.chatBusy = true;
                                        this.refreshSend();

                                        // Step 2: Initialize thinking indicator and ensure render completion
                                        const thinking = this.showBotThinking();
                                        await Utils.nextFrame(); // Guarantee thinking animation is painted

                                        // Step 3: Single response handling (no streaming)
                                        const messagesEl = UI.elements.chatMessages;    // Cache DOM references for performance
                                        const bubbleEl = thinking.bubble;
                                        let stopped = false;        // Tracks if response received

                                        try {
                                                // Execute chat query and get complete response
                                                const final = await this.chatQuery(text);

                                                // Render final response
                                                const finalHtml = Utils.escapeHtml(final).replace(/\n/g, '<br>');
                                                bubbleEl.innerHTML = finalHtml;
                                                messagesEl.scrollTop = messagesEl.scrollHeight;
                                                stopped = true;

                                                // Step 4: Update conversation history with response and manage window size
                                                State.chatHistory.push({ role: 'assistant', content: final });
                                                // Maintain conversation window: keep only latest 3 exchanges (6 messages total)
                                                if (State.chatHistory.length > 6) {
                                                        State.chatHistory.splice(0, State.chatHistory.length - 6);
                                                }
                                        } catch (e) {
                                                // Enterprise error handling with user-friendly messaging
                                                bubbleEl.innerHTML = `<em>Sorry, I couldn't complete that: ${Utils.escapeHtml(e.message)}</em>`;
                                                console.error('[chat] error:', e);
                                                // Rollback conversation state if request failed before processing
                                                if (State.chatHistory.length && State.chatHistory[State.chatHistory.length - 1].role === 'user') {
                                                        State.chatHistory.pop();
                                                }
                                        } finally {
                                                // Cleanup and state restoration
                                                if (!stopped && thinking.stop) thinking.stop(); // Remove thinking indicator if no content received
                                                State.chatBusy = false;
                                                this.refreshSend(); // Re-enable send button
                                                UI.elements.chatText.focus(); // Return focus for continued interaction
                                        }
                                }

                        };

                        /*
                        Analyst Comments Management Namespace
                        ====================================
                        Handles local persistence and management of analyst comments associated with
                        AML alert summaries. Provides browser-based storage for analyst notes and
                        observations, enabling workflow continuity and case documentation.
                        */
                        const Comments = {
                                /*
                                Local Storage Comment Persistence
                                =================================
                                Saves analyst comments with metadata to browser localStorage for session
                                persistence. Creates timestamped entries linking comments to specific alerts
                                and AI-generated summaries for audit trail and case management purposes.
                                Note: Data remains local to analyst's browser and is not server-persisted.
                                */
                                saveComment() {
                                        const key = 'aml-summary-comments'; // Fixed storage key for comment retrieval
                                        const existing = JSON.parse(localStorage.getItem(key) || '[]');

                                        // Create comprehensive comment entry with context metadata
                                        const entry = {
                                                ts: new Date().toISOString(),              // ISO timestamp for chronological sorting
                                                alertId: State.ALERT_ID,                   // Alert context for case linking
                                                comment: UI.elements.commentsEl.value.trim(), // Analyst's written observations
                                                summary: UI.elements.summaryEl.textContent.trim() // Associated AI summary for reference
                                        };

                                        // Validation: prevent saving empty comments
                                        if (!entry.comment) {
                                                UI.showToast('Nothing to save');
                                                return;
                                        }

                                        // Append to existing comment history and persist
                                        existing.push(entry);
                                        localStorage.setItem(key, JSON.stringify(existing));
                                        UI.showToast('Comment saved locally');
                                },

                                /*
                                Comment Field Reset Functionality
                                =================================
                                Clears the comment textarea and triggers input events to update
                                character counter and UI state. Provides clean slate for new
                                analyst observations while maintaining proper event propagation.
                                */
                                clearComment() {
                                        UI.elements.commentsEl.value = '';                                   // Clear textarea content
                                        UI.elements.commentsEl.dispatchEvent(new Event('input'));           // Trigger character count update
                                        UI.showToast('Cleared');                                             // User feedback confirmation
                                }
                        };

                        /*
                        Application Initialization Namespace
                        ====================================
                        Orchestrates application startup, alert context resolution, and integration
                        with SAS Visual Analytics. Implements dual-source alert ID resolution strategy
                        with URL fallback for development and VA messaging for production deployment.
                        */
                        const Init = {
                                /*
                                Alert Context Resolution Strategy
                                ================================
                                Implements robust alert ID discovery from multiple sources with precedence:
                                1. URL parameters (?alertId=...) - for development and direct linking
                                2. SAS Visual Analytics messaging - for embedded production deployment
                                Enables application to function in both standalone and integrated modes.
                                */
                                checkAlertId() {
                                        console.log('[id] init: waiting for alert id (from VA or URL)');
                                        /*
                                        URL Parameter Alert ID Resolution
                                        =================================
                                        Checks for alertId in URL query parameters as immediate fallback.
                                        Enables development testing and direct alert linking without VA integration.
                                        Provides instant application readiness when alert context is explicit.
                                        */
                                        const urlAlertId = new URLSearchParams(location.search).get('alertId');
                                        if (urlAlertId) {
                                                State.ALERT_ID = urlAlertId;
                                                State.ALERT_ID_SOURCE = 'url';                                    // Track source for diagnostics
                                                console.log('[id] Using URL parameter ?alertId=', State.ALERT_ID);
                                                State.resolveAlertIdReady?.(State.ALERT_ID);                      // Signal readiness to waiting components
                                                UI.elements.summarizeBtn.disabled = false;                        // Enable primary action
                                                Summary.startPrefetch();                                          // Begin data preparation
                                                console.log('[id] summarizeBtn enabled (source=url)');
                                        }

                                        /*
                                        SAS Visual Analytics Integration
                                        ================================
                                        Primary production path: receives alert context from VA iframe messaging.
                                        Handles dynamic alert selection and real-time context updates as analysts
                                        navigate between alerts within the VA environment. Implements parameter
                                        preference hierarchy for reliable alert identification.
                                        */
                                        va.messagingUtil.setOnDataReceivedCallback(function (vaMsgObj) {
                                                console.log('[id] VA message received:', vaMsgObj);

                                                // Extract alert identifier from VA parameter system
                                                const paramVal = vaMsgObj?.parameters?.[0]?.value;
                                                console.log('[id] candidates -> paramVal:', paramVal);

                                                // Only update if VA provides valid alert context
                                                if (paramVal != null) {
                                                        State.ALERT_ID = String(paramVal);
                                                        State.ALERT_ID_SOURCE = 'va-parameter';                       // Track integration source
                                                        console.log(`[id] Using ${State.ALERT_ID_SOURCE}: ${State.ALERT_ID}`);
                                                        State.resolveAlertIdReady?.(State.ALERT_ID);                  // Coordinate with dependent operations
                                                        UI.elements.summarizeBtn.disabled = false;                    // Activate summarization workflow
                                                        Summary.startPrefetch();                                      // Initialize data prefetching
                                                        console.log(`[id] summarizeBtn enabled (source=${State.ALERT_ID_SOURCE})`);
                                                }
                                        });
                                },

                                /*
                                Comment Interface Configuration
                                ===============================
                                Configures analyst comment textarea with responsive UX features including
                                auto-resize functionality and character limit enforcement. Ensures optimal
                                user experience for case documentation while maintaining data integrity.
                                */
                                setupComments() {
                                        /*
                                        Dynamic Textarea Auto-Resize Implementation
                                        ===========================================
                                        Provides responsive textarea that grows with content, improving user
                                        experience for variable-length analyst observations. Eliminates internal
                                        scrolling while maintaining clean, professional layout appearance.
                                        */
                                        UI.elements.commentsEl.addEventListener('input', () => Utils.autoResize(UI.elements.commentsEl));
                                        window.addEventListener('load', () => Utils.autoResize(UI.elements.commentsEl));

                                        /*
                                        Character Limit Enforcement and Real-time Feedback
                                        ==================================================
                                        Implements hard character limit to prevent API payload issues while
                                        providing real-time character count feedback. Prevents data loss and
                                        maintains system reliability during comment submission workflows.
                                        */
                                        UI.elements.commentsEl.addEventListener('input', () => {
                                                // Enforce maximum character limit to prevent API issues
                                                if (UI.elements.commentsEl.value.length > Config.COMMENT_LIMIT) {
                                                        UI.elements.commentsEl.value = UI.elements.commentsEl.value.slice(0, Config.COMMENT_LIMIT);
                                                }
                                                // Update real-time character counter for user awareness
                                                UI.elements.charCountEl.textContent = `${UI.elements.commentsEl.value.length} / ${Config.COMMENT_LIMIT}`;
                                        });

                                        // Initialize character counter on application load
                                        UI.elements.commentsEl.dispatchEvent(new Event('input'));
                                },

                                /*
                                Event Binding and Interaction Management
                                =======================================
                                Establishes all user interaction handlers for the AML alert processing interface.
                                Implements accessible keyboard navigation, responsive button states, and intuitive
                                workflow transitions optimized for analyst productivity and compliance workflows.
                                */
                                bindEvents() {
                                        /*
                                        Summary Workflow Event Handlers
                                        ===============================
                                        Core actions for alert summarization and analyst comment management.
                                        */
                                        UI.elements.summarizeBtn.addEventListener('click', () => Summary.summarize());
                                        UI.elements.saveBtn.addEventListener('click', () => Comments.saveComment());      // Local storage persistence only
                                        UI.elements.clearBtn.addEventListener('click', () => Comments.clearComment());

                                        /*
                                        Chat Interface Interaction Management
                                        =====================================
                                        Real-time chat send button state management and user input handling.
                                        */
                                        Chat.refreshSend();                                                              // Initialize send button state
                                        UI.elements.chatText.addEventListener('input', () => Chat.refreshSend());        // Update state on typing

                                        /*
                                        Accessible Chat Communication Controls
                                        ======================================
                                        Multiple input methods for chat submission with keyboard accessibility.
                                        Enter key submits, Shift+Enter creates new lines for analyst convenience.
                                        */
                                        UI.elements.chatSendBtn.addEventListener('click', () => Chat.handleSend());
                                        UI.elements.chatText.addEventListener('keydown', (e) => {
                                                if (e.key === 'Enter' && !e.shiftKey) {
                                                        e.preventDefault();                                          // Prevent form submission
                                                        Chat.handleSend();                                           // Process chat message
                                                }
                                        });

                                        /*
                                        User Preference Persistence
                                        ============================
                                        localStorage integration for remembering language and model selections.
                                        */
                                        UI.elements.langSelect.addEventListener('change', () => {
                                                localStorage.setItem('aml_lang', UI.elements.langSelect.value);
                                        });
                                        UI.elements.modelSelect.addEventListener('change', () => {
                                                localStorage.setItem('aml_model', UI.elements.modelSelect.value);
                                        });

                                        /*
                                        View Mode Toggle Interaction
                                        ============================
                                        Seamless switching between Summary and Chat modes with intuitive click handling.
                                        */
                                        UI.elements.toggleEl.addEventListener('click', () => UI.setView(!UI.elements.cardEl.classList.contains('show-chat')));
                                },

                                /*
                                Master Application Initialization
                                =================================
                                Orchestrates complete application startup sequence ensuring proper component
                                initialization order and user-ready state. Establishes default interface
                                configuration optimized for AML analyst workflows and productivity.
                                */
                                init() {
                                        UI.init();                                                               // Initialize DOM element caching and UI state
                                        this.checkAlertId();                                                     // Establish alert context from VA or URL
                                        this.setupComments();                                                    // Configure comment interface features
                                        this.bindEvents();                                                       // Attach all user interaction handlers

                                        /*
                                        Chat Interface Initialization with Welcome Message
                                        ==================================================
                                        Seeds chat interface with friendly introduction to improve discoverability
                                        and guide analysts toward productive AI assistant interactions.
                                        */
                                        Chat.addMessage('bot',
                                                "Hi! I am a friendly chatbot that will use the alert data and my general AML knowledge to help you. What's on your mind?");

                                        /*
                                        Default Interface Configuration
                                        ==============================
                                        Establishes Summary mode as default view, optimizing for most common
                                        analyst workflow pattern of generating summaries before chat interaction.
                                        */
                                        UI.setView(false); // false = Summary mode, true = Chat mode
                                }
                        };

                        /*
                        Application Bootstrap
                        ====================
                        Initiates the complete AML alert processing application.
                        */
                        Init.init();

                })();
        </script>
</body>

</html>
