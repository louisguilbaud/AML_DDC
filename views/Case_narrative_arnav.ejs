<!DOCTYPE html>
<html lang="en">
<head>
    <script src='./javascripts/sas/util/messagingUtil.js'></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Response</title>
</head>
<body>
    <h1>API Response</h1>
    <div id="apiResponse"></div>
    <div id="scenario_fired_event"></div>
    <div id="transactions"></div>
    <div id="Party_info"></div>
    <div id="postResponse"></div>
    <h2>Vertices JSON</h2>
    <pre id="verticesJson"></pre>
    <h2>Edges JSON</h2>
    <pre id="edgesJson"></pre>

    <button type="submit" class="btn-primary" id="callApiButton">Case Narrative</button>
    <div class="api-response-box"> 
        <p><span id="chatgptResponse"></span></p>
    </div>
    <p hidden><span id="apiKeyContainer"></span></p>

    <script>
        "use strict";

        const myHeaders = new Headers();
        myHeaders.append("Cookie", "sas-ingress-nginx=6866adc2289a112d6ea7fd0775261540|f0e9e5d83f1b459459b54939af4feb2b");

        const requestOptions = {
            method: "GET",
            headers: myHeaders,
            redirect: "follow"
        };

        va.messagingUtil.setOnDataReceivedCallback(updateURL);

        function updateURL(vaMsgObj) {
            console.log('Received vaMsgObj:', vaMsgObj);
            if (vaMsgObj && vaMsgObj.data && vaMsgObj.data.length > 0) {
                const apiKey = vaMsgObj.data[0][0];
                console.log('Fetched API Key:', apiKey);
                document.getElementById("apiKeyContainer").textContent = apiKey;
            } else {
                document.getElementById("apiKeyContainer").textContent = "No API key available";
            }
        }

        async function getCsrfToken() {
            const url = 'https://sasserver.demo.sas.com/svi-sand/traversals?calculateMetrics=false&expansionLimit=2000';
            try {
                const response = await fetch(url, {
                    method: 'GET',
                    credentials: 'include'
                });
                const csrfToken = response.headers.get('X-CSRF-TOKEN');
                if (!csrfToken) {
                    console.error('CSRF token not found in response headers');
                    throw new Error('CSRF token not found in response headers');
                }
                console.log("[debug]: csrfToken set")
                return csrfToken;
            } catch (error) {
                console.error('Error in getCsrfToken:', error);
                throw error;
            }
        }

        async function postData(csrfToken) {
            const url = 'https://sasserver.demo.sas.com/svi-sand/traversals?calculateMetrics=false&expansionLimit=2000';
            const data = {
                "edgeTypes": [
                    "social_link"
                ],
                "depth": 2,
                "extendedFormat": true,
                "graphObjectIds": [
                    {
                        "type": "PTY",
                        "id": "10056215"
                    },
                    {
                        "type": "alerts",
                        "id": "b63203ba-d218-410d-b3fe-95108afb5208"
                    }
                ],
                "query": {
                    "type": "object",
                    "objectIds": [
                        {
                            "type": "PTY",
                            "id": "10056215"
                        }
                    ]
                }
            };

            const myHeaderspost = new Headers();
            myHeaderspost.append("Content-Type", "application/json");
            myHeaderspost.append("Cookie", "sas-ingress-nginx=465a78167134495424fe1d90f9dbaa56|12b794cb5ca279bec1edb7e510234855");
            myHeaderspost.append("X-CSRF-TOKEN", csrfToken);

            const requestOptionspost = {
                method: "POST",
                headers: myHeaderspost,
                body: JSON.stringify(data),
                redirect: "follow"
            };

            try {
                const response = await fetch(url, requestOptionspost);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                const postResponseText = await response.json();
                document.getElementById('postResponse').textContent = JSON.stringify(postResponseText, null, 2);

                const vertices = postResponseText.vertices.map(vertex => ({
                    type: vertex.type,
                    id: vertex.id,
                    typeLabel: vertex.typeLabel,
                    label: vertex.label
                }));

                const edges = postResponseText.edges.map(edge => ({
                    id: edge.id,
                    endpoints: edge.endpoints.map(endpoint => ({
                        type: endpoint.type,
                        id: endpoint.id
                    })),
                    subtype: edge.subtype,
                    label: edge.label
                }));

                console.log("[debug]: set pty and graph data");

                document.getElementById('verticesJson').textContent = JSON.stringify(vertices, null, 2);
                document.getElementById('edgesJson').textContent = JSON.stringify(edges, null, 2);
            } catch (error) {
                console.error('Error in postData:', error);
                document.getElementById('postResponse').textContent = `Error: ${error}`;
            }
        }

        async function fetchData() {
            const alertUrl = "https://sasserver.demo.sas.com/svi-alert/alerts/b63203ba-d218-410d-b3fe-95108afb5208";
            console.log("[debug]: called alerts data");
            try {
                const response = await fetch(alertUrl, requestOptions);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                const data = await response.json();
                const currentAlertingEventId = data.currentAlertingEventId;
                const actionableEntityId = data.actionableEntityId;
                document.getElementById("apiResponse").innerHTML = JSON.stringify(data, null, 2);

                const alertingEventsUrl = `https://sasserver.demo.sas.com/svi-alert/alertingEvents/${currentAlertingEventId}`;
                const alertingEventsResponse = await fetch(alertingEventsUrl, requestOptions);
                if (!alertingEventsResponse.ok) {
                    throw new Error('Network response was not ok ' + alertingEventsResponse.statusText);
                }
                const alertingEventsData = await alertingEventsResponse.json();
                const filteredScenarioFiredEvents = alertingEventsData.scenarioFiredEvents.map(event => ({
                    scenarioName: event.scenarioName,
                    scenarioDescription: event.scenarioDescription,
                    messageTemplateText: event.messageTemplateText
                }));
                document.getElementById("scenario_fired_event").innerHTML = JSON.stringify(filteredScenarioFiredEvents, null, 2);

                const transactionsUrl = `https://sasserver.demo.sas.com/amlCore/transactions?entityLevelCode=PTY&entityNumber=${actionableEntityId}`;
                const transactionsResponse = await fetch(transactionsUrl, requestOptions);
                if (!transactionsResponse.ok) {
                    throw new Error('Network response was not ok ' + transactionsResponse.statusText);
                }
                const transactionsData = await transactionsResponse.json();
                const filteredTransactions = transactionsData.items.map(transaction => ({
                    transactionNumber: transaction.transactionNumber,
                    primaryMediumDesc: transaction.primaryMediumDesc,
                    secondaryMediumDesc: transaction.secondaryMediumDesc,
                    mechanismDesc: transaction.mechanismDesc,
                    currencyAmount: transaction.currencyAmount,
                    transactionCDIDesc: transaction.transactionCDIDesc
                }));
                document.getElementById("transactions").innerHTML = JSON.stringify(filteredTransactions, null, 2);

                const partyInfoUrl = `https://sasserver.demo.sas.com/SASVisualInvestigator/pages/PTY/${actionableEntityId}`;
                const partyInfoResponse = await fetch(partyInfoUrl, requestOptions);
                if (!partyInfoResponse.ok) {
                    throw new Error('Network response was not ok ' + partyInfoResponse.statusText);
                }
                const partyInfoData = await partyInfoResponse.json();
                document.getElementById("Party_info").innerHTML = JSON.stringify(partyInfoData.data, null, 2);

                const csrfToken = await getCsrfToken();
                await postData(csrfToken);
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('postResponse').textContent = `Error: ${error}`;
            }
        }

        document.getElementById("callApiButton").addEventListener("click", function() {
            console.log("[debug]: called api button");

            const apiKey = document.getElementById("apiKeyContainer").textContent;
            const apiUrl = "https://api.openai.com/v1/chat/completions";

            console.log("[debug]: ", apiKey);

            const userContent = `You are here to help an AML investigator of a bank. In JSON format, there is a list of scenarios that triggered (also called scenario fired event) a customer, his personal information, and the list of his transactions. I want you to give recommendations for each scenario fired event on where the investigator should look first to find the suspicious activity. Write the scenario name and then the recommendation for the triggered scenario. You can give the transactions that are suspicious for a specific scenario by giving the transaction ID. Try to give as many details as possible. At the very end give a recommendation on the total alert considering all the information and especially considering the KYC profile of the customer: 
            
            Filtered Scenario Fired Events: ${document.getElementById("scenario_fired_event").textContent} 
            
            Filtered transactions: ${document.getElementById("transactions").textContent} 
            
            Personal information on the customer: ${document.getElementById("Party_info").textContent}
            `;

            console.log("[debug]: system prompt:");

            console.log("[debug]: prompt: ", userContent);

            fetch(apiUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apiKey
                },
                body: JSON.stringify({
                    "model": "gpt-4o",
                    "messages": [{"role": "user", "content": userContent}]
                })
            })
            .then(response => response.json())
            .then(data => {
                const content = data.choices[0].message.content;
                document.getElementById("chatgptResponse").textContent = content;
            })
            .catch(error => {
                console.error("Error:", error);
                document.getElementById("chatgptResponse").textContent = "Error occurred while fetching API data.";
            });
        });

        // Fetch data on page load
        fetchData();
    </script>
</body>
</html>
