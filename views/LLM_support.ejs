<!DOCTYPE html>
<html lang="en">
<head>
	<script src='./javascripts/sas/util/messagingUtil.js'></script>
	<script src="./javascripts/jquery/jquery.min.js"></script>

<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>GPT Summary Generator</title>
<style>
    body {
      background-color: #f8f9fa;
      font-family: Arial, sans-serif;
    }
    .container {
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 20px;
      max-width: 800px;
      margin: 50px auto;
    }
    .tabs {
      margin-bottom: 20px;
    }
    .tab-button {
      padding: 10px 20px;
      background-color: #f8f9fa;
      border: none;
      border-radius: 4px 4px 0 0;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .tab-button.active {
      background-color: #007bff;
      color: #fff;
    }
    .tab-content {
      display: none;
      padding: 20px;
      border: 1px solid #ccc;
      border-top: none;
      border-radius: 0 0 4px 4px;
    }
    .tab-content.active {
      display: block;
    }
    .form-group {
      margin-bottom: 20px;
    }
    .form-label {
      font-weight: bold;
      display: block;
    }
    .form-input {
      width: 100%;
      padding: 8px;
      border-radius: 4px;
      border: 1px solid #ccc;
      resize: vertical;
    }
    .form-input-file {
      padding: 8px;
      border-radius: 4px;
      border: 1px solid #ccc;
      width: 100%;
    }
    .btn-primary {
      background-color: #007bff;
      color: #fff;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .btn-primary:hover {
      background-color: #0056b3;
    }
    #summaryOutput {
      margin-top: 20px;
    }
    #inputText {
      margin-top: 20px;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 4px;
    }
</style>
</head>
<body>
<div class="container">
<h2>GPT Summary Generator </h2>
<div class="tabs">
<button class="tab-button active" onclick="openTab('settings')">Settings</button>
<button class="tab-button" onclick="openTab('qa')">Q&A</button>
<button class="tab-button" onclick="openTab('translate')">Translate</button>
</div>
<div id="settings" class="tab-content active">
<form id="summaryForm">
<div class="form-group">
<label for="pdfFile" class="form-label">Upload PDF:</label>
<input type="file" class="form-input-file" id="pdfFile" accept=".pdf">
</div>
<div class="form-group">
<label for="textInput" class="form-label">Text Input:</label>
<textarea class="form-input" id="textInput" rows="5"></textarea>
</div>
<button type="submit" class="btn-primary">Generate Summary</button>
</form>
<div id="inputText" style="display:none;"></div>
</div>
<div id="qa" class="tab-content">
<!-- Q&A content goes here -->
</div>
<div id="translate" class="tab-content">
<!-- Translation content goes here -->
</div>
<div id="summaryOutput"></div>
</div>
<div id="urlContainer">
    <span id="urlText"></span>
    <span id="api_key"></span>
</div>
 
<script src="https://cdn.jsdelivr.net/npm/@openai/gpt-3.5"></script>
<script>
    "use strict";

    va.messagingUtil.setOnDataReceivedCallback(updateURL);

	function updateURL(vaMsgObj)
	{
		console.log(vaMsgObj.data[0][0])
		if (vaMsgObj && vaMsgObj.data && vaMsgObj.data.length > 0) {
			document.getElementById("urlText").textContent = vaMsgObj.data[0][0];
			document.getElementById("api_key").textContent = vaMsgObj.data[0][1];
		}
		else {
			document.getElementById("urlText").textContent = "No URL available";
		}
	}

<script>
   async function callChatGPT(message) {
        const endpoint = 'https://api.openai.com/v1/chat/completions';
        const apiKey = document.getElementById("api_key").textContent.trim(); // Get the API key
        const headers = {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        };

        const body = JSON.stringify({
            model: 'text-davinci-003', // Change the model to the one you prefer
            messages: [
                {
                    role: 'user',
                    content: message
                }
            ]
        });

        try {
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: headers,
                body: body
            });

            if (!response.ok) {
                throw new Error('Failed to fetch response from ChatGPT API');
            }

            const data = await response.json();
            return data.choices[0].message.content;
        } catch (error) {
            console.error('Error:', error);
            return null;
        }
    }

    document.getElementById('summaryForm').addEventListener('submit', async function(event) {
        event.preventDefault();
        const pdfFile = document.getElementById('pdfFile').files[0]; // Get the uploaded PDF file
        const textInput = document.getElementById('textInput').value; // Get the text input
        const summaryOutput = document.getElementById('summaryOutput');

        let textToGenerateSummary = '';

        if (pdfFile) {
            // If a PDF file is uploaded, you can extract text from it using a PDF processing library
            // Here, I'm assuming you have a function named 'extractTextFromPDF' to extract text from the PDF file
            textToGenerateSummary = await extractTextFromPDF(pdfFile);
        } else {
            // If no PDF file is uploaded, use the text input
            textToGenerateSummary = textInput;
        }

        try {
            const summary = await callChatGPT(textToGenerateSummary);
            summaryOutput.innerText = summary;
        } catch (error) {
            console.error('Error:', error);
            summaryOutput.innerText = 'Error generating summary. Please try again later.';
        }
    });

    function openTab(tabName) {
        var i, tabContent;
        tabContent = document.getElementsByClassName('tab-content');
        for (i = 0; i < tabContent.length; i++) {
            tabContent[i].style.display = 'none';
        }
        document.getElementById(tabName).style.display = 'block';
        var tabButtons = document.getElementsByClassName('tab-button');
        for (i = 0; i < tabButtons.length; i++) {
            tabButtons[i].className = tabButtons[i].className.replace(' active', '');
        }
        document.querySelector('button[data-tab="' + tabName + '"]').className += ' active';
    }
</script>
</body>
</html>


