<!DOCTYPE html>
<html lang="en">

<head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <title>Alert Summarizer</title>
        <style>
                :root {
                        --bg: #fbfbfd;
                        --fg: #1d1d1f;
                        --muted: #6e6e73;
                        --card: #fff;
                        --border: rgba(0, 0, 0, .08);
                        --primary: #0478CE;
                        --primary-press: #0366AF
                }

                * {
                        box-sizing: border-box
                }

                html,
                body {
                        height: 100%
                }

                body {
                        margin: 0;
                        background: var(--bg);
                        color: var(--fg);
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, system-ui
                }

                .container {
                        width: min(92vw, 1280px); 
                        max-width: 1280px;
                        margin: 5vh auto 8vh;
                        padding: 0 24px
                }

                .card {
                        background: var(--card);
                        border: 1px solid var(--border);
                        border-radius: 24px;
                        box-shadow: 0 1px 2px rgba(0, 0, 0, .04), 0 8px 30px rgba(0, 0, 0, .06);
                        padding: 32px;
                        display: grid;
                        gap: 18px
                }

                .header {
                        display: flex;
                        justify-content: space-between;
                        align-items: flex-start;
                        gap: 12px
                }

                h1 {
                        margin: 0 0 6px 0;
                        font-size: 28px;
                        font-weight: 650;
                        letter-spacing: -.02em
                }

                .subtitle {
                        margin: 0;
                        color: var(--muted);
                        font-size: 14px
                }

                .row {
                        display: flex;
                        gap: 10px;
                        align-items: center
                }

                button {
                        appearance: none;
                        border: none;
                        cursor: pointer;
                        font-family: inherit
                }

                .btn-primary {
                        background: var(--primary);
                        color: #fff;
                        border-radius: 14px;
                        padding: 12px 18px;
                        font-size: 16px;
                        font-weight: 600;
                        box-shadow: 0 6px 18px rgba(0, 122, 255, .25);
                        transition: transform .06s, box-shadow .2s, filter .2s
                }

                .btn-primary:hover {
                        filter: brightness(1.02)
                }

                .btn-primary:active {
                        transform: scale(.985)
                }

                .btn-primary:disabled {
                        opacity: .65;
                        cursor: not-allowed;
                        box-shadow: none
                }

                .btn-secondary {
                        background: #f2f2f7;
                        color: var(--fg);
                        border-radius: 14px;
                        padding: 10px 16px;
                        font-size: 14px;
                        font-weight: 600
                }

                .btn-secondary:hover {
                        filter: brightness(.97)
                }

                .btn-secondary:active {
                        filter: brightness(.94)
                }

                .spinner {
                        width: 16px;
                        height: 16px;
                        border: 2px solid rgba(255, 255, 255, .6);
                        border-top-color: #fff;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                        display: none
                }

                @keyframes spin {
                        to {
                                transform: rotate(360deg)
                        }
                }

                .loading .spinner {
                        display: inline-block
                }

                .loading .labeltext {
                        display: none
                }

                .label {
                        font-size: 12px;
                        text-transform: uppercase;
                        letter-spacing: .08em;
                        color: var(--muted);
                        margin-bottom: 8px
                }

                .summary {
                        border: 1px solid var(--border);
                        border-radius: 14px;
                        background: #fafafa;
                        padding: 14px;
                        min-height: 140px;
                        white-space: normal;
                        font-size: 14px
                }

                .summary h1 {
                        font-size: 24px;
                        margin: 0 0 8px
                }

                .summary h2 {
                        font-size: 18px;
                        margin: 14px 0 6px
                }

                .summary p {
                        margin: 6px 0
                }

                .summary ul {
                        margin: 6px 0 6px 18px;
                        padding-left: 18px
                }

                .summary li {
                        margin: 3px 0
                }

                .summary .cutoff {
                        margin-top: 10px;
                        font-size: 12px;
                        color: var(--muted)
                }

                textarea {
                        width: 100%;
                        min-height: 120px;
                        resize: vertical;
                        padding: 14px 16px;
                        border-radius: 16px;
                        border: 1px solid rgba(0, 0, 0, .12);
                        background: #fff;
                        outline: none;
                        line-height: 1.5;
                        overflow: hidden;   
                        resize: none
                }

                textarea:focus {
                        border-color: var(--primary-press);
                        box-shadow: 0 0 0 4px rgba(10, 132, 255, .12)
                }

                .caption {
                        font-size: 12px;
                        color: var(--muted)
                }

                .toast {
                        position: fixed;
                        left: 50%;
                        bottom: 24px;
                        transform: translateX(-50%) translateY(20px);
                        background: #111;
                        color: #fff;
                        padding: 10px 14px;
                        border-radius: 999px;
                        box-shadow: 0 10px 30px rgba(0, 0, 0, .25);
                        opacity: 0;
                        pointer-events: none;
                        transition: transform .35s, opacity .35s
                }

                .toast.show {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0)
                }

                .working {
                        display: inline-flex;
                        align-items: center;
                        gap: 6px;
                        color: var(--muted);
                        font-weight: 600
                }

                .working .dots {
                        display: inline-flex;
                        gap: 4px;
                        margin-left: 2px
                }

                .working .dots i {
                        width: 6px;
                        height: 6px;
                        border-radius: 50%;
                        background: var(--muted);
                        opacity: .25;
                        animation: dotpulse 1s ease-in-out infinite
                }

                .working .dots i:nth-child(2) {
                        animation-delay: .2s
                }

                .working .dots i:nth-child(3) {
                        animation-delay: .4s
                }

                @keyframes dotpulse {

                        0%,
                        100% {
                                transform: translateY(0);
                                opacity: .25
                        }

                        50% {
                                transform: translateY(-3px);
                                opacity: 1
                        }
                }

                .skel {
                        display: grid;
                        gap: 8px;
                        margin-top: 10px
                }

                .skel .line {
                        height: 10px;
                        border-radius: 6px;
                        background: linear-gradient(90deg, #ececec, #f7f7f7, #ececec);
                        background-size: 200% 100%;
                        animation: shimmer 1.2s linear infinite
                }

                @keyframes shimmer {
                        0% {
                                background-position: 200% 0
                        }

                        100% {
                                background-position: -200% 0
                        }
                }
        </style>
</head>

<body>
        <div class="container">
                <div class="card" role="region" aria-labelledby="title">
                        <div class="header">
                                <div>
                                        <h1 id="title">Alert Summarizer</h1>
                                        <p class="subtitle">Generate a concise summary with one click.</p>
                                </div>
                                <div class="row">
                                        <button id="summarizeBtn" class="btn-primary" aria-busy="false">
                                                <span class="spinner" aria-hidden="true"></span>
                                                <span class="labeltext">Summarize</span>
                                        </button>
                                </div>
                        </div>

                        <div>
                                <div class="label">Generated Summary</div>
                                <div id="summary" class="summary" role="region" aria-live="polite">Press “Summarize” to
                                        start.</div>
                        </div>

                        <div>
                                <div class="label">Your Comments</div>
                                <textarea id="comments"
                                        placeholder="Add comments on the generated response and the alert in general…"></textarea>
                                <div class="row" style="justify-content:space-between;margin-top:8px">
                                        <span id="charCount" class="caption">0 / 2000</span>
                                        <div class="row">
                                                <button id="clearBtn" class="btn-secondary" type="button">Clear</button>
                                                <button id="saveBtn" class="btn-secondary" type="button">Save
                                                        Comment</button>
                                        </div>
                                </div>
                        </div>
                </div>
        </div>

        <div id="toast" class="toast" role="status" aria-live="polite">Saved</div>

        <script>
                // ===== CONFIG =====
                const MODULE_URI = '/microanalyticScore/modules/aml_demo_prompt_building1_0/steps/execute';
                const CSRF_PRIMER_URL = '/microanalyticScore/modules';
                const ALERT_ID = '0fa7949f-39aa-4a83-974c-d4f2c375dec0'; // hardcoded for now

                // OpenAI Responses API settings
                const OPENAI_URL = 'https://api.openai.com/v1/responses';
                const OPENAI_MODEL = 'gpt-5';

                // ===== UI =====
                const summarizeBtn = document.getElementById('summarizeBtn');
                const summaryEl = document.getElementById('summary');
                const commentsEl = document.getElementById('comments');
                const charCountEl = document.getElementById('charCount');
                const saveBtn = document.getElementById('saveBtn');
                const clearBtn = document.getElementById('clearBtn');
                const toast = document.getElementById('toast');
                summarizeBtn.disabled = false;

                const COMMENT_LIMIT = 2000;
                // Auto-expand the comment box
                const autoResize = el => {
                el.style.height = 'auto';
                el.style.height = el.scrollHeight + 'px';
                };
                commentsEl.addEventListener('input', () => autoResize(commentsEl));
                window.addEventListener('load', () => autoResize(commentsEl));
                commentsEl.addEventListener('input', () => {
                        if (commentsEl.value.length > COMMENT_LIMIT) {
                                commentsEl.value = commentsEl.value.slice(0, COMMENT_LIMIT);
                        }
                        charCountEl.textContent = `${commentsEl.value.length} / ${COMMENT_LIMIT}`;
                });
                commentsEl.dispatchEvent(new Event('input'));

                function showToast(msg) { toast.textContent = msg; toast.classList.add('show'); setTimeout(() => toast.classList.remove('show'), 1400); }
                function renderWorking(message) {
                        summaryEl.innerHTML = `<div class="working">${message}<span class="dots"><i></i><i></i><i></i></span></div>
      <div class="skel"><div class="line" style="width:88%"></div><div class="line" style="width:96%"></div><div class="line" style="width:72%"></div></div>`;
                }
                function escapeHtml(s) { return s.replace(/[&<>"']/g, m => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#39;" }[m])); }

                // ===== Helpers =====
                async function getCsrfToken() {
                        const res = await fetch(CSRF_PRIMER_URL, { method: 'GET', credentials: 'include' });
                        return res.headers.get('X-CSRF-TOKEN') || res.headers.get('x-csrf-token') || '';
                }
                function outputsToMap(outputs) { const m = {}; (outputs || []).forEach(o => m[o.name] = o.value); return m; }

                function extractOpenAIText(j) {
                        if (j && typeof j.output_text === 'string' && j.output_text.trim()) return j.output_text;
                        if (Array.isArray(j?.output)) {
                                for (const item of j.output) {
                                        const content = item?.content;
                                        if (Array.isArray(content)) {
                                                for (const c of content) {
                                                        if (typeof c?.text === 'string' && c.text.trim()) return c.text;
                                                        if (c?.type === 'output_text' && c?.text) return c.text;
                                                }
                                        }
                                }
                        }
                        if (j?.choices?.[0]?.message?.content) return j.choices[0].message.content;
                        return null;
                }

                async function callOpenAI(systemPrompt, apiKey) {
                        const body = {
                                model: OPENAI_MODEL,
                                input: systemPrompt,
                                reasoning: { effort: "medium" },
                                text: { verbosity: "low" }
                        };
                        const res = await fetch(OPENAI_URL, {
                                method: 'POST',
                                headers: {
                                        'Accept': 'application/json',
                                        'Content-Type': 'application/json',
                                        'Authorization': `Bearer ${apiKey}`
                                },
                                body: JSON.stringify(body)
                        });
                        const json = await res.json().catch(() => ({}));
                        if (!res.ok) throw new Error(`${res.status} ${res.statusText}\n${JSON.stringify(json).slice(0, 500)}`);
                        const txt = extractOpenAIText(json);
                        if (!txt) throw new Error('LLM returned no text payload');
                        return txt;
                }

                // ===== Main action =====
                async function summarize() {
                        summarizeBtn.disabled = true;
                        summarizeBtn.classList.add('loading');
                        summarizeBtn.setAttribute('aria-busy', 'true');

                        const msgs = ["Building prompt with MAS", "Calling LLM", "Formatting summary"];
                        let i = 0; const timer = setInterval(() => renderWorking(msgs[i++ % msgs.length]), 1200);
                        renderWorking(msgs[0]);

                        try {
                                // 1) Get CSRF + call MAS for prompt + key
                                const csrf = await getCsrfToken();
                                if (!csrf) throw new Error('CSRF token not available. Log in to SAS in this browser to solve.');

                                const payload = { inputs: [{ name: "ALERT_ID_", value: ALERT_ID }] };
                                const masRes = await fetch(MODULE_URI, {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrf },
                                        credentials: 'include',
                                        body: JSON.stringify(payload)
                                });

                                const masText = await masRes.text();
                                if (!masRes.ok) throw new Error(`${masRes.status} ${masRes.statusText}\n${masText.slice(0, 500)}`);

                                let masJson; try { masJson = JSON.parse(masText); } catch { throw new Error('Non-JSON response from MAS'); }
                                const out = outputsToMap(masJson.outputs);
                                const systemPrompt = out['systemPrompt'];
                                const openaiKey = out['key'];
                                const cutoff = out['CUTOFF_DATE'];

                                if (!systemPrompt) throw new Error('MAS output "systemPrompt" not found');
                                if (!openaiKey) throw new Error('MAS output "key" (OpenAI API key) not found');

                                // 2) Call OpenAI with MAS-provided key
                                renderWorking(msgs[1]);
                                const llmText = await callOpenAI(systemPrompt, openaiKey);

                                // 3) Render as HTML (LLM returns HTML with <h1>, <h2>, <ul>, etc.)
                                summaryEl.innerHTML = `${llmText}${cutoff ? `<div class="cutoff">${cutoff}</div>` : ''}`;
                        } catch (e) {
                                summaryEl.textContent = `Error:\n${e.message}`;
                                console.error(e);
                        } finally {
                                clearInterval(timer);
                                summarizeBtn.disabled = false;
                                summarizeBtn.classList.remove('loading');
                                summarizeBtn.setAttribute('aria-busy', 'false');
                        }
                }

                function saveComment() {
                        const key = 'aml-summary-comments';
                        const existing = JSON.parse(localStorage.getItem(key) || '[]');
                        const entry = { ts: new Date().toISOString(), alertId: ALERT_ID, comment: commentsEl.value.trim(), summary: summaryEl.textContent.trim() };
                        if (!entry.comment) { showToast('Nothing to save'); return; }
                        existing.push(entry); localStorage.setItem(key, JSON.stringify(existing)); showToast('Comment saved locally');
                }
                function clearComment() { commentsEl.value = ''; commentsEl.dispatchEvent(new Event('input')); showToast('Cleared'); }

                document.getElementById('summarizeBtn').addEventListener('click', summarize);
                saveBtn.addEventListener('click', saveComment);
                clearBtn.addEventListener('click', clearComment);
        </script>
</body>

</html>
