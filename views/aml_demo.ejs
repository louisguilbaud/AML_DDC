<!DOCTYPE html>
<html lang="en">

<head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <title>Alert Summarizer</title>
        <script src="./javascripts/sas/util/messagingUtil.js"></script>
        <style>
                :root {
                        --bg: #fbfbfd;
                        --fg: #1d1d1f;
                        --muted: #6e6e73;
                        --card: #fff;
                        --border: rgba(0, 0, 0, .08);
                        --primary: #0478CE;
                        --primary-press: #0366AF
                }

                * {
                        box-sizing: border-box
                }

                html,
                body {
                        height: 100%
                }

                body {
                        margin: 0;
                        background: var(--bg);
                        color: var(--fg);
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, system-ui
                }

                .container {
                        width: min(92vw, 1280px); 
                        max-width: 1280px;
                        margin: 5vh auto 8vh;
                        padding: 0 24px
                }

                .card {
                        background: var(--card);
                        border: 1px solid var(--border);
                        border-radius: 24px;
                        box-shadow: 0 1px 2px rgba(0, 0, 0, .04), 0 8px 30px rgba(0, 0, 0, .06);
                        padding: 32px;
                        display: grid;
                        gap: 18px
                        
                }

                .header {
                        display: flex;
                        justify-content: space-between;
                        align-items: flex-start;
                        gap: 12px
                }

                h1 {
                        margin: 0 0 6px 0;
                        font-size: 28px;
                        font-weight: 650;
                        letter-spacing: -.02em
                }

                .subtitle {
                        margin: 0;
                        color: var(--muted);
                        font-size: 14px
                }

                .row {
                        display: flex;
                        gap: 10px;
                        align-items: center
                }

                button {
                        appearance: none;
                        border: none;
                        cursor: pointer;
                        font-family: inherit
                }

                .btn-primary {
                        background: var(--primary);
                        color: #fff;
                        border-radius: 14px;
                        padding: 12px 18px;
                        font-size: 16px;
                        font-weight: 600;
                        box-shadow: 0 6px 18px rgba(0, 122, 255, .25);
                        transition: transform .06s, box-shadow .2s, filter .2s
                }

                .btn-primary:hover {
                        filter: brightness(1.02)
                }

                .btn-primary:active {
                        transform: scale(.985)
                }

                .btn-primary:disabled {
                        opacity: .65;
                        cursor: not-allowed;
                        box-shadow: none
                }

                .btn-secondary {
                        background: #f2f2f7;
                        color: var(--fg);
                        border-radius: 14px;
                        padding: 10px 16px;
                        font-size: 14px;
                        font-weight: 600
                }

                .btn-secondary:hover {
                        filter: brightness(.97)
                }

                .btn-secondary:active {
                        filter: brightness(.94)
                }

                .spinner {
                        width: 16px;
                        height: 16px;
                        border: 2px solid rgba(255, 255, 255, .6);
                        border-top-color: #fff;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                        display: none
                }

                @keyframes spin {
                        to {
                                transform: rotate(360deg)
                        }
                }

                .loading .spinner {
                        display: inline-block
                }

                .loading .labeltext {
                        display: none
                }

                .label {
                        font-size: 12px;
                        text-transform: uppercase;
                        letter-spacing: .08em;
                        color: var(--muted);
                        margin-bottom: 8px
                }

                .summary {
                        border: 1px solid var(--border);
                        border-radius: 14px;
                        background: #fafafa;
                        padding: 14px;
                        min-height: 140px;
                        white-space: normal;
                        font-size: 14px
                }

                .summary h1 {
                        font-size: 24px;
                        margin: 0 0 8px
                }

                .summary h2 {
                        font-size: 18px;
                        margin: 14px 0 6px
                }

                .summary p {
                        margin: 6px 0
                }

                .summary ul {
                        margin: 6px 0 6px 18px;
                        padding-left: 18px
                }

                .summary li {
                        margin: 3px 0
                }

                .summary .cutoff {
                        margin-top: 10px;
                        font-size: 12px;
                        color: var(--muted)
                }

                textarea {
                        width: 100%;
                        min-height: 120px;
                        resize: vertical;
                        padding: 14px 16px;
                        border-radius: 16px;
                        border: 1px solid rgba(0, 0, 0, .12);
                        background: #fff;
                        outline: none;
                        line-height: 1.5;
                        overflow: hidden;   
                        resize: none
                }

                textarea:focus {
                        border-color: var(--primary-press);
                        box-shadow: 0 0 0 4px rgba(10, 132, 255, .12)
                }

                .caption {
                        font-size: 12px;
                        color: var(--muted)
                }

                .toast {
                        position: fixed;
                        left: 50%;
                        bottom: 24px;
                        transform: translateX(-50%) translateY(20px);
                        background: #111;
                        color: #fff;
                        padding: 10px 14px;
                        border-radius: 999px;
                        box-shadow: 0 10px 30px rgba(0, 0, 0, .25);
                        opacity: 0;
                        pointer-events: none;
                        transition: transform .35s, opacity .35s
                }

                .toast.show {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0)
                }

                .working {
                        display: inline-flex;
                        align-items: center;
                        gap: 6px;
                        color: var(--muted);
                        font-weight: 600
                }

                .working .dots {
                        display: inline-flex;
                        gap: 4px;
                        margin-left: 2px
                }

                .working .dots i {
                        width: 6px;
                        height: 6px;
                        border-radius: 50%;
                        background: var(--muted);
                        opacity: .25;
                        animation: dotpulse 1s ease-in-out infinite
                }

                .working .dots i:nth-child(2) {
                        animation-delay: .2s
                }

                .working .dots i:nth-child(3) {
                        animation-delay: .4s
                }

                @keyframes dotpulse {

                        0%,
                        100% {
                                transform: translateY(0);
                                opacity: .25
                        }

                        50% {
                                transform: translateY(-3px);
                                opacity: 1
                        }
                }

                .skel {
                        display: grid;
                        gap: 8px;
                        margin-top: 10px
                }

                .skel .line {
                        height: 10px;
                        border-radius: 6px;
                        background: linear-gradient(90deg, #ececec, #f7f7f7, #ececec);
                        background-size: 200% 100%;
                        animation: shimmer 1.2s linear infinite
                }

                @keyframes shimmer {
                        0% {
                                background-position: 200% 0
                        }

                        100% {
                                background-position: -200% 0
                        }
                }

                /* === CHATBOT === */
                .chat {
                border: 1px solid var(--border);
                border-radius: 14px;
                background: #fafafa;
                padding: 12px;
                display: flex;
                flex-direction: column;
                gap: 10px;
                }
                .chat-messages {
                max-height: 260px;
                overflow: auto;
                display: grid;
                gap: 10px;
                padding-right: 4px;
                }
                .msg { display: flex; }
                .msg .bubble {
                border: 1px solid var(--border);
                background: #f7f7f7;
                color: var(--fg);
                padding: 10px 12px;
                border-radius: 14px 14px 4px 14px;
                font-size: 14px;
                line-height: 1.35;
                max-width: 72%;
                box-shadow: 0 1px 2px rgba(0,0,0,.04);
                }
                /* Bot bubble: white on gray background */
                .msg.bot .bubble {
                background: #fff;
                color: var(--fg);
                border-color: var(--border);
                }
                .msg.user { justify-content: flex-end; }
                .msg.user .bubble {
                background: var(--primary);
                color: #fff;
                border-color: transparent;
                border-radius: 14px 14px 14px 4px;
                }
                .chat-input { display: flex; gap: 8px; }
                #chatText {
                flex: 1;
                border: 1px solid rgba(0,0,0,.12);
                border-radius: 14px;
                padding: 12px 14px;
                font: inherit;
                outline: none;
                }
                #chatText:focus {
                border-color: var(--primary-press);
                box-shadow: 0 0 0 4px rgba(10,132,255,.12);
                }
                .typing { display: inline-flex; align-items: center; gap: 6px; }
                .typing .dots { display: inline-flex; gap: 4px; }
                .typing .dots i {
                width: 6px; height: 6px; border-radius: 50%;
                background: var(--muted); opacity: .35;
                animation: dotpulse 1s ease-in-out infinite;
                }
                .typing .dots i:nth-child(2){ animation-delay: .2s; }
                .typing .dots i:nth-child(3){ animation-delay: .4s; }
        </style>
</head>

<body>
        <div class="container">
                <div class="card" role="region" aria-labelledby="title">
                        <div class="header">
                                <div>
                                        <h1 id="title">Alert Summarizer</h1>
                                        <p class="subtitle">Generate a concise summary with one click.</p>
                                </div>
                                <div class="row">
                                        <button id="summarizeBtn" class="btn-primary" aria-busy="false">
                                                <span class="spinner" aria-hidden="true"></span>
                                                <span class="labeltext">Summarize</span>
                                        </button>
                                </div>
                        </div>

                        <div>
                                <div class="label">Generated Summary</div>
                                <div id="summary" class="summary" role="region" aria-live="polite">Press “Summarize” to generate a concise alert summary, powered by GPT-5.</div>
                        </div>

                        <div>
                                <div class="label">Your Comments</div>
                                <textarea id="comments"
                                        placeholder="Add comments on the generated response and the alert in general…"></textarea>
                                <div class="row" style="justify-content:space-between;margin-top:8px">
                                        <span id="charCount" class="caption">0 / 2000</span>
                                        <div class="row">
                                                <button id="clearBtn" class="btn-secondary" type="button">Clear</button>
                                                <button id="saveBtn" class="btn-secondary" type="button">Save
                                                        Comment</button>
                                        </div>
                                </div>
                        </div>

                        <!-- Chatbot -->
                        <div>
                                <div class="label">Chat (demo)</div>
                                <div class="chat" id="chat">
                                        <div id="chatMessages" class="chat-messages" role="region" aria-live="polite"></div>
                                        <div class="chat-input">
                                                <input id="chatText" type="text" placeholder="Ask a quick question about this alert…" />
                                                <button id="chatSendBtn" class="btn-primary" type="button">Send</button>
                                        </div>
                                </div>
                        </div>

                </div>
        </div>

        <div id="toast" class="toast" role="status" aria-live="polite">Saved</div>

        <script>
                // ===== CONFIG =====
                const MODULE_URI = '/microanalyticScore/modules/aml_demo_prompt_building1_1/steps/execute';
                const CSRF_PRIMER_URL = '/microanalyticScore/modules';
                //const ALERT_ID = '0fa7949f-39aa-4a83-974c-d4f2c375dec0'; // hardcoded for now
                let ALERT_ID = null;               // will be filled by VA
                let resolveAlertIdReady;
                const alertIdReady = new Promise(r => (resolveAlertIdReady = r));
                // track the source for diagnostics
                let ALERT_ID_SOURCE = 'unset';
                console.log('[id] init: waiting for alert id (from VA or URL)');



                // OpenAI Responses API settings
                const OPENAI_URL = 'https://api.openai.com/v1/responses';
                const OPENAI_SUMMARY_MODEL = 'gpt-5';
                const OPENAI_CHAT_MODEL     = 'gpt-5-mini';

                // ===== UI =====
                const summarizeBtn = document.getElementById('summarizeBtn');
                const summaryEl = document.getElementById('summary');
                const commentsEl = document.getElementById('comments');
                const charCountEl = document.getElementById('charCount');
                const saveBtn = document.getElementById('saveBtn');
                const clearBtn = document.getElementById('clearBtn');
                const toast = document.getElementById('toast');

                // disable until VA sends the ID
                summarizeBtn.disabled = true;

                const COMMENT_LIMIT = 2000;
                // Auto-expand the comment box
                const autoResize = el => {
                el.style.height = 'auto';
                el.style.height = el.scrollHeight + 'px';
                };
                commentsEl.addEventListener('input', () => autoResize(commentsEl));
                window.addEventListener('load', () => autoResize(commentsEl));
                commentsEl.addEventListener('input', () => {
                        if (commentsEl.value.length > COMMENT_LIMIT) {
                                commentsEl.value = commentsEl.value.slice(0, COMMENT_LIMIT);
                        }
                        charCountEl.textContent = `${commentsEl.value.length} / ${COMMENT_LIMIT}`;
                });
                commentsEl.dispatchEvent(new Event('input'));

                // 1) If an alertId is provided via URL (optional fallback), use it
                const urlAlertId = new URLSearchParams(location.search).get('alertId');
                if (urlAlertId) {
                ALERT_ID = urlAlertId;
                ALERT_ID_SOURCE = 'url';                                 
                console.log('[id] Using URL parameter ?alertId=', ALERT_ID); 
                resolveAlertIdReady?.(ALERT_ID);
                summarizeBtn.disabled = false;
                console.log('[id] summarizeBtn enabled (source=url)');   
                }

                // 2) Primary path: get alert id from VA (parameter preferred, else data cell)
                va.messagingUtil.setOnDataReceivedCallback(function (vaMsgObj) {
                console.log('[id] VA message received:', vaMsgObj);           

                const paramVal = vaMsgObj?.parameters?.[0]?.value;
                const dataVal  = vaMsgObj?.data?.[0]?.[0];

                console.log('[id] candidates -> paramVal:', paramVal, 'dataVal:', dataVal);

                const candidate = paramVal || dataVal;

                if (candidate && candidate !== ALERT_ID) {
                ALERT_ID = String(candidate);
                ALERT_ID_SOURCE = (paramVal != null) ? 'va-parameter' : 'va-data'; 
                console.log(`[id] Using ${ALERT_ID_SOURCE}: ${ALERT_ID}`);
                resolveAlertIdReady?.(ALERT_ID);          // resolve the waiters (first time)
                summarizeBtn.disabled = false;            // enable the button now that we have it
                console.log(`[id] summarizeBtn enabled (source=${ALERT_ID_SOURCE})`);
                }
                });

                function showToast(msg) { toast.textContent = msg; toast.classList.add('show'); setTimeout(() => toast.classList.remove('show'), 1400); }
                function renderWorking(message) {
                        summaryEl.innerHTML = `<div class="working">${message}<span class="dots"><i></i><i></i><i></i></span></div>
      <div class="skel"><div class="line" style="width:88%"></div><div class="line" style="width:96%"></div><div class="line" style="width:72%"></div></div>`;
                }
                function escapeHtml(s) { return s.replace(/[&<>"']/g, m => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#39;" }[m])); }

                // ===== Helpers =====
                async function getCsrfToken() {
                        const res = await fetch(CSRF_PRIMER_URL, { method: 'GET', credentials: 'include' });
                        return res.headers.get('X-CSRF-TOKEN') || res.headers.get('x-csrf-token') || '';
                }
                function outputsToMap(outputs) { const m = {}; (outputs || []).forEach(o => m[o.name] = o.value); return m; }

                function extractOpenAIText(j) {
                        if (j && typeof j.output_text === 'string' && j.output_text.trim()) return j.output_text;
                        if (Array.isArray(j?.output)) {
                                for (const item of j.output) {
                                        const content = item?.content;
                                        if (Array.isArray(content)) {
                                                for (const c of content) {
                                                        if (typeof c?.text === 'string' && c.text.trim()) return c.text;
                                                        if (c?.type === 'output_text' && c?.text) return c.text;
                                                }
                                        }
                                }
                        }
                        if (j?.choices?.[0]?.message?.content) return j.choices[0].message.content;
                        return null;
                }

                function trimChars(s, max = 8000) {
                if (!s) return '';
                return s.length <= max ? s : (s.slice(0, max) + '\n[...trimmed]');
                }

                // Build the chat system prompt locally using MAS "chat" data string + user message.
                function buildChatPrompt(dataString, userMessage) {
                const system = [
                        'You are a concise, professional AML assistant embedded in SAS Visual Analytics.',
                        'Answer ONLY using the Data section below; if a detail is not in Data, say it is not available.',
                        'Keep responses short and actionable (2–6 bullet points or 1 brief paragraph).',
                        'Avoid speculation; do not invent numbers, parties, or transactions.',
                        'If useful, propose next steps a human analyst can take.',
                        `Alert ID: ${ALERT_ID || 'unknown'}`
                        ].join(' ');

                        return [
                        `SYSTEM:\n${system}`,
                        `DATA:\n${trimChars(dataString, 7000)}`,
                        `USER:\n${userMessage}`,
                        'ASSISTANT:'
                        ].join('\n\n');
                }

                async function chatQuery(userText) {
                // Ensure we have an ALERT_ID (VA or URL)
                if (!ALERT_ID) {
                addMessage('bot', '<em>Waiting for Alert ID from Visual Analytics…</em>');
                await alertIdReady;
                }

                const csrf = await getCsrfToken();
                if (!csrf) throw new Error('CSRF token missing');

                const payload = { 
                inputs: [
                { name: "ALERT_ID_", value: ALERT_ID },
                { name: "SUMMARY_OR_CHAT_", value: "chat" }
                ] 
                };

                const masRes = await fetch(MODULE_URI, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrf },
                credentials: 'include',
                body: JSON.stringify(payload)
                });

                const masText = await masRes.text();
                if (!masRes.ok) throw new Error(`${masRes.status} ${masRes.statusText}\n${masText.slice(0, 500)}`);

                let masJson; try { masJson = JSON.parse(masText); } catch { throw new Error('MAS returned non-JSON'); }
                const out = outputsToMap(masJson.outputs);
                const dataString = out['systemPrompt'] || ''; // <-- your MAS returns the raw data here
                const openaiKey  = out['key'];

                if (!openaiKey) throw new Error('OpenAI API key not found in MAS output');

                const prompt = buildChatPrompt(dataString, userText);
                const reply  = await callOpenAI(prompt, openaiKey, OPENAI_CHAT_MODEL);
                return reply.trim();
                }

                async function callOpenAI(systemPrompt, apiKey, chosen_model = OPENAI_CHAT_MODEL) {
                        const body = {
                                model: chosen_model,
                                input: systemPrompt,
                                reasoning: { effort: "medium" },
                                text: { verbosity: "low" }
                        };
                        const res = await fetch(OPENAI_URL, {
                                method: 'POST',
                                headers: {
                                        'Accept': 'application/json',
                                        'Content-Type': 'application/json',
                                        'Authorization': `Bearer ${apiKey}`
                                },
                                body: JSON.stringify(body)
                        });
                        const json = await res.json().catch(() => ({}));
                        if (!res.ok) throw new Error(`${res.status} ${res.statusText}\n${JSON.stringify(json).slice(0, 500)}`);
                        const txt = extractOpenAIText(json);
                        if (!txt) throw new Error('LLM returned no text payload');
                        return txt;
                }

                // ===== Main action =====
                async function summarize() {
                        // Wait until VA supplies the alert id (or URL fallback)
                        if (!ALERT_ID) {
                        renderWorking('Waiting for Alert ID from Visual Analytics');
                        await alertIdReady;
                        }
                        console.log(`[id] summarize() with ALERT_ID=${ALERT_ID} (source=${ALERT_ID_SOURCE})`);
                        
                        summarizeBtn.disabled = true;
                        summarizeBtn.classList.add('loading');
                        summarizeBtn.setAttribute('aria-busy', 'true');

                        const loadingMessages = [
                        // Serious
                        "Investigating suspicious activity",
                        "Connecting the dots between transactions",
                        "Cross-referencing KYC data",
                        "Scanning network relationships",
                        "Following the money trail",
                        "Reviewing scenario triggers",
                        "Generating advanced insights",
                        "Running enhanced due diligence protocols",
                        "Finding patterns no human could see",
                        "Hunting for needle-in-a-haystack transfers",
                        "Checking for unusual velocity spikes",
                        "Sifting through transaction histories",
                        "Raising potential red flags",
                        "Flagging politically exposed persons",
                        "Analyzing cash structuring patterns",
                        "Verifying source of funds",

	                 // Fun
                        "Searching mattress stores (politely)",
                        "Following the breadcrumbs",
                        "Checking today's horoscope",
                        "Patrolling the data streets at night",
                        "With great power comes great compliance responsibility – Uncle Ben",
                        "I’m gonna make him an offer he can’t explain to compliance – The Godfather",
                        "May the fraud be with you – Star Wars",
                        "Looking for the usual suspects",
                        "Elementary, my dear Watson... the account is offshore – Sherlock Holmes",
                        "The name’s Bond... Transaction Bond – James Bond",
                        "Houston, we have a suspicious transfer – Apollo 13",
                        "Winter is coming... for fraudsters – Game of Thrones",
                        "Binge-watching transaction histories"
                        ];

                        // shuffle once, then cycle
                        const shuffledMessages = [...loadingMessages].sort(() => Math.random() - 0.5);
                        let msgIndex = 0;
                        const ROTATE_MS = 4000; // slower pace

                        renderWorking(shuffledMessages[msgIndex]);
                        const timer = setInterval(() => {
                        msgIndex = (msgIndex + 1) % shuffledMessages.length;
                        renderWorking(shuffledMessages[msgIndex]);
                        }, ROTATE_MS);

                        try {
                                // 1) Get CSRF + call MAS for prompt + key
                                const csrf = await getCsrfToken();
                                if (!csrf) throw new Error('CSRF token not available. Log in to SAS in this browser to solve.');

                                const payload = { inputs: [{ name: "ALERT_ID_", value: ALERT_ID }, { name: "SUMMARY_OR_CHAT_", value: 'summary' } ] };
                                const masRes = await fetch(MODULE_URI, {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrf },
                                        credentials: 'include',
                                        body: JSON.stringify(payload)
                                });

                                const masText = await masRes.text();
                                if (!masRes.ok) throw new Error(`${masRes.status} ${masRes.statusText}\n${masText.slice(0, 500)}`);

                                let masJson; try { masJson = JSON.parse(masText); } catch { throw new Error('Non-JSON response from MAS'); }
                                const out = outputsToMap(masJson.outputs);
                                const systemPrompt = out['systemPrompt'];
                                const openaiKey = out['key'];
                                const cutoff = out['CUTOFF_DATE'];

                                if (!systemPrompt) throw new Error('MAS output "systemPrompt" not found');
                                if (!openaiKey) throw new Error('MAS output "key" (OpenAI API key) not found');

                                // 2) Call OpenAI with MAS-provided key
                                const llmText = await callOpenAI(systemPrompt, openaiKey, OPENAI_SUMMARY_MODEL);

                                // 3) Render as HTML (LLM returns HTML with <h1>, <h2>, <ul>, etc.)
                                summaryEl.innerHTML = `${llmText}${cutoff ? `<div class="cutoff">${cutoff}</div>` : ''}`;
                        } catch (e) {
                                summaryEl.textContent = `Error:\n${e.message}`;
                                console.error(e);
                        } finally {
                                clearInterval(timer);
                                summarizeBtn.disabled = false;
                                summarizeBtn.classList.remove('loading');
                                summarizeBtn.setAttribute('aria-busy', 'false');
                        }
                }

                function saveComment() {
                        const key = 'aml-summary-comments';
                        const existing = JSON.parse(localStorage.getItem(key) || '[]');
                        const entry = { ts: new Date().toISOString(), alertId: ALERT_ID, comment: commentsEl.value.trim(), summary: summaryEl.textContent.trim() };
                        if (!entry.comment) { showToast('Nothing to save'); return; }
                        existing.push(entry); localStorage.setItem(key, JSON.stringify(existing)); showToast('Comment saved locally');
                }
                function clearComment() { commentsEl.value = ''; commentsEl.dispatchEvent(new Event('input')); showToast('Cleared'); }

                document.getElementById('summarizeBtn').addEventListener('click', summarize);
                saveBtn.addEventListener('click', saveComment);
                clearBtn.addEventListener('click', clearComment);

                // === CHATBOT ===
                const chatMessages = document.getElementById('chatMessages');
                const chatText = document.getElementById('chatText');
                const chatSendBtn = document.getElementById('chatSendBtn');

                function addMessage(role, html) {
                const wrap = document.createElement('div');
                wrap.className = 'msg ' + role;
                const bubble = document.createElement('div');
                bubble.className = 'bubble';
                bubble.innerHTML = html;
                wrap.appendChild(bubble);
                chatMessages.appendChild(wrap);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                }

                function showBotThinking() {
                const wrap = document.createElement('div');
                wrap.className = 'msg bot';
                const bubble = document.createElement('div');
                bubble.className = 'bubble';
                bubble.innerHTML = `<span class="typing">Thinking<span class="dots"><i></i><i></i><i></i></span></span>`;
                wrap.appendChild(bubble);
                chatMessages.appendChild(wrap);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                return () => { wrap.remove(); };
                }

                async function handleSend() {
                        const text = chatText.value.trim();
                        if (!text) return;

                        addMessage('user', escapeHtml(text));
                        chatText.value = '';
                        chatSendBtn.disabled = true;

                        const stopThinking = showBotThinking();
                        try {
                        const reply = await chatQuery(text);
                        addMessage('bot', escapeHtml(reply).replace(/\n/g, '<br>'));
                        } catch (e) {
                        addMessage('bot', `<em>Sorry, I couldn’t complete that: ${escapeHtml(e.message)}</em>`);
                        console.error('[chat] error:', e);
                        } finally {
                        stopThinking();
                        chatSendBtn.disabled = false;
                        chatText.focus();
                        }
                }


                // Enter to send (Shift+Enter to add a newline later if you switch to a textarea)
                chatSendBtn.addEventListener('click', handleSend);
                chatText.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSend();
                }
                });

                // Seed with a welcome message
                addMessage('bot', `Hi! I’m a helpful chatbot. Ask anything about the summary above and I’ll reply with a sample response.`);

        </script>
</body>

</html>
