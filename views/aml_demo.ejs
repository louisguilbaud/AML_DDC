<!DOCTYPE html>
<html lang="en">

<head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <title>Alert Summarizer</title>
        <script src="./javascripts/sas/util/messagingUtil.js"></script>
        <style>
                :root {
                        --bg: #fff;
                        --fg: #1d1d1f;
                        --muted: #6e6e73;
                        --card: #fff;
                        --border: rgba(0, 0, 0, .08);
                        --primary: #0478CE;
                        --primary-press: #0366AF;
                        --content-indent: 14px;
                        --primary-soft: #E8F3FF;
                        --grey-soft: #fafafa;
                }

                * {
                        box-sizing: border-box
                }

                html,
                body {
                        height: 100%
                }

                body {
                        margin: 0;
                        background: var(--bg);
                        color: var(--fg);
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, system-ui
                }

                .container {
                        width: min(96vw, 1440px);
                        max-width: 1440px;
                        margin: 2vh auto 8vh;
                        padding: 0 24px;
                        max-width: 1440px;
                }

                .card {
                        background: var(--card);
                        border: 1px solid var(--border);
                        border-radius: 24px;
                        box-shadow: 0 1px 2px rgba(0, 0, 0, .04), 0 8px 30px rgba(0, 0, 0, .06);
                        padding: 32px;
                        display: grid;
                        gap: 18px
                }

                .header {
                        display: flex;
                        justify-content: space-between;
                        align-items: flex-start;
                        gap: 12px
                }

                h1 {
                        margin: 0 0 6px 0;
                        font-size: 28px;
                        font-weight: 650;
                        letter-spacing: -.02em
                }

                .subtitle {
                        margin: 0;
                        color: var(--muted);
                        font-size: 14px
                }

                .row {
                        display: flex;
                        gap: 10px;
                        align-items: center
                }

                button {
                        appearance: none;
                        border: none;
                        cursor: pointer;
                        font-family: inherit
                }

                .btn-primary {
                        background: var(--primary);
                        color: #fff;
                        border-radius: 14px;
                        padding: 12px 18px;
                        font-size: 16px;
                        font-weight: 600;
                        box-shadow: 0 6px 18px rgba(0, 122, 255, .25);
                        transition: transform .06s, box-shadow .2s, filter .2s
                }

                .btn-primary:hover {
                        filter: brightness(1.02)
                }

                .btn-primary:active {
                        transform: scale(.985)
                }

                .btn-primary:disabled {
                        opacity: .65;
                        cursor: not-allowed;
                        box-shadow: none
                }

                .btn-secondary {
                        background: var(--grey-soft);
                        color: var(--fg);
                        border-radius: 14px;
                        padding: 10px 16px;
                        font-size: 14px;
                        font-weight: 600
                }

                .btn-secondary:hover {
                        filter: brightness(.97)
                }

                .btn-secondary:active {
                        filter: brightness(.94)
                }

                .spinner {
                        width: 16px;
                        height: 16px;
                        border: 2px solid rgba(255, 255, 255, .6);
                        border-top-color: #fff;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                        display: none
                }

                @keyframes spin {
                        to {
                                transform: rotate(360deg)
                        }
                }

                .loading .spinner {
                        display: inline-block
                }

                .loading .labeltext {
                        display: none
                }

                .label {
                        font-size: 12px;
                        text-transform: uppercase;
                        letter-spacing: .08em;
                        color: var(--muted);
                        margin-bottom: 8px;
                        padding-left: var(--content-indent);
                }

                /* visually hidden label for a11y */
                .sr-only {
                        position: absolute;
                        width: 1px;
                        height: 1px;
                        padding: 0;
                        margin: -1px;
                        overflow: hidden;
                        clip: rect(0, 0, 0, 0);
                        white-space: nowrap;
                        border: 0;
                }

                /* compact select styled like your secondary buttons */
                .select-model {
                        background: var(--grey-soft);
                        color: var(--fg);
                        border: none;
                        border-radius: 14px;
                        padding: 10px 12px;
                        font-size: 14px;
                        font-weight: 600;
                }

                .select-model:disabled {
                        opacity: .65;
                        cursor: not-allowed;
                }

                .summary {
                        border: 1px solid var(--border);
                        border-radius: 14px;
                        background: var(--grey-soft);
                        padding: 14px;
                        min-height: 140px;
                        white-space: normal;
                        font-size: 14px
                }

                .summary h1 {
                        font-size: 24px;
                        margin: 0 0 8px
                }

                .summary h2 {
                        font-size: 18px;
                        margin: 14px 0 6px
                }

                .summary p {
                        margin: 6px 0
                }

                .summary ul {
                        margin: 6px 0 6px 18px;
                        padding-left: 14px
                }

                .summary li {
                        margin: 3px 0
                }

                .summary .cutoff {
                        margin-top: 10px;
                        font-size: 12px;
                        color: var(--muted)
                }

                textarea {
                        width: 100%;
                        min-height: 120px;
                        resize: vertical;
                        padding: 14px 14px;
                        border-radius: 16px;
                        border: 1px solid rgba(0, 0, 0, .12);
                        background: #fff;
                        outline: none;
                        line-height: 1.5;
                        overflow: hidden;
                        resize: none
                }

                textarea:focus {
                        border-color: var(--primary-press);
                        box-shadow: 0 0 0 4px rgba(10, 132, 255, .12)
                }

                .caption {
                        font-size: 12px;
                        color: var(--muted)
                }

                .toast {
                        position: fixed;
                        left: 50%;
                        bottom: 24px;
                        transform: translateX(-50%) translateY(20px);
                        background: #111;
                        color: #fff;
                        padding: 10px 14px;
                        border-radius: 999px;
                        box-shadow: 0 10px 30px rgba(0, 0, 0, .25);
                        opacity: 0;
                        pointer-events: none;
                        transition: transform .35s, opacity .35s
                }

                .toast.show {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0)
                }

                .working {
                        display: inline-flex;
                        align-items: center;
                        gap: 6px;
                        color: var(--muted);
                        font-weight: 600
                }

                .working .dots {
                        display: inline-flex;
                        gap: 4px;
                        margin-left: 2px
                }

                .working .dots i {
                        width: 6px;
                        height: 6px;
                        border-radius: 50%;
                        background: var(--muted);
                        opacity: .25;
                        animation: dotpulse 1s ease-in-out infinite
                }

                .working .dots i:nth-child(2) {
                        animation-delay: .2s
                }

                .working .dots i:nth-child(3) {
                        animation-delay: .4s
                }

                @keyframes dotpulse {

                        0%,
                        100% {
                                transform: translateY(0);
                                opacity: .25
                        }

                        50% {
                                transform: translateY(-3px);
                                opacity: 1
                        }
                }

                .skel {
                        display: grid;
                        gap: 8px;
                        margin-top: 10px
                }

                .skel .line {
                        height: 10px;
                        border-radius: 6px;
                        background: linear-gradient(90deg, #ececec, #f7f7f7, #ececec);
                        background-size: 200% 100%;
                        animation: shimmer 1.2s linear infinite
                }

                @keyframes shimmer {
                        0% {
                                background-position: 200% 0
                        }

                        100% {
                                background-position: -200% 0
                        }
                }

                #charCount {
                        margin-left: var(--content-indent);
                }

                .header>div:first-child {
                        padding-left: var(--content-indent);
                }

                /* === CHATBOT === */
                .chat {
                        border: 1px solid var(--border);
                        border-radius: 14px;
                        background: var(--grey-soft);
                        padding: 14px;
                        display: flex;
                        flex-direction: column;
                        gap: 10px;
                }

                .chat-messages {
                        min-height: 273px;
                        max-height: clamp(360px, 55vh, 720px);
                        overflow: auto;
                        display: grid;
                        gap: 10px;
                        padding-right: 4px;
                        align-content: start;
                        /* don't stretch grid tracks */
                        align-items: start;
                        /* don't stretch items */
                        grid-auto-rows: max-content;
                }

                .msg {
                        display: flex;
                }

                .msg .bubble {
                        border: 1px solid var(--border);
                        background: #f7f7f7;
                        color: var(--fg);
                        padding: 10px 12px;
                        border-radius: 14px 14px 4px 14px;
                        font-size: 14px;
                        line-height: 1.35;
                        max-width: 72%;
                        box-shadow: 0 1px 2px rgba(0, 0, 0, .04);
                }

                /* Bot bubble: white on gray background */
                .msg.bot .bubble {
                        background: #fff;
                        color: var(--fg);
                        border-color: var(--border);
                }

                .msg.user {
                        justify-content: flex-end;
                }

                .msg.user .bubble {
                        background: var(--primary-soft);
                        color: var(--fg);
                        border-color: var(--border);
                        border-radius: 14px 14px 14px 4px;
                }

                .chat-input {
                        display: flex;
                        gap: 8px;
                }

                #chatText {
                        flex: 1;
                        border: 1px solid rgba(0, 0, 0, .12);
                        border-radius: 14px;
                        padding: 12px 14px;
                        font: inherit;
                        outline: none;
                }

                #chatText:focus {
                        border-color: var(--primary-press);
                        box-shadow: 0 0 0 4px rgba(10, 132, 255, .12);
                }

                .typing {
                        display: inline-flex;
                        align-items: center;
                        gap: 6px;
                }

                .typing .dots {
                        display: inline-flex;
                        gap: 4px;
                }

                .typing .dots i {
                        width: 6px;
                        height: 6px;
                        border-radius: 50%;
                        background: var(--muted);
                        opacity: .35;
                        animation: dotpulse 1s ease-in-out infinite;
                }

                .typing .dots i:nth-child(2) {
                        animation-delay: .2s;
                }

                .typing .dots i:nth-child(3) {
                        animation-delay: .4s;
                }

                input,
                textarea,
                button,
                select {
                        font-family: inherit;
                        font-size: inherit;
                }

                #comments {
                        font-size: 14px;
                }

                /* --- view toggle + panes --- */
                .viewtoggle {
                        position: relative;
                        display: flex;
                        align-items: center;
                        gap: 0;
                        width: 200px;
                        height: 36px;
                        padding: 4px;
                        border-radius: 999px;
                        background: var(--grey-soft);
                        border: 1px solid var(--border);
                        font-weight: 600;
                        user-select: none;
                        cursor: pointer;
                }

                .viewtoggle .label {
                        flex: 1;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 13px;
                        margin: 0;
                        /* reset global .label margin */
                        padding: 0;
                        /* reset global .label padding-left */
                        text-transform: none;
                        /* stop UPPERCASE */
                        letter-spacing: 0;
                        /* reset tracking */
                        line-height: 1;
                        /* consistent vertical centering */
                        color: var(--muted);
                        position: relative;
                        z-index: 1;
                        /* sit above the pill */
                }

                /* --- ACTIVE LABEL COLOR (white over the blue pill) --- */
                .card:not(.show-chat) .viewtoggle .label:first-child,
                .card.show-chat .viewtoggle .label:nth-child(2) {
                        color: #fff !important;
                }

                /* --- SPACE BELOW THE SUMMARY BOX --- */
                #pane-summary .summary {
                        margin-bottom: 20px;
                        /* add some space before the COMMENTS title */
                }


                .viewtoggle .pill {
                        position: absolute;
                        top: 4px;
                        left: 4px;
                        height: 28px;
                        width: calc(50% - 4px);
                        border-radius: 999px;
                        background: var(--primary);
                        box-shadow: 0 6px 18px rgba(0, 122, 255, .25);
                        transition: transform .2s;
                        z-index: 0;
                        /* behind labels */
                        pointer-events: none;
                        /* decorative only */
                }

                /* compact bouncing dots next to "Summary" */
                .viewtoggle .mini-dots {
                        display: none;
                        margin-left: 4px;
                        gap: 3px;
                        align-items: center;
                }

                .viewtoggle .mini-dots i {
                        width: 4px;
                        /* smaller dots */
                        height: 4px;
                        /* smaller dots */
                        border-radius: 50%;
                        background: currentColor;
                        opacity: .35;
                        animation: dotpulse 1s ease-in-out infinite;
                        /* reuse existing animation */
                }

                .viewtoggle .mini-dots i:nth-child(2) {
                        animation-delay: .2s;
                }

                .viewtoggle .mini-dots i:nth-child(3) {
                        animation-delay: .4s;
                }

                /* show dots ONLY during summarizing AND when Chat view is selected */
                .card.show-chat .viewtoggle.is-summarizing .mini-dots {
                        display: inline-flex;
                }

                /* slide right when chat is active */
                .card.show-chat .viewtoggle .pill {
                        transform: translateX(100%);
                }

                .card.show-chat #summarizeBtn {
                        display: none;
                }

                /* show only one pane at a time */
                #pane-chat {
                        display: none;
                }

                .card.show-chat #pane-chat {
                        display: block;
                }

                .card.show-chat #pane-summary {
                        display: none;
                }

                .card.show-chat::after {
                        content: "Generative AI can make mistakes. Check important info.";
                        display: block;
                        margin-top: 7px;
                        font-size: 13px;
                        color: var(--muted);
                        text-align: center;
                }

                .disclaimer-inline {
                        position: absolute;
                        left: 0;
                        right: 0;
                        text-align: center;
                        font-size: 11px;
                        color: var(--muted);
                        pointer-events: none;
                }

                /* ===== font bump (minimal) ===== */
                :root {
                        --fs: 1.08;
                }

                /* 8% larger; try 1.05–1.12 */

                body {
                        font-size: calc(16px * var(--fs));
                }

                h1 {
                        font-size: calc(28px * var(--fs));
                }

                .subtitle {
                        font-size: calc(14px * var(--fs));
                }

                .btn-primary {
                        font-size: calc(16px * var(--fs));
                }

                .btn-secondary,
                .select-model {
                        font-size: calc(14px * var(--fs));
                }

                .label,
                .caption {
                        font-size: calc(12px * var(--fs));
                }

                .summary {
                        font-size: calc(14px * var(--fs));
                }

                .summary h1 {
                        font-size: calc(24px * var(--fs));
                }

                .summary h2 {
                        font-size: calc(18px * var(--fs));
                }

                .msg .bubble {
                        font-size: calc(14px * var(--fs));
                }

                #comments,
                #chatText {
                        font-size: calc(14px * var(--fs));
                }

                .viewtoggle .label {
                        font-size: calc(14px * var(--fs));
                }
        </style>
</head>

<body>
        <div class="container">
                <div class="card" role="region" aria-labelledby="title">
                        <div class="header">
                                <div>
                                        <h1 id="title">Alert Summarizer</h1>
                                        <p class="subtitle">Generate a concise summary with one click.</p>
                                </div>
                                <div class="row">
                                        <div id="viewToggle" class="viewtoggle" role="switch" aria-checked="false">
                                                <span class="label">Summary<span class="mini-dots"
                                                                aria-hidden="true"><i></i><i></i><i></i></span></span>
                                                <span class="label">Chat</span>
                                                <span id="togglePill" class="pill" aria-hidden="true"></span>
                                        </div>
                                </div>
                        </div>
                        <div id="pane-summary">
                                <div>
                                        <div class="label">Summary</div>
                                        <div id="summary" class="summary" role="region" aria-live="polite">Press
                                                “Summarize” to
                                                generate a concise alert summary.</div>
                                </div>

                                <div class="row" style="justify-content:flex-end;margin-top:8px">
                                        <label for="modelSelect" class="sr-only">Model</label>
                                        <select id="modelSelect" class="select-model" aria-label="Model">
                                                <option value="gpt-5-nano" selected>GPT-5 nano</option>
                                                <option value="gpt-5-mini">GPT-5 mini</option>
                                                <option value="gpt-5">GPT-5</option>

                                        </select>

                                        <button id="summarizeBtn" class="btn-primary" aria-busy="false">
                                                <span class="spinner" aria-hidden="true"></span>
                                                <span class="labeltext">Summarize</span>
                                        </button>
                                </div>

                                <div>
                                        <div class="label">Comments</div>
                                        <textarea id="comments"
                                                placeholder="Add comments on the generated response and the alert in general…"></textarea>
                                        <div class="row" style="justify-content:space-between;margin-top:8px">
                                                <span id="charCount" class="caption">0 / 2000</span>
                                                <span class="caption disclaimer-inline">Generative AI can make mistakes.
                                                        Check important info.</span>
                                                <div class="row">
                                                        <button id="clearBtn" class="btn-secondary"
                                                                type="button">Clear</button>
                                                        <button id="saveBtn" class="btn-secondary" type="button">Save
                                                                Comment</button>
                                                </div>
                                        </div>
                                </div>
                        </div>

                        <!-- Chatbot -->
                        <div id="pane-chat">
                                <div>
                                        <div class="label">Chat</div>
                                        <div class="chat" id="chat">
                                                <div id="chatMessages" class="chat-messages" role="region"
                                                        aria-live="polite">
                                                </div>
                                                <div class="chat-input">
                                                        <input id="chatText" type="text"
                                                                placeholder="Ask any question about this alert…" />
                                                        <button id="chatSendBtn" class="btn-primary" type="button"
                                                                disabled>Send</button>
                                                </div>
                                        </div>
                                </div>
                        </div>

                </div>
        </div>

        <div id="toast" class="toast" role="status" aria-live="polite">Saved</div>

        <script>
                /**
                 * AML Alert Summarizer & Chat Application
                 * 
                 * This application provides AI-powered analysis of AML alerts through:
                 * - Summary generation using OpenAI models
                 * - Interactive chat for detailed alert exploration
                 * - Integration with SAS MAS for alert data retrieval
                 */

                // ===== CONFIGURATION =====
                /**
                 * Application configuration constants
                 */
                const CONFIG = {
                        // SAS MAS Integration
                        MODULE_URI: '/microanalyticScore/modules/aml_demo_prompt_building1_1/steps/execute',
                        CSRF_PRIMER_URL: '/microanalyticScore/modules',

                        // OpenAI API Configuration
                        OPENAI_URL: 'https://api.openai.com/v1/responses',
                        OPENAI_SUMMARY_MODEL: 'gpt-5-mini',
                        OPENAI_CHAT_MODEL: 'gpt-5-mini',

                        // UI Configuration
                        COMMENT_LIMIT: 2000,
                        LOADING_MESSAGE_ROTATION_MS: 4000,
                        TOAST_DURATION_MS: 1400,
                        CHAT_HISTORY_LIMIT: 6,

                        // Text Processing
                        MAX_CHAR_LIMIT: 8000,
                        CHAT_HISTORY_CONTEXT_LIMIT: 2000,
                        DATA_STRING_LIMIT: 7000
                };

                // ===== STATE MANAGEMENT =====
                /**
                 * Application state container
                 */
                const AppState = {
                        // Alert Management
                        alertId: null,
                        alertIdSource: 'unset',
                        alertIdReady: null,
                        resolveAlertIdReady: null,

                        // Cache Management
                        summaryCache: null,
                        chatCache: null,
                        summaryMasPromise: null,
                        chatMasPromise: null,

                        // Chat System
                        chatHistory: [], // stores { role: 'user' | 'assistant', content: string }
                        chatBusy: false,

                        // UI State
                        isInitialized: false
                };

                // Initialize alert ID promise
                AppState.alertIdReady = new Promise(r => (AppState.resolveAlertIdReady = r));
                console.log('[id] init: waiting for alert id (from VA or URL)');

                // ===== UTILITY FUNCTIONS =====
                /**
                 * Collection of utility functions for common operations
                 */
                const Utils = {
                        /**
                         * Promise that resolves on next animation frame
                         * @returns {Promise<void>}
                         */
                        nextFrame: () => new Promise(requestAnimationFrame),

                        /**
                         * Escapes HTML characters to prevent XSS
                         * @param {string} s - String to escape
                         * @returns {string} Escaped string
                         */
                        escapeHtml: (s) => {
                                return s.replace(/[&<>"']/g, m => ({
                                        "&": "&amp;",
                                        "<": "&lt;",
                                        ">": "&gt;",
                                        "\"": "&quot;",
                                        "'": "&#39;"
                                }[m]));
                        },

                        /**
                         * Trims text to specified character limit
                         * @param {string} s - String to trim
                         * @param {number} max - Maximum characters (default: 8000)
                         * @returns {string} Trimmed string
                         */
                        trimChars: (s, max = CONFIG.MAX_CHAR_LIMIT) => {
                                if (!s) return '';
                                return s.length <= max ? s : (s.slice(0, max) + '\n[...trimmed]');
                        },

                        /**
                         * Converts MAS outputs array to key-value map
                         * @param {Array} outputs - MAS outputs array
                         * @returns {Object} Key-value mapping
                         */
                        outputsToMap: (outputs) => {
                                const m = {};
                                (outputs || []).forEach(o => m[o.name] = o.value);
                                return m;
                        },

                        /**
                         * Extracts text content from OpenAI response
                         * @param {Object} j - OpenAI response JSON
                         * @returns {string|null} Extracted text or null
                         */
                        extractOpenAIText: (j) => {
                                if (j && typeof j.output_text === 'string' && j.output_text.trim()) return j.output_text;
                                if (Array.isArray(j?.output)) {
                                        for (const item of j.output) {
                                                const content = item?.content;
                                                if (Array.isArray(content)) {
                                                        for (const c of content) {
                                                                if (typeof c?.text === 'string' && c.text.trim()) return c.text;
                                                                if (c?.type === 'output_text' && c?.text) return c.text;
                                                        }
                                                }
                                        }
                                }
                                if (j?.choices?.[0]?.message?.content) return j.choices[0].message.content;
                                return null;
                        }
                };

                // ===== DOM REFERENCES =====
                /**
                 * Centralized DOM element references
                 */
                const DOMElements = {
                        // Summary View Elements
                        summarizeBtn: document.getElementById('summarizeBtn'),
                        summaryEl: document.getElementById('summary'),
                        commentsEl: document.getElementById('comments'),
                        charCountEl: document.getElementById('charCount'),
                        saveBtn: document.getElementById('saveBtn'),
                        clearBtn: document.getElementById('clearBtn'),
                        modelSelect: document.getElementById('modelSelect'),

                        // Chat View Elements
                        chatMessages: document.getElementById('chatMessages'),
                        chatText: document.getElementById('chatText'),
                        chatSendBtn: document.getElementById('chatSendBtn'),

                        // View Toggle Elements
                        cardEl: document.querySelector('.card'),
                        titleEl: document.getElementById('title'),
                        subtitleEl: document.querySelector('.subtitle'),
                        toggleEl: document.getElementById('viewToggle'),

                        // Notification Elements
                        toast: document.getElementById('toast')
                };

                // Initialize UI - disable summarize button until alert ID is ready
                DOMElements.summarizeBtn.disabled = true;

                // ===== API SERVICE LAYER =====
                /**
                 * API service for handling external API communications
                 */
                const ApiService = {
                        /**
                         * Retrieves CSRF token for secure API calls
                         * @returns {Promise<string>} CSRF token
                         */
                        async getCsrfToken() {
                                const res = await fetch(CONFIG.CSRF_PRIMER_URL, {
                                        method: 'GET',
                                        credentials: 'include'
                                });
                                return res.headers.get('X-CSRF-TOKEN') || res.headers.get('x-csrf-token') || '';
                        },

                        /**
                         * Fetches summary data from SAS MAS module
                         * @returns {Promise<Object>} Summary cache object with systemPrompt, key, and cutoff
                         */
                        async prefetchSummary() {
                                await AppState.alertIdReady;
                                const csrf = await this.getCsrfToken();
                                const payload = {
                                        inputs: [
                                                { name: "ALERT_ID_", value: AppState.alertId },
                                                { name: "SUMMARY_OR_CHAT_", value: "summary" }
                                        ]
                                };

                                const res = await fetch(CONFIG.MODULE_URI, {
                                        method: 'POST',
                                        headers: {
                                                'Content-Type': 'application/json',
                                                'X-CSRF-TOKEN': csrf
                                        },
                                        credentials: 'include',
                                        body: JSON.stringify(payload)
                                });

                                const out = Utils.outputsToMap(JSON.parse(await res.text()).outputs);
                                console.log("MAS mapped outputs:", out);

                                AppState.summaryCache = {
                                        systemPrompt: out['systemPrompt'],
                                        key: out['key'],
                                        cutoff: out['CUTOFF_DATE']
                                };

                                console.log('[id] summaryCache ', AppState.summaryCache);
                                return AppState.summaryCache;
                        },

                        /**
                         * Fetches chat data from SAS MAS module
                         * @returns {Promise<Object>} Chat cache object with dataString and key
                         */
                        async prefetchChat() {
                                await AppState.alertIdReady;
                                const csrf = await this.getCsrfToken();
                                const payload = {
                                        inputs: [
                                                { name: "ALERT_ID_", value: AppState.alertId },
                                                { name: "SUMMARY_OR_CHAT_", value: "chat" }
                                        ]
                                };

                                const res = await fetch(CONFIG.MODULE_URI, {
                                        method: 'POST',
                                        headers: {
                                                'Content-Type': 'application/json',
                                                'X-CSRF-TOKEN': csrf
                                        },
                                        credentials: 'include',
                                        body: JSON.stringify(payload)
                                });

                                const out = Utils.outputsToMap(JSON.parse(await res.text()).outputs);
                                AppState.chatCache = {
                                        dataString: out['systemPrompt'] || '',
                                        key: out['key']
                                };
                                return AppState.chatCache;
                        },

                        /**
                         * Initiates prefetching of both summary and chat data
                         */
                        startPrefetch() {
                                if (!AppState.summaryMasPromise) {
                                        AppState.summaryMasPromise = this.prefetchSummary().catch(e => {
                                                console.error('[prefetch summary]', e);
                                                AppState.summaryMasPromise = null;
                                                throw e;
                                        });
                                }

                                if (!AppState.chatMasPromise) {
                                        AppState.chatMasPromise = (AppState.summaryMasPromise || this.prefetchSummary())
                                                .then(() => this.prefetchChat())
                                                .catch(e => {
                                                        console.error('[prefetch chat]', e);
                                                        AppState.chatMasPromise = null;
                                                        throw e;
                                                });
                                }
                        },

                        /**
                         * Calls OpenAI API with support for streaming
                         * @param {string} systemPrompt - The prompt to send
                         * @param {string} apiKey - OpenAI API key
                         * @param {string} chosenModel - Model to use
                         * @param {Function} onDelta - Optional streaming callback
                         * @returns {Promise<string>} Response text
                         */
                        async callOpenAI(systemPrompt, apiKey, chosenModel = CONFIG.OPENAI_CHAT_MODEL, onDelta) {
                                const body = {
                                        model: chosenModel,
                                        input: systemPrompt,
                                        reasoning: { effort: "medium" },
                                        text: { verbosity: "low" },
                                        stream: !!onDelta
                                };

                                const res = await fetch(CONFIG.OPENAI_URL, {
                                        method: 'POST',
                                        headers: {
                                                'Authorization': `Bearer ${apiKey}`,
                                                'Content-Type': 'application/json',
                                                'Accept': onDelta ? 'text/event-stream' : 'application/json'
                                        },
                                        body: JSON.stringify(body)
                                });

                                // Handle non-streaming response
                                if (!onDelta) {
                                        const json = await res.json().catch(() => ({}));
                                        if (!res.ok) {
                                                throw new Error(`${res.status} ${res.statusText}\n${JSON.stringify(json).slice(0, 500)}`);
                                        }
                                        const txt = Utils.extractOpenAIText(json);
                                        if (!txt) throw new Error('LLM returned no text payload');
                                        return txt;
                                }

                                // Handle streaming response (SSE)
                                return this._handleStreamingResponse(res, onDelta);
                        },

                        /**
                         * Handles Server-Sent Events streaming response from OpenAI
                         * @private
                         * @param {Response} res - Fetch response object
                         * @param {Function} onDelta - Streaming callback function
                         * @returns {Promise<string>} Complete response text
                         */
                        async _handleStreamingResponse(res, onDelta) {
                                if (!res.ok || !res.body) {
                                        const text = await res.text().catch(() => '');
                                        throw new Error(`${res.status} ${res.statusText}\n${text.slice(0, 500)}`);
                                }

                                const reader = res.body.getReader();
                                const decoder = new TextDecoder();
                                let carry = '';
                                let full = '';

                                while (true) {
                                        const { value, done } = await reader.read();
                                        if (done) break;

                                        carry += decoder.decode(value, { stream: true });

                                        // Split Server-Sent-Event frames
                                        const frames = carry.split('\n\n');
                                        carry = frames.pop() || '';

                                        for (const frame of frames) {
                                                // Concatenate all data: lines in the frame
                                                const dataLines = frame
                                                        .split('\n')
                                                        .filter(l => l.startsWith('data:'))
                                                        .map(l => l.slice(5).trim())
                                                        .join('\n');

                                                if (!dataLines || dataLines === '[DONE]') continue;

                                                let evt;
                                                try {
                                                        evt = JSON.parse(dataLines);
                                                } catch {
                                                        continue;
                                                }

                                                if (evt.type === 'response.output_text.delta') {
                                                        const delta = evt.delta || '';
                                                        if (delta) {
                                                                full += delta;
                                                                try {
                                                                        onDelta(delta, full, evt);
                                                                } catch {
                                                                        // Avoid breaking stream on callback errors
                                                                }
                                                        }
                                                } else if (evt.type === 'error') {
                                                        throw new Error(evt.error?.message || 'Streaming error');
                                                }
                                        }
                                }

                                return full.trim();
                        }
                };



                // ===== UI CONTROLLER =====
                /**
                 * UI controller for managing interface state and interactions
                 */
                const UIController = {
                        /**
                         * Loading messages for summary generation
                         */
                        loadingMessages: [
                                // Professional/serious messages
                                "Investigating suspicious activity",
                                "Connecting the dots between transactions",
                                "Cross-referencing KYC data",
                                "Scanning network relationships",
                                "Following the money trail",
                                "Reviewing scenario triggers",
                                "Generating advanced insights",
                                "Running enhanced due diligence protocols",
                                "Finding patterns no human could see",
                                "Hunting for needle-in-a-haystack transfers",
                                "Checking for unusual velocity spikes",
                                "Sifting through transaction histories",
                                "Raising potential red flags",
                                "Flagging politically exposed persons",
                                "Analyzing cash structuring patterns",
                                "Verifying source of funds",
                                // Fun/creative messages
                                "Searching mattress stores (politely)",
                                "Following the breadcrumbs",
                                "Checking today's horoscope",
                                "With great power comes great compliance responsibility – Uncle Ben",
                                "I'm gonna make him an offer he can't explain to compliance – The Godfather",
                                "May the fraud be with you – Star Wars",
                                "Looking for the usual suspects",
                                "Elementary, my dear Watson... the account is offshore – Sherlock Holmes",
                                "The name's Bond... Transaction Bond – James Bond",
                                "Houston, we have a suspicious transfer – Apollo 13",
                                "Winter is coming... for fraudsters – Game of Thrones",
                                "Binge-watching transaction histories",
                                "Taking a siesta"
                        ],

                        /**
                         * Auto-resizes textarea to fit content with debouncing for performance
                         * @param {HTMLElement} el - Textarea element to resize
                         */
                        autoResize(el) {
                                // Use requestAnimationFrame for better performance
                                requestAnimationFrame(() => {
                                        el.style.height = 'auto';
                                        el.style.height = el.scrollHeight + 'px';
                                });
                        },

                        /**
                         * Debounced version of auto-resize for high-frequency events
                         * @param {HTMLElement} el - Textarea element to resize
                         * @param {number} delay - Debounce delay in milliseconds
                         */
                        debouncedAutoResize: (() => {
                                let timeoutId;
                                return (el, delay = 16) => { // ~60fps
                                        clearTimeout(timeoutId);
                                        timeoutId = setTimeout(() => this.autoResize(el), delay);
                                };
                        })(),

                        /**
                         * Shows toast notification
                         * @param {string} msg - Message to display
                         */
                        showToast(msg) {
                                DOMElements.toast.textContent = msg;
                                DOMElements.toast.classList.add('show');
                                setTimeout(() => DOMElements.toast.classList.remove('show'), CONFIG.TOAST_DURATION_MS);
                        },

                        /**
                         * Renders working state with animated skeleton and rotating messages
                         * @param {string} message - Status message to display
                         */
                        renderWorking(message) {
                                DOMElements.summaryEl.innerHTML = `
                                        <div class="working">${message}<span class="dots"><i></i><i></i><i></i></span></div>
                                        <div class="skel">
                                                <div class="line" style="width:88%"></div>
                                                <div class="line" style="width:96%"></div>
                                                <div class="line" style="width:72%"></div>
                                        </div>`;
                        },

                        /**
                         * Sets up comment box auto-resize and character counting with performance optimizations
                         */
                        initializeCommentBox() {
                                // Auto-resize functionality with debouncing for better performance
                                DOMElements.commentsEl.addEventListener('input', () => {
                                        this.debouncedAutoResize(DOMElements.commentsEl);
                                });
                                window.addEventListener('load', () => this.autoResize(DOMElements.commentsEl));

                                // Character counting and limit enforcement with accessibility
                                DOMElements.commentsEl.addEventListener('input', () => {
                                        const currentLength = DOMElements.commentsEl.value.length;

                                        if (currentLength > CONFIG.COMMENT_LIMIT) {
                                                DOMElements.commentsEl.value = DOMElements.commentsEl.value.slice(0, CONFIG.COMMENT_LIMIT);
                                                // Announce to screen readers when limit is reached
                                                DOMElements.commentsEl.setAttribute('aria-describedby', 'charCount');
                                        }

                                        const finalLength = DOMElements.commentsEl.value.length;
                                        DOMElements.charCountEl.textContent = `${finalLength} / ${CONFIG.COMMENT_LIMIT}`;

                                        // Add warning class when approaching limit (accessibility)
                                        if (finalLength > CONFIG.COMMENT_LIMIT * 0.9) {
                                                DOMElements.charCountEl.classList.add('warning');
                                                DOMElements.charCountEl.setAttribute('aria-live', 'polite');
                                        } else {
                                                DOMElements.charCountEl.classList.remove('warning');
                                                DOMElements.charCountEl.removeAttribute('aria-live');
                                        }
                                });

                                // Initialize character count display
                                DOMElements.commentsEl.dispatchEvent(new Event('input'));

                                // Add proper ARIA labels for accessibility
                                DOMElements.commentsEl.setAttribute('aria-describedby', 'charCount');
                        },

                        /**
                         * Updates chat send button state based on input and busy status
                         */
                        refreshChatSendButton() {
                                const empty = DOMElements.chatText.value.trim().length === 0;
                                DOMElements.chatSendBtn.disabled = AppState.chatBusy || empty;
                        },

                        /**
                         * Toggles between Summary and Chat views
                         * @param {boolean} showChat - Whether to show chat view
                         */
                        setView(showChat) {
                                DOMElements.cardEl.classList.toggle('show-chat', showChat);
                                DOMElements.titleEl.textContent = showChat ? 'Alert Chat' : 'Alert Summarizer';
                                DOMElements.subtitleEl.textContent = showChat
                                        ? 'Converse with our chatbot for alert insights.'
                                        : 'Generate a concise summary with one click.';
                                DOMElements.toggleEl.setAttribute('aria-checked', showChat ? 'true' : 'false');
                        },

                        /**
                         * Sets loading state for summary button
                         * @param {boolean} isLoading - Whether button is in loading state
                         */
                        setSummaryButtonLoading(isLoading) {
                                DOMElements.summarizeBtn.disabled = isLoading;
                                DOMElements.summarizeBtn.classList.toggle('loading', isLoading);
                                DOMElements.summarizeBtn.setAttribute('aria-busy', isLoading.toString());
                        },

                        /**
                         * Sets loading state for view toggle
                         * @param {boolean} isLoading - Whether toggle is in loading state
                         */
                        setToggleLoading(isLoading) {
                                DOMElements.toggleEl.classList.toggle('is-summarizing', isLoading);
                                if (isLoading) {
                                        DOMElements.toggleEl.setAttribute('aria-busy', 'true');
                                } else {
                                        DOMElements.toggleEl.removeAttribute('aria-busy');
                                }
                        },

                        /**
                         * Creates rotating loading message timer
                         * @returns {Object} Timer object with interval ID and stop method
                         */
                        createLoadingMessageTimer() {
                                const shuffledMessages = [...this.loadingMessages].sort(() => Math.random() - 0.5);
                                let msgIndex = 0;

                                this.renderWorking(shuffledMessages[msgIndex]);

                                const intervalId = setInterval(() => {
                                        msgIndex = (msgIndex + 1) % shuffledMessages.length;
                                        this.renderWorking(shuffledMessages[msgIndex]);
                                }, CONFIG.LOADING_MESSAGE_ROTATION_MS);

                                return {
                                        intervalId,
                                        stop: () => clearInterval(intervalId)
                                };
                        },

                        /**
                         * Initializes all UI event listeners and components
                         */
                        initialize() {
                                if (AppState.isInitialized) return;

                                // Initialize comment box functionality
                                this.initializeCommentBox();

                                // Initialize chat send button state
                                this.refreshChatSendButton();
                                DOMElements.chatText.addEventListener('input', () => this.refreshChatSendButton());

                                // Set default view to Summary
                                this.setView(false);

                                AppState.isInitialized = true;
                        }
                };

                // ===== ALERT ID MANAGEMENT =====
                /**
                 * Alert ID management system
                 */
                const AlertManager = {
                        /**
                         * Initializes alert ID from URL parameter if available
                         */
                        initializeFromUrl() {
                                const urlAlertId = new URLSearchParams(location.search).get('alertId');
                                if (urlAlertId) {
                                        AppState.alertId = urlAlertId;
                                        AppState.alertIdSource = 'url';
                                        console.log('[id] Using URL parameter ?alertId=', AppState.alertId);
                                        AppState.resolveAlertIdReady?.(AppState.alertId);
                                        DOMElements.summarizeBtn.disabled = false;
                                        ApiService.startPrefetch();
                                        console.log('[id] summarizeBtn enabled (source=url)');
                                }
                        },

                        /**
                         * Sets up VA (Visual Analytics) message callback for alert ID
                         */
                        setupVACallback() {
                                if (!window.va?.messagingUtil?.setOnDataReceivedCallback) return;
                                va.messagingUtil.setOnDataReceivedCallback((vaMsgObj) => {
                                        const paramVal = vaMsgObj?.parameters?.[0]?.value;
                                        const dataVal = vaMsgObj?.data?.[0]?.[0];   // fallback path
                                        const candidate = paramVal ?? dataVal;
                                        if (candidate == null) return;

                                        AppState.alertId = String(candidate);
                                        AppState.alertIdSource = (paramVal != null) ? 'va-parameter' : 'va-data';
                                        AppState.resolveAlertIdReady?.(AppState.alertId);
                                        DOMElements.summarizeBtn.disabled = false;
                                        ApiService.startPrefetch();
                                });
                        }
                };

                // Alert ID callback setup handled by AlertManager

                // Legacy functions moved to UIController and Utils modules

                // ===== CHAT SYSTEM =====
                /**
                 * Chat system for handling interactive conversations about alerts
                 */
                const ChatManager = {
                        /**
                         * Builds chat system prompt using MAS data and conversation history
                         * @param {string} dataString - Alert data from MAS
                         * @param {string} userMessage - Current user message
                         * @param {Array} history - Chat history array
                         * @returns {string} Formatted prompt for OpenAI
                         */
                        buildChatPrompt(dataString, userMessage, history = []) {
                                const system = [
                                        'You are a concise, friendly AML assistant embedded in the SAS AML solution.',
                                        'Customer/alert-specific facts MUST come only from the Data section.',
                                        'If a requested detail is missing in Data, be very clear that it is missing. Do not invent values.',
                                        'You MAY add general AML knowledge (regulations, definitions, typologies).',
                                        'Write in clear, friendly, natural prose — no bullet points. Keep it brief.',
                                        'Start by directly answering the question',
                                        'Only answer questions related to AML',
                                        'Avoid exposing or inferring PII beyond what appears in Data.',
                                        `Alert ID: ${AppState.alertId || 'unknown'}`
                                ].join(' ');

                                // Use up to the last 3 exchanges (6 messages), excluding current user message if already added
                                let hist = Array.isArray(history) ? history.slice() : [];
                                if (hist.length && hist[hist.length - 1].role === 'user') {
                                        hist.pop(); // Drop current turn if already pushed
                                }

                                const recent = hist.slice(-CONFIG.CHAT_HISTORY_LIMIT);
                                const historyBlock = recent.map(m => `${m.role.toUpperCase()}: ${m.content}`).join('\n');

                                return [
                                        `SYSTEM:\n${system}`,
                                        historyBlock ? `HISTORY (last ${Math.floor(recent.length / 2)} exchanges):\n${Utils.trimChars(historyBlock, CONFIG.CHAT_HISTORY_CONTEXT_LIMIT)}` : null,
                                        `DATA:\n${Utils.trimChars(dataString, CONFIG.DATA_STRING_LIMIT)}`,
                                        `USER:\n${userMessage}`,
                                        'ASSISTANT:'
                                ].filter(Boolean).join('\n\n');
                        },

                        /**
                         * Processes chat query and returns AI response
                         * @param {string} userText - User's input text
                         * @param {Function} onDelta - Streaming callback function
                         * @returns {Promise<string>} AI response text
                         */
                        async chatQuery(userText, onDelta) {
                                // Ensure we have an alert ID
                                if (!AppState.alertId) {
                                        this.addMessage('bot', '<em>Waiting for Alert ID from Visual Analytics…</em>');
                                        await AppState.alertIdReady;
                                }

                                // Get chat cache and API key
                                const cc = AppState.chatCache || await (AppState.chatMasPromise || (ApiService.startPrefetch(), AppState.chatMasPromise));
                                const apiKey = cc.key || AppState.summaryCache?.key;
                                if (!apiKey) {
                                        throw new Error('OpenAI API key not found in MAS output');
                                }

                                // Build prompt and call OpenAI
                                const prompt = this.buildChatPrompt(cc.dataString, userText, AppState.chatHistory);
                                const reply = await ApiService.callOpenAI(prompt, apiKey, CONFIG.OPENAI_CHAT_MODEL, onDelta);
                                return reply.trim();
                        },

                        /**
                         * Adds a message to the chat interface
                         * @param {string} role - Message role ('user' or 'bot')
                         * @param {string} html - Message HTML content
                         */
                        addMessage(role, html) {
                                const wrap = document.createElement('div');
                                wrap.className = 'msg ' + role;
                                const bubble = document.createElement('div');
                                bubble.className = 'bubble';
                                bubble.innerHTML = html;
                                wrap.appendChild(bubble);
                                DOMElements.chatMessages.appendChild(wrap);
                                DOMElements.chatMessages.scrollTop = DOMElements.chatMessages.scrollHeight;
                        },

                        /**
                         * Shows typing indicator for bot response
                         * @returns {Object} Object with bubble element and stop function
                         */
                        showBotThinking() {
                                const wrap = document.createElement('div');
                                wrap.className = 'msg bot';
                                const bubble = document.createElement('div');
                                bubble.className = 'bubble';
                                bubble.innerHTML = `<span class="typing">Thinking<span class="dots"><i></i><i></i><i></i></span></span>`;
                                wrap.appendChild(bubble);
                                DOMElements.chatMessages.appendChild(wrap);
                                DOMElements.chatMessages.scrollTop = DOMElements.chatMessages.scrollHeight;
                                return {
                                        bubble,
                                        stop: () => wrap.remove()
                                };
                        },

                        /**
                         * Handles sending a chat message
                         */
                        async handleSend() {
                                const text = DOMElements.chatText.value.trim();
                                if (!text) return;

                                // Add user message to chat and history
                                this.addMessage('user', Utils.escapeHtml(text));
                                AppState.chatHistory.push({ role: 'user', content: text });

                                // Clear input and update UI state
                                DOMElements.chatText.value = '';
                                AppState.chatBusy = true;
                                UIController.refreshChatSendButton();

                                // Show thinking indicator
                                const thinking = this.showBotThinking();
                                await Utils.nextFrame(); // Ensure typing animation renders

                                let stopped = false;
                                try {
                                        // Get AI response with streaming
                                        const final = await this.chatQuery(text, (_delta, full) => {
                                                // Replace typing with streamed text
                                                thinking.bubble.innerHTML = Utils.escapeHtml(full).replace(/\n/g, '<br>');
                                                DOMElements.chatMessages.scrollTop = DOMElements.chatMessages.scrollHeight;
                                                stopped = true; // Mark that we've replaced the typing bubble
                                        });

                                        // Add AI response to history
                                        AppState.chatHistory.push({ role: 'assistant', content: final });

                                        // Limit chat history size
                                        if (AppState.chatHistory.length > CONFIG.CHAT_HISTORY_LIMIT) {
                                                AppState.chatHistory.splice(0, AppState.chatHistory.length - CONFIG.CHAT_HISTORY_LIMIT);
                                        }

                                } catch (e) {
                                        // Handle errors
                                        thinking.bubble.innerHTML = `<em>Sorry, I couldn't complete that: ${Utils.escapeHtml(e.message)}</em>`;
                                        console.error('[chat] error:', e);

                                        // Remove failed user message from history
                                        if (AppState.chatHistory.length && AppState.chatHistory[AppState.chatHistory.length - 1].role === 'user') {
                                                AppState.chatHistory.pop();
                                        }
                                } finally {
                                        // Clean up UI state
                                        if (!stopped && thinking.stop) thinking.stop();
                                        AppState.chatBusy = false;
                                        UIController.refreshChatSendButton();
                                        DOMElements.chatText.focus();
                                }
                        },

                        /**
                         * Initializes chat system with welcome message and event listeners
                         */
                        initialize() {
                                // Add welcome message
                                this.addMessage('bot', "Hi! I am a friendly chatbot that will use the alert data and my general AML knowledge to help you. What's on your mind?");

                                // Set up event listeners
                                DOMElements.chatSendBtn.addEventListener('click', () => this.handleSend());
                                DOMElements.chatText.addEventListener('keydown', (e) => {
                                        if (e.key === 'Enter' && !e.shiftKey) {
                                                e.preventDefault();
                                                this.handleSend();
                                        }
                                });
                        }
                };


                // ===== BUSINESS LOGIC MODULE =====
                /**
                 * Business logic for summary generation and comment management
                 */
                const BusinessLogic = {
                        /**
                         * Generates AI summary of the alert (refactored version of original summarize function)
                         */
                        async summarize() {
                                // Wait for alert ID if not available
                                if (!AppState.alertId) {
                                        UIController.renderWorking('Waiting for Alert ID from Visual Analytics');
                                        await AppState.alertIdReady;
                                }

                                console.log(`[id] summarize() with ALERT_ID=${AppState.alertId} (source=${AppState.alertIdSource})`);

                                // Set loading states using UI controller
                                UIController.setSummaryButtonLoading(true);
                                UIController.setToggleLoading(true);

                                // Create rotating loading message timer
                                const loadingTimer = UIController.createLoadingMessageTimer();
                                await Utils.nextFrame(); // Ensure UI updates render

                                try {
                                        // Get chosen model and summary data
                                        const chosenModel = DOMElements.modelSelect.value || CONFIG.OPENAI_SUMMARY_MODEL;
                                        const s = AppState.summaryCache || await (AppState.summaryMasPromise || (ApiService.startPrefetch(), AppState.summaryMasPromise));

                                        // Validate summary data
                                        if (!s?.systemPrompt) {
                                                throw new Error('Summary data not ready from MAS');
                                        }
                                        if (!s?.key) {
                                                throw new Error('OpenAI API key missing from MAS');
                                        }

                                        // Call OpenAI with streaming
                                        let started = false;
                                        let finalText = await ApiService.callOpenAI(
                                                s.systemPrompt,
                                                s.key,
                                                chosenModel,
                                                (_delta, full) => {
                                                        if (!started) {
                                                                started = true; // First chunk replaces skeleton
                                                        }
                                                        DOMElements.summaryEl.innerHTML = full;
                                                }
                                        );

                                        // Add cutoff notice if present
                                        if (s.cutoff) {
                                                DOMElements.summaryEl.innerHTML = finalText + `<div class="cutoff">${s.cutoff}</div>`;
                                        }

                                } catch (e) {
                                        DOMElements.summaryEl.textContent = `Error:\n${e.message}`;
                                        console.error(e);
                                } finally {
                                        // Clean up loading states
                                        loadingTimer.stop();
                                        UIController.setSummaryButtonLoading(false);
                                        UIController.setToggleLoading(false);
                                }
                        },

                        /**
                         * Saves comment to local storage
                         */
                        saveComment() {
                                const key = 'aml-summary-comments';
                                const existing = JSON.parse(localStorage.getItem(key) || '[]');
                                const entry = {
                                        ts: new Date().toISOString(),
                                        alertId: AppState.alertId,
                                        comment: DOMElements.commentsEl.value.trim(),
                                        summary: DOMElements.summaryEl.textContent.trim()
                                };

                                if (!entry.comment) {
                                        UIController.showToast('Nothing to save');
                                        return;
                                }

                                existing.push(entry);
                                localStorage.setItem(key, JSON.stringify(existing));
                                UIController.showToast('Comment saved locally');
                        },

                        /**
                         * Clears comment textarea
                         */
                        clearComment() {
                                DOMElements.commentsEl.value = '';
                                DOMElements.commentsEl.dispatchEvent(new Event('input'));
                                UIController.showToast('Cleared');
                        }
                };

                // ===== EVENT MANAGEMENT =====
                /**
                 * Centralized event handling and application initialization
                 */
                const EventManager = {
                        /**
                         * Replaces legacy event listeners with modular versions
                         */
                        setupModularEventListeners() {
                                // Replace original event listeners with modular ones
                                const newSummarizeBtn = DOMElements.summarizeBtn.cloneNode(true);
                                DOMElements.summarizeBtn.parentNode.replaceChild(newSummarizeBtn, DOMElements.summarizeBtn);
                                DOMElements.summarizeBtn = newSummarizeBtn;

                                const newSaveBtn = DOMElements.saveBtn.cloneNode(true);
                                DOMElements.saveBtn.parentNode.replaceChild(newSaveBtn, DOMElements.saveBtn);
                                DOMElements.saveBtn = newSaveBtn;

                                const newClearBtn = DOMElements.clearBtn.cloneNode(true);
                                DOMElements.clearBtn.parentNode.replaceChild(newClearBtn, DOMElements.clearBtn);
                                DOMElements.clearBtn = newClearBtn;

                                // Add new modular event listeners
                                DOMElements.summarizeBtn.addEventListener('click', () => BusinessLogic.summarize());
                                DOMElements.saveBtn.addEventListener('click', () => BusinessLogic.saveComment());
                                DOMElements.clearBtn.addEventListener('click', () => BusinessLogic.clearComment());
                        },

                        /**
                         * Initializes the modular application components
                         */
                        initializeModular() {
                                console.log('[app] Initializing modular components...');

                                // Set up modular event listeners
                                this.setupModularEventListeners();

                                console.log('[app] Modular refactoring complete - application ready');
                        }
                };

                // Initialize modular components after a brief delay to ensure all legacy code has run
                setTimeout(() => {
                        EventManager.initializeModular();
                }, 100);

        </script>
        <script>
                document.addEventListener('DOMContentLoaded', () => {
                        UIController.initialize();               // textarea, counters, default view, etc.
                        AlertManager.initializeFromUrl();        // enable button + prefetch if ?alertId= is present
                        AlertManager.setupVACallback();          // listen for VA to provide the id
                        EventManager.initializeModular();        // wire buttons => BusinessLogic
                        ChatManager.initialize();                // welcome msg + chat listeners
                });
        </script>
</body>

</html>
