<!DOCTYPE html>
<html lang="en">

<head>
        <!--
        Alert Summarizer Application
        ============================
        Enterprise AML (Anti-Money Laundering) alert processing and AI-powered summarization system
        designed for SAS Visual Analytics integration. Provides analysts with intelligent alert
        summarization, contextual chat interactions, and streamlined case documentation workflows.

        Key Features:
        - AI-powered alert summarization with configurable models (GPT-4, Claude, etc.)
        - Interactive chat interface for detailed alert investigation
        - Real-time comment/annotation system for case documentation
        - Responsive design optimized for compliance workflow efficiency
        - Secure content sanitization for enterprise security requirements
        - SAS Visual Analytics iframe integration with bidirectional messaging

        Technical Architecture:
        - Single-page application with tab-based navigation (Summary/Chat)
        - CSS-only animations and transitions for performance
        - No framework dependencies - vanilla JavaScript for minimal overhead
        - Enterprise-grade security with CSP-compliant external resources
        -->

        <!-- Standard HTML5 metadata for character encoding and responsive viewport configuration -->
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <title>Alert Summarizer</title>

        <!--
        External Library Dependencies
        ============================
        Critical security and integration libraries for enterprise AML processing.
        All CDN resources include integrity checking and strict CORS policies.
        -->

        <!--
        SAS Visual Analytics Messaging Utility
        Integration component for bidirectional communication with SAS VA dashboards.
        Handles parameter passing, data exchange, and iframe postMessage protocols.
        -->
        <script src="./javascripts/sas/util/messagingUtil.js"></script>

        <!--
        DOMPurify v3.1.6 - XSS Sanitization Library
        Enterprise-grade HTML sanitization to prevent XSS attacks in user-generated content.
        Essential for processing alert descriptions and user comments safely.
        Integrity hash ensures CDN resource hasn't been tampered with.
        -->
        <script src="https://unpkg.com/dompurify@3.1.6/dist/purify.min.js"
                integrity="sha384-+VfUPEb0PdtChMwmBcBmykRMDd+v6D/oFmB3rZM/puCMDYcIvF968OimRh4KQY9a"
                crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <style>
                /*
                Alert Summarizer Stylesheet
                ===========================
                Comprehensive styling system for enterprise AML alert processing application.
                Designed for optimal readability, accessibility, and professional compliance workflows.

                Architecture Overview:
                1. CSS Custom Properties (Design System Foundation)
                2. Base Typography & Layout (Cross-browser compatibility)
                3. Component-Specific Styles (Modular design patterns)
                4. Interactive States & Micro-animations (Performance-optimized)
                5. Responsive Design (Mobile-first approach)
                6. Accessibility Enhancements (WCAG 2.1 AA compliance)
                7. Performance Optimizations (GPU acceleration, contain properties)

                Design System Philosophy:
                - SAS brand-compliant color palette and typography
                - Consistent 14px base content indentation for visual hierarchy
                - Rounded corners (14px-24px) for modern, approachable aesthetic
                - Subtle shadows and transparency for depth without distraction
                - High contrast ratios for compliance environment readability
                */

                /*
                CSS Custom Properties - Design System Foundation
                ===============================================
                Central theme configuration using CSS custom properties for consistent
                branding, easy maintenance, and potential dark mode implementation.
                All components reference these tokens rather than hardcoded values.
                */
                :root {
                        /*
                        Base Color Palette - High Contrast for Compliance
                        ================================================
                        Semantic color tokens following enterprise design patterns
                        */
                        --bg: #fff;                    /* Primary background - pure white for maximum contrast */
                        --fg: #1d1d1f;                 /* Primary text - near-black for optimal readability */
                        --muted: #6e6e73;              /* Secondary text - sufficient contrast for WCAG AA */
                        --card: #fff;                  /* Surface/card background - maintains consistency */
                        --border: rgba(0, 0, 0, .08);  /* Subtle borders - minimal visual weight */

                        /*
                        SAS Brand Colors - Primary Interactive Elements
                        ==============================================
                        Official SAS brand blue palette for CTAs and active states
                        */
                        --primary: #0478CE;            /* SAS brand blue - primary action color */
                        --primary-press: #0366AF;      /* Darker variant for active/pressed states */
                        --primary-soft: #E8F3FF;       /* Light blue tint for secondary surfaces */
                        --grey-soft: #fafafa;          /* Neutral light background for input fields */

                        /*
                        Layout System Variables
                        ======================
                        Consistent spacing and sizing tokens
                        */
                        --content-indent: 14px;        /* Standard content indentation for hierarchy */

                        /*
                        Accessibility & Readability Scale
                        ================================
                        Global font scaling for improved readability in compliance environments
                        */
                        --fs: 1.08;                    /* 8% font size increase for better readability */
                }
                :root {
                        --bg: #fff;
                        --fg: #1d1d1f;
                        --muted: #6e6e73;
                        --card: #fff;
                        --border: rgba(0, 0, 0, .08);
                        --primary: #0478CE;
                        --primary-press: #0366AF;
                        --content-indent: 14px;
                        --primary-soft: #E8F3FF;
                        --grey-soft: #fafafa;
                }

                /*
                Base Element Reset & Typography
                ===============================
                Cross-browser normalization and base styling for consistent rendering
                */
                * {
                        box-sizing: border-box              /* Predictable sizing model */
                }

                html,
                body {
                        height: 100%                       /* Full viewport height for single-page layout */
                }

                body {
                        margin: 0;                         /* Remove default browser margins */
                        background: var(--bg);             /* Apply theme background */
                        color: var(--fg);                  /* Apply theme text color */
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, system-ui;
                        /* System font stack for optimal performance and native feel across platforms */
                        font-size: calc(16px * var(--fs)); /* Scalable base font size for accessibility */
                }


                /*
                Layout Container - Responsive Main Wrapper
                ==========================================
                Centered layout with responsive width constraints optimized for
                both desktop compliance workstations and mobile device access
                */
                .container {
                        width: min(96vw, 1600px);          /* Responsive width: 96% viewport up to 1600px max */
                        margin: 2vh auto 8vh;              /* Vertical spacing: 2% top, 8% bottom for breathing room */
                        padding: 0 24px;                   /* Horizontal padding for edge-to-edge mobile safety */
                }

                /*
                Primary Card Component - Main Content Container
                ==============================================
                Elevated surface design for the main application interface.
                Uses layered shadows for subtle depth and professional appearance.
                */
                .card {
                        background: var(--card);           /* Theme-aware surface color */
                        border: 1px solid var(--border);   /* Subtle edge definition */
                        border-radius: 24px;               /* Generous rounding for modern aesthetic */
                        box-shadow: 0 1px 2px rgba(0, 0, 0, .04), 0 8px 30px rgba(0, 0, 0, .06);
                        /* Layered shadow: subtle contact shadow + ambient shadow for depth */
                        padding: 32px;                     /* Generous internal spacing for content breathing room */
                        display: grid;                      /* CSS Grid for flexible content layout */
                        gap: 18px                           /* Consistent spacing between card sections */
                }

                /*
                Header Layout & Typography
                ==========================
                Application header with title area and controls
                */
                .header {
                        display: flex;                      /* Horizontal layout for title and controls */
                        justify-content: space-between;    /* Push content to edges */
                        align-items: flex-start;           /* Top-align for multi-line content */
                        gap: 12px                           /* Breathing room between title and controls */
                }

                h1 {
                        margin: 0 0 6px 0;                 /* Minimal bottom margin for subtitle spacing */
                        font-size: calc(28px * var(--fs)); /* Scalable primary heading size */
                        font-weight: 650;                  /* Semi-bold for authority without heaviness */
                        letter-spacing: -.02em              /* Slight negative tracking for large text */
                }

                .subtitle {
                        margin: 0;                         /* Reset default paragraph margins */
                        color: var(--muted);               /* Reduced contrast for hierarchy */
                        font-size: calc(14px * var(--fs))  /* Scalable subtitle size */
                }

                /*
                Utility Components - Layout & Form Base
                =======================================
                Reusable layout patterns and form element normalization
                */
                .row {
                        display: flex;                      /* Horizontal content flow */
                        gap: 10px;                         /* Consistent item spacing */
                        align-items: center                 /* Vertical center alignment */
                }

                button {
                        appearance: none;                   /* Remove default browser styling */
                        border: none;                       /* Clean slate for custom styling */
                        cursor: pointer;                    /* Indicate interactivity */
                        font-family: inherit                /* Inherit system font stack */
                }

                /*
                Button Component System
                =======================
                Consistent interactive elements with accessibility and micro-interactions
                */

                /* Primary CTA button (Summarize, Send) - High-emphasis actions */
                .btn-primary {
                        background: var(--primary);        /* SAS brand blue for primary actions */
                        color: #fff;                        /* High contrast white text */
                        border-radius: 14px;               /* Rounded corners matching design system */
                        padding: 12px 18px;                /* Comfortable touch target (44px+ height) */
                        font-size: calc(16px * var(--fs)); /* Scalable readable text size */
                        font-weight: 600;                  /* Semi-bold for emphasis and readability */
                        box-shadow: 0 6px 18px rgba(0, 122, 255, .25);
                        /* Colored shadow reinforces button importance and adds depth */
                        transition: transform .06s, box-shadow .2s, filter .2s
                        /* Fast micro-interactions for responsive feel */
                }

                .btn-primary:hover {
                        filter: brightness(1.02)           /* Subtle brightness increase on hover */
                }

                .btn-primary:active {
                        transform: scale(.985)              /* Slight scale down for tactile feedback */
                }

                .btn-primary:disabled {
                        opacity: .65;                       /* Reduced opacity indicates disabled state */
                        cursor: not-allowed;                /* Clear visual feedback for disabled state */
                        box-shadow: none                    /* Remove elevation when non-interactive */
                }

                /* Secondary/neutral button (Clear/Save) - Medium-emphasis actions */
                .btn-secondary {
                        background: var(--grey-soft);      /* Neutral background for secondary actions */
                        color: var(--fg);                  /* Primary text color for readability */
                        border-radius: 14px;               /* Consistent rounding with primary buttons */
                        padding: 10px 16px;                /* Slightly smaller padding for hierarchy */
                        font-size: calc(14px * var(--fs)); /* Scalable secondary text size */
                        font-weight: 600                   /* Maintain readability with semi-bold weight */
                }

                .btn-secondary:hover {
                        filter: brightness(.97)            /* Subtle darkening on hover for feedback */
                }

                .btn-secondary:active {
                        filter: brightness(.94)            /* More pronounced darkening when pressed */
                }

                /*
                Loading States & Micro-animations
                =================================
                Performance-optimized animations for user feedback during AI processing
                */

                /* Inline spinner for button loading states */
                .spinner {
                        width: 16px;                        /* Compact size for inline use */
                        height: 16px;
                        border: 2px solid rgba(255, 255, 255, .6);
                        /* Semi-transparent border for subtle appearance */
                        border-top-color: #fff;            /* Full opacity top for rotation visual */
                        border-radius: 50%;                /* Perfect circle */
                        animation: spin 1s linear infinite; /* Smooth continuous rotation */
                        display: none                       /* Hidden by default, shown via JavaScript */
                }

                @keyframes spin {
                        to {
                                transform: rotate(360deg)   /* Full rotation for smooth spinner animation */
                        }
                }

                /* Loading state management - toggle between text and spinner */
                .loading .spinner {
                        display: inline-block               /* Show spinner during loading */
                }

                .loading .labeltext {
                        display: none                       /* Hide button text during loading */
                }

                /*
                Typography & Content Hierarchy
                ==============================
                Section headers and content organization elements
                */

                /* Section label headers (Summary, Comments, Chat) */
                .label {
                        font-size: calc(12px * var(--fs)); /* Scalable small caps size */
                        text-transform: uppercase;          /* All caps for section emphasis */
                        letter-spacing: .08em;              /* Wide tracking for readability */
                        color: var(--muted);               /* Reduced contrast for hierarchy */
                        margin-bottom: 8px;                /* Spacing before section content */
                        padding-left: var(--content-indent); /* Consistent left alignment */
                }

                /*
                Accessibility Utilities
                =======================
                WCAG 2.1 AA compliance utilities for screen reader support
                */

                /* Visually hidden content for screen readers (WCAG 2.1 AA compliant) */
                .sr-only {
                        position: absolute;                 /* Remove from normal document flow */
                        width: 1px;                         /* Minimal dimensions */
                        height: 1px;
                        padding: 0;                         /* Remove all spacing */
                        margin: -1px;                       /* Negative margin to fully hide */
                        overflow: hidden;                   /* Prevent content overflow */
                        clip: rect(0, 0, 0, 0);            /* Legacy clipping for older browsers */
                        white-space: nowrap;                /* Prevent text wrapping */
                        border: 0;                          /* Remove any borders */
                }

                /*
                Form Controls - Select Dropdown
                ===============================
                Styled select element matching button design system
                */

                /* Model selection dropdown styled to match secondary buttons */
                .select-model {
                        background: var(--grey-soft);      /* Neutral background matching btn-secondary */
                        color: var(--fg);                  /* Primary text color */
                        border: none;                       /* Clean appearance without borders */
                        border-radius: 14px;               /* Consistent rounding */
                        padding: 10px 12px;                /* Comfortable padding for readability */
                        font-size: calc(14px * var(--fs)); /* Scalable text size */
                        font-weight: 600;                  /* Semi-bold for consistency */
                }

                .select-model:disabled {
                        opacity: .65;                       /* Visual feedback for disabled state */
                        cursor: not-allowed;                /* Clear interaction feedback */
                }

                /*
                Content Display Areas
                =====================
                Containers for AI-generated content and user input
                */

                /* AI summary output container - supports rich HTML content */
                .summary {
                        border: 1px solid var(--border);   /* Subtle edge definition */
                        border-radius: 14px;               /* Consistent rounding */
                        background: var(--grey-soft);      /* Light background for content separation */
                        padding: 14px;                     /* Internal spacing for readability */
                        min-height: 140px;                 /* Minimum height prevents layout shift */
                        white-space: normal;                /* Allow normal text wrapping */
                        font-size: calc(14px * var(--fs))  /* Scalable readable content size */
                }

                /* Rich text styling within summary content */
                .summary h1 {
                        font-size: calc(24px * var(--fs)); /* Scalable heading size */
                        margin: 0 0 8px                    /* Bottom spacing for content separation */
                }

                .summary h2 {
                        font-size: calc(18px * var(--fs)); /* Scalable subheading size */
                        margin: 14px 0 6px                 /* Top and bottom spacing for hierarchy */
                }

                .summary p {
                        margin: 6px 0                      /* Minimal paragraph spacing */
                }

                .summary ul {
                        margin: 6px 0 6px 18px;            /* List spacing with left offset */
                        padding-left: 14px                 /* Additional indentation for bullets */
                }

                .summary li {
                        margin: 3px 0                      /* Compact list item spacing */
                }

                /* AI model knowledge cutoff disclaimer */
                .summary .cutoff {
                        margin-top: 10px;                  /* Separation from main content */
                        font-size: calc(12px * var(--fs)); /* Scalable small disclaimer text */
                        color: var(--muted)                /* Reduced emphasis for footnote content */
                }

                /*
                Form Input Elements
                ==================
                Text input areas with focus states and accessibility
                */

                /* Comment textarea with auto-resize functionality */
                textarea {
                        width: 100%;                       /* Full width for maximum usability */
                        min-height: 120px;                /* Minimum height for comfortable editing */
                        padding: 14px 14px;               /* Generous padding for touch targets */
                        border-radius: 16px;              /* Slightly larger radius for text areas */
                        border: 1px solid rgba(0, 0, 0, .12);
                        /* Subtle border with transparency */
                        background: #fff;                  /* Clean white background for text clarity */
                        outline: none;                     /* Remove default focus outline */
                        line-height: 1.5;                 /* Comfortable reading line height */
                        overflow: hidden;                  /* Hide scrollbars for auto-resize */
                        resize: none;                      /* Disable manual resize for consistent layout */
                        font-size: calc(14px * var(--fs)) /* Scalable text input size */
                }

                textarea:focus {
                        border-color: var(--primary-press); /* Brand color focus indication */
                        box-shadow: 0 0 0 4px rgba(10, 132, 255, .12)
                        /* Accessible focus ring with sufficient contrast */
                }

                .caption {
                        font-size: calc(12px * var(--fs)); /* Scalable caption text */
                        color: var(--muted)                /* Reduced contrast for supporting text */
                }

                /*
                User Experience Enhancements
                ============================
                Prevent accidental text selection on UI elements
                */

                /* Disable text selection on non-content UI elements */
                h1#title,
                .subtitle,
                .label {
                        -webkit-user-select: none;         /* Safari */
                        -moz-user-select: none;            /* Firefox */
                        -ms-user-select: none;             /* IE/Edge legacy */
                        user-select: none;                 /* Standard property */
                        -webkit-touch-callout: none;       /* Disable iOS long-press context menu */
                }

                /* Prevent selection of loading states and skeleton content */
                .summary .working,
                .summary .working *,
                .summary .skel,
                .summary .skel * {
                        -webkit-user-select: none;         /* Cross-browser text selection prevention */
                        -moz-user-select: none;
                        -ms-user-select: none;
                        user-select: none;
                        -webkit-touch-callout: none;       /* iOS touch interaction prevention */
                }


                /*
                Notification System
                ==================
                Toast notifications for user feedback
                */

                /* Toast notification component for save/clear confirmations */
                .toast {
                        position: fixed;                    /* Fixed positioning for overlay */
                        left: 50%;                          /* Center horizontally */
                        bottom: 24px;                      /* Fixed distance from bottom */
                        transform: translateX(-50%) translateY(20px);
                        /* Center and initially offset down for animation */
                        background: #111;                  /* High contrast dark background */
                        color: #fff;                       /* White text for maximum readability */
                        padding: 10px 14px;               /* Compact padding for brief messages */
                        border-radius: 999px;             /* Pill shape for modern appearance */
                        box-shadow: 0 10px 30px rgba(0, 0, 0, .25);
                        /* Strong shadow for overlay emphasis */
                        opacity: 0;                        /* Hidden by default */
                        pointer-events: none;              /* Non-interactive during fade */
                        transition: transform .35s, opacity .35s
                        /* Smooth slide-up animation */
                }

                .toast.show {
                        opacity: 1;                        /* Visible state */
                        transform: translateX(-50%) translateY(0)
                        /* Final position - centered and at bottom */
                }

                /*
                Loading State Animations
                ========================
                Animated feedback during AI processing with skeleton screens
                */

                /* "Working..." text with animated dots */
                .working {
                        display: inline-flex;              /* Horizontal layout with text and dots */
                        align-items: center;               /* Vertical center alignment */
                        gap: 6px;                          /* Spacing between text and animation */
                        color: var(--muted);               /* Reduced contrast for loading state */
                        font-weight: 600                   /* Semi-bold for visibility */
                }

                .working .dots {
                        display: inline-flex;              /* Horizontal dot layout */
                        gap: 4px;                          /* Spacing between dots */
                        margin-left: 2px                   /* Small offset from text */
                }

                .working .dots i {
                        width: 6px;                        /* Small dot size */
                        height: 6px;
                        border-radius: 50%;               /* Perfect circle */
                        background: var(--muted);         /* Muted color for subtlety */
                        opacity: .25;                      /* Base transparency */
                        animation: dotpulse 1s ease-in-out infinite
                        /* Smooth pulsing animation */
                }

                .working .dots i:nth-child(2) {
                        animation-delay: .2s               /* Staggered animation timing */
                }

                .working .dots i:nth-child(3) {
                        animation-delay: .4s               /* Further staggered timing */
                }

                @keyframes dotpulse {
                        0%,
                        100% {
                                transform: translateY(0);      /* Rest position */
                                opacity: .25                    /* Base transparency */
                        }

                        50% {
                                transform: translateY(-3px);   /* Small upward movement */
                                opacity: 1                     /* Full opacity at peak */
                        }
                }

                /* Skeleton screen placeholder content */
                .skel {
                        display: grid;                     /* Vertical layout for skeleton lines */
                        gap: 8px;                          /* Spacing between skeleton elements */
                        margin-top: 10px                   /* Separation from loading text */
                }

                .skel .line {
                        height: 10px;                     /* Text line height simulation */
                        border-radius: 6px;               /* Rounded line ends */
                        background: linear-gradient(90deg, #ececec, #f7f7f7, #ececec);
                        /* Gradient for shimmer effect */
                        background-size: 200% 100%;       /* Oversized background for animation */
                        animation: shimmer 2.5s linear infinite
                        /* Continuous shimmer movement */
                }

                @keyframes shimmer {
                        0% {
                                background-position: 200% 0    /* Start position - off right */
                        }

                        100% {
                                background-position: -200% 0   /* End position - off left */
                        }
                }

                /*
                Content Alignment & Spacing
                ===========================
                Consistent indentation system for visual hierarchy
                */

                #charCount {
                        margin-left: var(--content-indent); /* Align with other content elements */
                }

                .header>div:first-child {
                        padding-left: var(--content-indent); /* Header content indentation */
                }

                /*
                Chat Interface Component
                ========================
                Interactive messaging system for alert investigation and Q&A.
                Optimized for compliance workflows with clear message hierarchy.
                */
                .chat {
                        border: 1px solid var(--border);   /* Subtle container definition */
                        border-radius: 14px;               /* Consistent rounding */
                        background: var(--grey-soft);      /* Light background for message contrast */
                        padding: 14px;                     /* Internal spacing */
                        display: flex;                      /* Vertical flex layout */
                        flex-direction: column;            /* Stack messages over input */
                        gap: 10px;                         /* Spacing between messages and input */
                }

                .chat-messages {
                        min-height: 273px;                 /* Minimum scrollable area */
                        max-height: clamp(360px, 55vh, 720px);
                        /* Responsive height: min 360px, max 720px, prefer 55% viewport */
                        overflow: auto;                     /* Scrollable when content exceeds height */
                        display: grid;                      /* Grid layout for message stacking */
                        gap: 10px;                         /* Spacing between messages */
                        padding-right: 4px;                /* Account for scrollbar width */
                        align-content: start;              /* Top-align message grid */
                        align-items: start;                /* Top-align individual messages */
                        grid-auto-rows: max-content;       /* Size rows to content height */
                }

                /*
                Message Bubble System
                =====================
                Distinct styling for user and bot messages with conversation flow
                */

                .msg {
                        display: flex;                      /* Horizontal message layout */
                }

                .msg .bubble {
                        border: 1px solid var(--border);   /* Subtle edge definition */
                        background: #f7f7f7;               /* Default message background */
                        color: var(--fg);                  /* Primary text color */
                        padding: 10px 12px;                /* Comfortable reading padding */
                        border-radius: 14px 14px 4px 14px; /* Asymmetric rounding for speech bubble effect */
                        font-size: calc(14px * var(--fs)); /* Scalable message text size */
                        line-height: 1.35;                 /* Compact line height for conversation */
                        max-width: 72%;                    /* Prevent overly wide messages */
                        box-shadow: 0 1px 2px rgba(0, 0, 0, .04);
                        /* Subtle shadow for message separation */
                }

                /* Bot message styling - clean white bubbles */
                .msg.bot .bubble {
                        background: #fff;                  /* Clean white for AI responses */
                        color: var(--fg);                 /* Standard text color */
                        border-color: var(--border);      /* Consistent border treatment */
                }

                .msg.user {
                        justify-content: flex-end;        /* Right-align user messages */
                }

                /* User message styling - branded color treatment */
                .msg.user .bubble {
                        background: var(--primary-soft);  /* Light brand color for user messages */
                        color: var(--fg);                 /* Maintain text readability */
                        border-color: var(--border);      /* Consistent border treatment */
                        border-radius: 14px 14px 14px 4px; /* Flipped radius for right alignment */
                }

                /*
                Chat Input Area
                ==============
                Message composition interface with send button
                */

                .chat-input {
                        display: flex;                     /* Horizontal layout: input + button */
                        gap: 8px;                          /* Spacing between input and send button */
                }

                #chatText {
                        flex: 1;                           /* Expand to fill available width */
                        border: 1px solid rgba(0, 0, 0, .12);
                        /* Subtle border for input definition */
                        border-radius: 14px;              /* Consistent rounding */
                        padding: 12px 14px;               /* Comfortable typing padding */
                        font: inherit;                     /* Use system font stack */
                        outline: none;                     /* Remove default focus outline */
                        font-size: calc(14px * var(--fs)) /* Scalable input text size */
                }

                #chatText:focus {
                        border-color: var(--primary-press); /* Brand color focus indication */
                        box-shadow: 0 0 0 4px rgba(10, 132, 255, .12);
                        /* Accessible focus ring */
                }

                /*
                Typing Indicator Animation
                ==========================
                Visual feedback when AI is processing/responding
                */

                .typing {
                        display: inline-flex;              /* Horizontal layout for typing indicator */
                        align-items: center;               /* Vertical center alignment */
                        gap: 6px;                          /* Spacing between text and dots */
                }

                .typing .dots {
                        display: inline-flex;              /* Horizontal dot arrangement */
                        gap: 4px;                          /* Spacing between dots */
                }

                .typing .dots i {
                        width: 6px;                        /* Small dot size for subtlety */
                        height: 6px;
                        border-radius: 50%;               /* Perfect circle */
                        background: var(--muted);         /* Muted color for non-intrusive feedback */
                        opacity: .35;                      /* Base transparency */
                        animation: dotpulse 1s ease-in-out infinite;
                        /* Reuse dotpulse animation for consistency */
                }

                .typing .dots i:nth-child(2) {
                        animation-delay: .2s;              /* Staggered timing for wave effect */
                }

                .typing .dots i:nth-child(3) {
                        animation-delay: .4s;              /* Further staggered timing */
                }

                /*
                Form Element Normalization
                ==========================
                Consistent typography across all form controls
                */

                input,
                textarea,
                button,
                select {
                        font-family: inherit;             /* Use system font stack consistently */
                        font-size: inherit;               /* Inherit contextual sizing */
                }

                #comments {
                        font-size: calc(14px * var(--fs)) /* Scalable comment text size */
                }

                /*
                Tab Navigation System
                =====================
                Segmented control for switching between Summary and Chat views.
                Features animated pill indicator with smooth transitions.
                */
                .viewtoggle {
                        position: relative;                /* Required for absolute positioned pill */
                        display: flex;                     /* Horizontal tab layout */
                        align-items: center;               /* Vertical center alignment */
                        gap: 0;                            /* No gap - tabs should be adjacent */
                        width: 200px;                     /* Fixed width for consistent layout */
                        height: 36px;                     /* Comfortable touch target height */
                        padding: 4px;                     /* Internal padding for pill positioning */
                        border-radius: 999px;             /* Pill-shaped container */
                        background: var(--grey-soft);     /* Neutral background */
                        border: 1px solid var(--border);  /* Subtle edge definition */
                        font-weight: 600;                 /* Semi-bold for tab readability */
                        user-select: none;                /* Prevent text selection */
                        cursor: pointer;                   /* Indicate interactivity */
                }

                .viewtoggle .label {
                        flex: 1;                           /* Equal width tabs */
                        display: flex;                     /* Center content horizontally and vertically */
                        align-items: center;
                        justify-content: center;
                        font-size: calc(14px * var(--fs)); /* Scalable tab text size */
                        margin: 0;                         /* Reset global .label margin */
                        padding: 0;                        /* Reset global .label padding-left */
                        text-transform: none;              /* Override global UPPERCASE */
                        letter-spacing: 0;                /* Reset global letter-spacing */
                        line-height: 1;                   /* Precise vertical centering */
                        color: var(--muted);              /* Inactive tab color */
                        position: relative;                /* Layer above pill background */
                        z-index: 1;                       /* Ensure text appears above pill */
                }

                /* Active tab text styling - white over brand blue pill */
                .card:not(.show-chat) .viewtoggle .label:first-child,
                .card.show-chat .viewtoggle .label:nth-child(2) {
                        color: #fff !important;           /* High contrast white text over blue */
                }

                /* Content spacing optimization */
                #pane-summary .summary {
                        margin-bottom: 20px;              /* Breathing room before Comments section */
                }


                /*
                Animated Pill Indicator
                =======================
                Sliding background indicator for active tab state
                */

                .viewtoggle .pill {
                        position: absolute;                /* Float above tab background */
                        top: 4px;                          /* Align with container padding */
                        left: 4px;                         /* Align with container padding */
                        height: 28px;                     /* Fill available height */
                        width: calc(50% - 4px);           /* Half width minus padding */
                        border-radius: 999px;             /* Match container pill shape */
                        background: var(--primary);       /* Brand blue for active indication */
                        box-shadow: 0 6px 18px rgba(0, 122, 255, .25);
                        /* Colored shadow for emphasis and depth */
                        transition: transform .0s;         /* Instant positioning (can be customized) */
                        z-index: 0;                       /* Behind text labels */
                        pointer-events: none;             /* Non-interactive decoration */
                }

                /*
                Tab Progress Indicators
                =======================
                Micro-animations for showing processing state in tab headers
                */

                /* Compact progress dots for tab-level loading indication */
                .viewtoggle .mini-dots {
                        display: none;                     /* Hidden by default */
                        margin-left: 4px;                 /* Small offset from tab text */
                        gap: 3px;                          /* Tight spacing for compact display */
                        align-items: center;               /* Vertical alignment with text */
                }

                .viewtoggle .mini-dots i {
                        width: 4px;                        /* Smaller dots for tab context */
                        height: 4px;
                        border-radius: 50%;               /* Perfect circle */
                        background: currentColor;          /* Inherit text color for consistency */
                        opacity: .35;                      /* Base transparency */
                        animation: dotpulse 1s ease-in-out infinite;
                        /* Reuse established dotpulse animation */
                }

                .viewtoggle .mini-dots i:nth-child(2) {
                        animation-delay: .2s;              /* Staggered timing */
                }

                .viewtoggle .mini-dots i:nth-child(3) {
                        animation-delay: .4s;              /* Further staggered timing */
                }

                /* Conditional progress indicator visibility */
                .card.show-chat .viewtoggle.is-summarizing .mini-dots {
                        display: inline-flex;              /* Show dots when summarizing in Chat tab */
                }

                /* Tab state animations */
                .card.show-chat .viewtoggle .pill {
                        transform: translateX(100%);       /* Slide pill to Chat tab position */
                }

                /* Context-sensitive UI element visibility */
                .card.show-chat #summarizeBtn {
                        display: none;                     /* Hide Summarize button in Chat mode */
                }

                /*
                Content Pane Management
                =======================
                Single-pane visibility system for tab content switching
                */

                /* Default state - Chat pane hidden */
                #pane-chat {
                        display: none;                     /* Hidden by default */
                }

                /* Chat mode active - show Chat pane */
                .card.show-chat #pane-chat {
                        display: block;                    /* Visible when Chat tab active */
                }

                /* Chat mode active - hide Summary pane */
                .card.show-chat #pane-summary {
                        display: none;                     /* Hidden when Chat tab active */
                }

                /*
                AI Disclaimer System
                ====================
                Required compliance messaging for AI-generated content
                */

                /* Chat mode disclaimer - regulatory compliance messaging */
                .card.show-chat::after {
                        content: "Generative AI can make mistakes. Check important info.";
                        /* Standard AI disclaimer text for regulatory compliance */
                        display: block;                    /* Block display for proper spacing */
                        margin-top: 7px;                  /* Separation from chat interface */
                        font-size: calc(13px * var(--fs)); /* Scalable disclaimer text */
                        color: var(--muted);              /* Reduced emphasis */
                        text-align: center;               /* Center alignment for disclaimer */
                }

                /* Inline disclaimer for Summary mode context */
                .disclaimer-inline {
                        position: absolute;                /* Positioned overlay */
                        left: 0;
                        right: 0;                          /* Full width positioning */
                        text-align: center;               /* Center alignment */
                        font-size: calc(11px * var(--fs)); /* Scalable small disclaimer text */
                        color: var(--muted);              /* Reduced emphasis */
                        pointer-events: none;             /* Non-interactive overlay */
                }

                /*
                Performance Optimizations
                =========================
                CSS containment for improved rendering performance
                */

                #pane-summary,
                #pane-chat {
                        contain: layout paint;            /* CSS containment to isolate layout and paint work */
                        /* Improves performance by limiting reflow scope to pane contents */
                }

                /*
                Accessibility & Readability Enhancements
                ========================================
                Global font scaling system for improved readability in compliance environments.
                Applies 8% increase to all text elements for better visibility during long
                analysis sessions. Scale can be adjusted via --fs variable (1.05-1.12 recommended).
                */

                /* Note: --fs variable already defined in main :root block above */

                /* Base typography scaling */
                body {
                        font-size: calc(16px * var(--fs)); /* Scalable base font size */
                }

                h1 {
                        font-size: calc(28px * var(--fs)); /* Scalable primary heading */
                }

                .subtitle {
                        font-size: calc(14px * var(--fs)); /* Scalable subtitle */
                }

                /* Interactive element scaling */
                .btn-primary {
                        font-size: calc(16px * var(--fs)); /* Scalable primary button text */
                }

                .btn-secondary,
                .select-model {
                        font-size: calc(14px * var(--fs)); /* Scalable secondary element text */
                }

                /* UI label and caption scaling */
                .label,
                .caption {
                        font-size: calc(12px * var(--fs)); /* Scalable small text elements */
                }

                /* Content area scaling */
                .summary {
                        font-size: calc(14px * var(--fs)); /* Scalable summary content */
                }

                .summary h1 {
                        font-size: calc(24px * var(--fs)); /* Scalable summary headings */
                }

                .summary h2 {
                        font-size: calc(18px * var(--fs)); /* Scalable summary subheadings */
                }

                /* Chat interface scaling */
                .msg .bubble {
                        font-size: calc(14px * var(--fs)); /* Scalable chat message text */
                }

                /* Form input scaling */
                #comments,
                #chatText {
                        font-size: calc(14px * var(--fs)); /* Scalable input text */
                }

                /* Tab navigation scaling */
                .viewtoggle .label {
                        font-size: calc(14px * var(--fs)); /* Scalable tab labels */
                }
        </style>
</head>

<body>
        <div class="container">
                <div class="card" role="region" aria-labelledby="title">
                        <div class="header">
                                <div>
                                        <h1 id="title">Alert Summarizer</h1>
                                        <p class="subtitle">Generate a concise summary with one click.</p>
                                </div>
                                <div class="row">
                                        <!-- Segmented control: toggles between "Summary" and "Chat" views -->
                                        <div id="viewToggle" class="viewtoggle" role="switch" aria-checked="false">
                                                <span class="label">Summary<span class="mini-dots"
                                                                aria-hidden="true"><i></i><i></i><i></i></span></span>
                                                <span class="label">Chat</span>
                                                <span id="togglePill" class="pill" aria-hidden="true"></span>
                                        </div>
                                </div>
                        </div>
                        <!--=========================
                            SUMMARY PANE (default)
                          =========================-->
                        <div id="pane-summary">
                                <div>
                                        <div class="label">Summary</div>
                                        <!-- LLM summary output appears here; aria-live for SR updates -->
                                        <div id="summary" class="summary" role="region" aria-live="polite">Press
                                                "Summarize" to
                                                generate a concise alert summary.</div>
                                </div>

                                <div class="row" style="justify-content:flex-end;margin-top:8px">
                                        <!-- Model selector lets user choose a Responses model for summary -->
                                        <label for="modelSelect" class="sr-only">Model</label>
                                        <select id="modelSelect" class="select-model" aria-label="Model">
                                                <option value="gpt-5-nano">GPT-5 nano</option>
                                                <option value="gpt-5-mini"selected >GPT-5 mini</option>
                                                <option value="gpt-5">GPT-5</option>

                                        </select>

                                        <!-- One-click summarize action; switches to streaming/loading state -->
                                        <button id="summarizeBtn" class="btn-primary" aria-busy="false">
                                                <span class="spinner" aria-hidden="true"></span>
                                                <span class="labeltext">Summarize</span>
                                        </button>
                                </div>

                                <!-- Analyst comments area (saved locally) -->
                                <div>
                                        <div class="label">Comments</div>
                                        <textarea id="comments"
                                                placeholder="Add comments on the generated response and the alert in general…"></textarea>
                                        <div class="row" style="justify-content:space-between;margin-top:8px">
                                                <span id="charCount" class="caption">0 / 2000</span>
                                                <span class="caption disclaimer-inline">Generative AI can make mistakes.
                                                        Check important info.</span>
                                                <div class="row">
                                                        <button id="clearBtn" class="btn-secondary"
                                                                type="button">Clear</button>
                                                        <button id="saveBtn" class="btn-secondary" type="button">Save
                                                                Comment</button>
                                                </div>
                                        </div>
                                </div>
                        </div>

                        <!--=========================
                            CHAT PANE
                          =========================-->
                        <div id="pane-chat">
                                <div>
                                        <div class="label">Chat</div>
                                        <div class="chat" id="chat">
                                                <!-- Message history container (user & bot bubbles) -->
                                                <div id="chatMessages" class="chat-messages" role="region"
                                                        aria-live="polite">
                                                </div>
                                                <!-- Composer: input + send -->
                                                <div class="chat-input">
                                                        <input id="chatText" type="text"
                                                                placeholder="Ask any question about this alert…" />
                                                        <button id="chatSendBtn" class="btn-primary" type="button"
                                                                disabled>Send</button>
                                                </div>
                                        </div>
                                </div>
                        </div>

                </div>
        </div>

        <!-- Toast notification used for Save/Clear actions -->
        <div id="toast" class="toast" role="status" aria-live="polite">Saved</div>

        <script>
                // Architecture overview:
                // - Config: constants and tunables (endpoints, models, UI timings)
                // - State: runtime state shared across modules (IDs, caches, promises)
                // - UI: DOM caching + view helpers (no business logic)
                // - Utils: small pure helpers (escapeHtml, autoResize, etc.)
                // - API: network helpers (CSRF priming, OpenAI Responses call + SSE parsing)
                // - Summary: MAS prefetch (summary/chat) + summary generation/streaming
                // - Chat: prompt builder + chat send/stream UI
                // - Comments: localStorage persistence for analyst notes
                // - Init: wiring (alert ID resolution, listeners, boot)

                (function () {
                        'use strict';

                        // ==========================================================
                        // CONFIGURATION & GLOBAL STATE
                        // - MODULE_URI/CSRF_PRIMER_URL: SAS MAS endpoints for scoring & CSRF
                        // - ALERT_ID: set by URL (?alertId=) or SAS VA message
                        // - alertIdReady: Promise used to defer actions until ALERT_ID exists
                        // - OPENAI_*: OpenAI Responses endpoint + default models
                        // ==========================================================

                        // Configuration namespace
                        const Config = {
                                MODULE_URI: '/microanalyticScore/modules/aml_demo_prompt_building1_1/steps/execute',
                                CSRF_PRIMER_URL: '/microanalyticScore/modules',
                                OPENAI_URL: 'https://api.openai.com/v1/responses',
                                OPENAI_SUMMARY_MODEL: 'gpt-5-mini',
                                OPENAI_CHAT_MODEL: 'gpt-5-mini',
                                COMMENT_LIMIT: 2000,
                                ROTATE_MS: 4000,
                                // Message pool: mix of serious & lighthearted to humanize waiting
                                LOADING_MESSAGES: [
                                        // Serious
                                        "Investigating suspicious activity",
                                        "Connecting the dots between transactions",
                                        "Cross-referencing KYC data",
                                        "Scanning network relationships",
                                        "Following the money trail",
                                        "Reviewing scenario triggers",
                                        "Generating advanced insights",
                                        "Running enhanced due diligence protocols",
                                        "Finding patterns no human could see",
                                        "Hunting for needle-in-a-haystack transfers",
                                        "Checking for unusual velocity spikes",
                                        "Sifting through transaction histories",
                                        "Raising potential red flags",
                                        "Flagging politically exposed persons",
                                        "Analyzing cash structuring patterns",
                                        "Verifying source of funds",
                                        // Fun
                                        "Following the breadcrumbs",
                                        "Checking today's horoscope",
                                        "With great power comes great compliance responsibility – Uncle Ben",
                                        "I'm gonna make him an offer he can't explain to compliance – The Godfather",
                                        "May the fraud be with you – Star Wars",
                                        "Looking for the usual suspects",
                                        "Elementary, my dear Watson... the account is offshore – Sherlock Holmes",
                                        "The name's Bond... Transaction Bond – James Bond",
                                        "Houston, we have a suspicious transfer – Apollo 13",
                                        "Winter is coming... for fraudsters – Game of Thrones",
                                        "Binge-watching transaction histories",
                                        "Taking a siesta"
                                ]
                        };

                        // Allow exactly these tags; keep only class for styling (.cutoff)
                        const SANITIZE_CFG = {
                                ALLOWED_TAGS: ['b', 'i', 'h1', 'h2', 'p', 'ul', 'li'],
                                ALLOWED_ATTR: ['class'],
                                FORBID_TAGS: ['style', 'script', 'img', 'video', 'audio', 'iframe', 'object', 'embed', 'link', 'meta']
                                // DOMPurify already strips event handlers like onclick by default
                        };

                        // Safe sanitizer wrapper: uses DOMPurify if present, else escapes as plain text.
                        const sanitize = (html) => {
                                if (window.DOMPurify && typeof window.DOMPurify.sanitize === 'function') {
                                        return window.DOMPurify.sanitize(html, SANITIZE_CFG);
                                }
                                console.warn('[sanitizer] DOMPurify missing — falling back to escapeHtml');
                                return Utils.escapeHtml(html);
                        };


                        // State management namespace
                        const State = {
                                ALERT_ID: null,               // will be filled by VA
                                ALERT_ID_SOURCE: 'unset',     // track the source for diagnostics
                                resolveAlertIdReady: null,
                                alertIdReady: null,
                                chatHistory: [],              // Rolling window of the most recent exchanges to preserve context
                                summaryCache: null,
                                chatCache: null,
                                summaryMasPromise: null,
                                chatMasPromise: null,
                                chatBusy: false,              // true while a request is in flight
                                csrfToken: null

                        };

                        // Initialize the promise
                        State.alertIdReady = new Promise(r => (State.resolveAlertIdReady = r));

                        // UI namespace - cache DOM elements
                        const UI = {
                                elements: {},

                                init() {
                                        // ===== UI ELEMENT REFERENCES =====
                                        this.elements = {
                                                summarizeBtn: document.getElementById('summarizeBtn'),
                                                summaryEl: document.getElementById('summary'),
                                                commentsEl: document.getElementById('comments'),
                                                charCountEl: document.getElementById('charCount'),
                                                saveBtn: document.getElementById('saveBtn'),
                                                clearBtn: document.getElementById('clearBtn'),
                                                toast: document.getElementById('toast'),
                                                modelSelect: document.getElementById('modelSelect'),
                                                chatMessages: document.getElementById('chatMessages'),
                                                chatText: document.getElementById('chatText'),
                                                chatSendBtn: document.getElementById('chatSendBtn'),
                                                cardEl: document.querySelector('.card'),
                                                titleEl: document.getElementById('title'),
                                                subtitleEl: document.querySelector('.subtitle'),
                                                toggleEl: document.getElementById('viewToggle')
                                        };

                                        // Disable summarize until an ALERT_ID exists (prevents premature calls).
                                        this.elements.summarizeBtn.disabled = true;
                                },

                                // ==========================================================
                                // TOAST & LOADING RENDER HELPERS
                                // ==========================================================
                                showToast(msg) {
                                        this.elements.toast.textContent = msg;
                                        this.elements.toast.classList.add('show');
                                        setTimeout(() => this.elements.toast.classList.remove('show'), 1400);
                                },

                                renderWorking(message) {
                                        // Shows a status line + shimmering skeleton to indicate progress
                                        this.elements.summaryEl.innerHTML = `<div class="working">${message}<span class="dots"><i></i><i></i><i></i></span></div>
      <div class="skel"><div class="line" style="width:88%"></div><div class="line" style="width:96%"></div><div class="line" style="width:72%"></div></div>`;
                                },

                                // ==========================================================
                                // VIEW TOGGLE BEHAVIOR
                                // - setView(true)  -> Chat mode
                                // - setView(false) -> Summary mode
                                // - Updates ARIA and titles/subtitles accordingly
                                // ==========================================================
                                setView(showChat) {
                                        this.elements.cardEl.classList.toggle('show-chat', showChat);
                                        this.elements.titleEl.textContent = showChat ? 'Alert Chat' : 'Alert Summarizer';
                                        this.elements.subtitleEl.textContent = showChat
                                                ? 'Converse with our chatbot for alert insights.'
                                                : 'Generate a concise summary with one click.';
                                        this.elements.toggleEl.setAttribute('aria-checked', showChat ? 'true' : 'false');
                                }
                        };

                        // Utility functions namespace
                        const Utils = {
                                // next animation frame helper (await to ensure UI paints)
                                nextFrame: () => new Promise(requestAnimationFrame),

                                // Escape user-provided text for safe HTML insertion
                                escapeHtml(s) {
                                        return s.replace(/[&<>"']/g, m => ({
                                                "&": "&amp;",
                                                "<": "&lt;",
                                                ">": "&gt;",
                                                "\"": "&quot;",
                                                "'": "&#39;"
                                        }[m]));
                                },

                                outputsToMap(outputs) {
                                        const m = {};
                                        (outputs || []).forEach(o => m[o.name] = o.value);
                                        return m;
                                },

                                trimChars(s, max = 8000) {
                                        if (!s) return '';
                                        return s.length <= max ? s : (s.slice(0, max) + '\n[...trimmed]');
                                },

                                // Auto-expand the comment box
                                autoResize(el) {
                                        el.style.height = 'auto';
                                        el.style.height = el.scrollHeight + 'px';
                                }
                        };

                        // API namespace
                        const API = {
                                // ==========================================================
                                // NETWORK/FORMAT HELPERS
                                // - getCsrfToken: prime CSRF token by hitting MAS index
                                // - extractOpenAIText: normalize Responses API shapes into text
                                // ==========================================================
                                async getCsrfToken() {
                                        if (State.csrfToken !== null) return State.csrfToken; // cached ('' if none)
                                        const res = await fetch(Config.CSRF_PRIMER_URL, { method: 'GET', credentials: 'include' });
                                        State.csrfToken =
                                                res.headers.get('X-CSRF-TOKEN') ||
                                                res.headers.get('x-csrf-token') ||
                                                '';
                                        return State.csrfToken;
                                },

                                extractOpenAIText(j) {
                                        // Responses API can return:
                                        // - output_text (string)
                                        // - output: [{content:[{type:'output_text', text:'...'}]}]
                                        // - chat-style: choices[0].message.content
                                        if (j && typeof j.output_text === 'string' && j.output_text.trim()) return j.output_text;
                                        if (Array.isArray(j?.output)) {
                                                for (const item of j.output) {
                                                        const content = item?.content;
                                                        if (Array.isArray(content)) {
                                                                for (const c of content) {
                                                                        if (typeof c?.text === 'string' && c.text.trim()) return c.text;
                                                                        if (c?.type === 'output_text' && c?.text) return c.text;
                                                                }
                                                        }
                                                }
                                        }
                                        if (j?.choices?.[0]?.message?.content) return j.choices[0].message.content;
                                        return null;
                                },

                                async callOpenAI(systemPrompt, apiKey, chosen_model = Config.OPENAI_CHAT_MODEL, onDelta /* optional */) {
                                        const body = {
                                                model: chosen_model,
                                                input: systemPrompt,
                                                reasoning: { effort: "medium" },
                                                text: { verbosity: "low" },
                                                stream: !!onDelta
                                        };

                                        const res = await fetch(Config.OPENAI_URL, {
                                                method: 'POST',
                                                headers: {
                                                        'Authorization': `Bearer ${apiKey}`,
                                                        'Content-Type': 'application/json',
                                                        'Accept': onDelta ? 'text/event-stream' : 'application/json'
                                                },
                                                body: JSON.stringify(body)
                                        });

                                        // Non-streaming: expect JSON with output_text/choices
                                        if (!onDelta) {
                                                const json = await res.json().catch(() => ({}));
                                                if (!res.ok) throw new Error(`${res.status} ${res.statusText}\n${JSON.stringify(json).slice(0, 500)}`);
                                                const txt = API.extractOpenAIText(json);
                                                if (!txt) throw new Error('LLM returned no text payload');
                                                return txt;
                                        }

                                        // --- Streaming path (SSE) ---
                                        if (!res.ok || !res.body) {
                                                const text = await res.text().catch(() => '');
                                                throw new Error(`${res.status} ${res.statusText}\n${text.slice(0, 500)}`);
                                        }

                                        const reader = res.body.getReader();
                                        const decoder = new TextDecoder();
                                        let carry = '';
                                        let full = '';

                                        while (true) {
                                                const { value, done } = await reader.read();
                                                if (done) break;
                                                carry += decoder.decode(value, { stream: true });

                                                // Split Server-Sent-Event frames
                                                const frames = carry.split('\n\n');
                                                carry = frames.pop() || '';

                                                for (const frame of frames) {
                                                        // concatenate all data: lines in the frame
                                                        const dataLines = frame
                                                                .split('\n')
                                                                .filter(l => l.startsWith('data:'))
                                                                .map(l => l.slice(5).trim())
                                                                .join('\n');

                                                        if (!dataLines || dataLines === '[DONE]') continue;

                                                        let evt;
                                                        try { evt = JSON.parse(dataLines); } catch { continue; }

                                                        if (evt.type === 'response.output_text.delta') {
                                                                const delta = evt.delta || '';
                                                                if (delta) {
                                                                        full += delta;
                                                                        try { onDelta(delta, full, evt); } catch { /* avoid breaking stream */ }
                                                                }
                                                        } else if (evt.type === 'error') {
                                                                throw new Error(evt.error?.message || 'Streaming error');
                                                        }
                                                        // Other event types (created/completed) are ignored for now
                                                }
                                        }
                                        return full.trim();
                                }
                        };

                        // Summary namespace
                        const Summary = {
                                // ==========================================================
                                // MAS PREFETCH
                                // - Pre-call SAS MAS to build prompts/keys for Summary and Chat.
                                // - Results cached in summaryCache/chatCache; promises guard duplicate calls.
                                // ==========================================================

                                // Prefetch summary-specific prompt/key/cutoff from MAS
                                async prefetchSummary() {
                                        await State.alertIdReady;
                                        const csrf = await API.getCsrfToken();
                                        const payload = {
                                                inputs: [
                                                        { name: "ALERT_ID_", value: State.ALERT_ID },
                                                        { name: "SUMMARY_OR_CHAT_", value: "summary" }
                                                ]
                                        };
                                        const res = await fetch(Config.MODULE_URI, {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrf },
                                                credentials: 'include',
                                                body: JSON.stringify(payload)
                                        });

                                        // MAS returns an outputs array [{name, value}, ...]; normalize to map
                                        const json = await res.json().catch(() => ({}));

                                        if (!res.ok) {
                                                // surface server error payload if present
                                                throw new Error(`${res.status} ${res.statusText}\n${JSON.stringify(json).slice(0, 500)}`);
                                        }

                                        const out = Utils.outputsToMap(json.outputs || []);
                                        State.summaryCache = {
                                                systemPrompt: out['systemPrompt'],
                                                key: out['key'],
                                                cutoff: out['CUTOFF_DATE']
                                        };

                                        return State.summaryCache;
                                },

                                // Prefetch chat-specific data string + key from MAS
                                async prefetchChat() {
                                        await State.alertIdReady;
                                        const csrf = await API.getCsrfToken();
                                        const payload = {
                                                inputs: [
                                                        { name: "ALERT_ID_", value: State.ALERT_ID },
                                                        { name: "SUMMARY_OR_CHAT_", value: "chat" }
                                                ]
                                        };
                                        const res = await fetch(Config.MODULE_URI, {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': csrf },
                                                credentials: 'include',
                                                body: JSON.stringify(payload)
                                        });
                                        const json = await res.json().catch(() => ({}));

                                        if (!res.ok) {
                                                throw new Error(`${res.status} ${res.statusText}\n${JSON.stringify(json).slice(0, 500)}`);
                                        }

                                        const out = Utils.outputsToMap(json.outputs || []);
                                        State.chatCache = {
                                                dataString: out['systemPrompt'] || '',
                                                key: out['key']
                                        };

                                        return State.chatCache;
                                },

                                // Kick off MAS/OpenAI prefetch in an idempotent way.
                                // - Prefetches Summary first (prompt/key/cutoff), then Chat (data string/key).
                                // - Caches the in-flight Promises so repeated calls don't duplicate network work.
                                // - Safe to call as soon as ALERT_ID is set; internals await alertIdReady.
                                startPrefetch() {
                                        if (!State.summaryMasPromise)
                                                State.summaryMasPromise = this.prefetchSummary().catch(e => {
                                                        console.error('[prefetch summary]', e);
                                                        State.summaryMasPromise = null;
                                                        throw e;
                                                });
                                        if (!State.chatMasPromise)
                                                State.chatMasPromise = (State.summaryMasPromise || this.prefetchSummary())
                                                        .then(() => this.prefetchChat())
                                                        .catch(e => {
                                                                console.error('[prefetch chat]', e);
                                                                State.chatMasPromise = null;
                                                                throw e;
                                                        });
                                },

                                // ==========================================================
                                // SUMMARY ACTION
                                // - Waits for ALERT_ID
                                // - Shows rotating status messages
                                // - Streams Responses text into #summary
                                // - Appends cutoff note if provided by MAS
                                // ==========================================================
                                async summarize() {
                                        // Wait until VA supplies the alert id (or URL fallback)
                                        if (!State.ALERT_ID) {
                                                UI.renderWorking('Waiting for Alert ID from Visual Analytics');
                                                await State.alertIdReady;
                                        }
                                        console.log(`[id] summarize() with ALERT_ID=${State.ALERT_ID} (source=${State.ALERT_ID_SOURCE})`);

                                        UI.elements.summarizeBtn.disabled = true;
                                        UI.elements.summarizeBtn.classList.add('loading');
                                        UI.elements.summarizeBtn.setAttribute('aria-busy', 'true');

                                        let started = false;

                                        // Shuffle once and rotate on interval
                                        const shuffledMessages = [...Config.LOADING_MESSAGES].sort(() => Math.random() - 0.5);
                                        let msgIndex = 0;

                                        UI.renderWorking(shuffledMessages[msgIndex]);
                                        await Utils.nextFrame();

                                        const timer = setInterval(() => {
                                                if (started) return;
                                                msgIndex = (msgIndex + 1) % shuffledMessages.length;
                                                UI.renderWorking(shuffledMessages[msgIndex]);
                                        }, Config.ROTATE_MS);

                                        // Mark the toggle as "busy" to show mini-dots when on Chat view
                                        UI.elements.toggleEl.classList.add('is-summarizing');
                                        UI.elements.toggleEl.setAttribute('aria-busy', 'true');

                                        let rafId = null;

                                        try {
                                                // Call OpenAI with MAS-provided key
                                                const chosenModel = UI.elements.modelSelect.value || Config.OPENAI_SUMMARY_MODEL;
                                                const s = State.summaryCache || await (State.summaryMasPromise || (this.startPrefetch(), State.summaryMasPromise));
                                                if (!s?.systemPrompt) throw new Error('Summary data not ready from MAS');
                                                if (!s?.key) throw new Error('OpenAI API key missing from MAS');
                                                let buffer = '';
                                                const flush = () => {
                                                        const safe = sanitize(buffer);
                                                        if (UI.elements.summaryEl.innerHTML !== safe) {
                                                                UI.elements.summaryEl.innerHTML = safe; // one DOM write per frame
                                                        }
                                                        rafId = null;
                                                };

                                                let finalText = await API.callOpenAI(
                                                        s.systemPrompt,
                                                        s.key,
                                                        chosenModel,
                                                        (_delta, full) => {
                                                                if (!started) {
                                                                        started = true;
                                                                        clearInterval(timer);         // stop the skeleton/rotator immediately
                                                                }
                                                                buffer = full;
                                                                if (!rafId) rafId = requestAnimationFrame(flush);
                                                        }
                                                );

                                                // Final synchronous write (includes cutoff if present)
                                                // Build cutoff as an allowed tag and escape its text
                                                const cutoffHtml = s.cutoff ? `<p class="cutoff">${Utils.escapeHtml(s.cutoff)}</p>` : '';

                                                const finalSafe = sanitize(finalText + cutoffHtml);

                                                // Ensure anything pending is canceled, then do one last write
                                                if (rafId) { cancelAnimationFrame(rafId); rafId = null; }
                                                UI.elements.summaryEl.innerHTML = finalSafe;

                                        } catch (e) {
                                                UI.elements.summaryEl.textContent = `Error:\n${e.message}`;
                                                console.error(e);
                                        } finally {
                                                clearInterval(timer);
                                                UI.elements.summarizeBtn.disabled = false;
                                                UI.elements.summarizeBtn.classList.remove('loading');
                                                UI.elements.summarizeBtn.setAttribute('aria-busy', 'false');
                                                UI.elements.toggleEl.classList.remove('is-summarizing');
                                                UI.elements.toggleEl.removeAttribute('aria-busy');
                                                if (rafId) { cancelAnimationFrame(rafId); rafId = null; }
                                        }
                                }
                        };

                        // Chat namespace
                        const Chat = {
                                // ==========================================================
                                // CHAT PROMPT BUILDER
                                // - Assembles a single string prompt with SYSTEM + HISTORY + DATA + USER
                                // - Restricts customer-specific claims to MAS-provided Data section
                                // ==========================================================
                                // Build the chat system prompt locally using MAS "chat" data string + user message.
                                buildChatPrompt(dataString, userMessage, history = []) {
                                        const system = [
                                                'You are a concise, friendly AML assistant embedded in the SAS AML solution.',
                                                'Customer/alert-specific facts MUST come only from the Data section.',
                                                'If a requested detail is missing in Data, be very clear that it is missing. Do not invent values.',
                                                'You MAY add general AML knowledge (regulations, definitions, typologies).',
                                                'Write in clear, friendly, natural prose — no bullet points. Keep it brief.',
                                                'Start by directly answering the question',
                                                'Only answer questions related to AML',
                                                'Avoid exposing or inferring PII beyond what appears in Data.',
                                                `Alert ID: ${State.ALERT_ID || 'unknown'}`
                                        ].join(' ');

                                        // Use up to the last 3 exchanges (i.e., 6 messages), excluding the current user message if already added.
                                        let hist = Array.isArray(history) ? history.slice() : [];
                                        if (hist.length && hist[hist.length - 1].role === 'user') hist.pop(); // drop current turn if already pushed
                                        const recent = hist.slice(-6);
                                        const historyBlock = recent.map(m => `${m.role.toUpperCase()}: ${m.content}`).join('\n');

                                        return [
                                                `SYSTEM:\n${system}`,
                                                historyBlock ? `HISTORY (last ${Math.floor(recent.length / 2)} exchanges):\n${Utils.trimChars(historyBlock, 2000)}` : null,
                                                `DATA:\n${Utils.trimChars(dataString, 7000)}`,
                                                `USER:\n${userMessage}`,
                                                'ASSISTANT:'
                                        ].filter(Boolean).join('\n\n');
                                },

                                // ==========================================================
                                // OPENAI CALLERS (chat + shared streaming)
                                // - chatQuery: resolves MAS chat data, builds prompt, calls Responses
                                // ==========================================================
                                async chatQuery(userText, onDelta) {
                                        // Ensure we have an ALERT_ID (VA or URL)
                                        if (!State.ALERT_ID) {
                                                this.addMessage('bot', '<em>Waiting for Alert ID from Visual Analytics…</em>');
                                                await State.alertIdReady;
                                        }

                                        const cc = State.chatCache || await (State.chatMasPromise || (Summary.startPrefetch(), State.chatMasPromise));
                                        const apiKey = cc.key || State.summaryCache?.key;
                                        if (!apiKey) throw new Error('OpenAI API key not found in MAS output');

                                        const prompt = this.buildChatPrompt(cc.dataString, userText, State.chatHistory);
                                        const reply = await API.callOpenAI(prompt, apiKey, Config.OPENAI_CHAT_MODEL, onDelta);
                                        return reply.trim();
                                },

                                // ==========================================================
                                // CHAT FRONTEND: MESSAGE FLOW & INPUT HANDLING
                                // - addMessage: renders a bubble (user/bot)
                                // - showBotThinking: temporary "typing" bubble
                                // - handleSend: orchestrates send -> stream -> finalize
                                // ==========================================================

                                // Enable/disable Send based on input emptiness and busy state
                                refreshSend() {
                                        const empty = UI.elements.chatText.value.trim().length === 0;
                                        UI.elements.chatSendBtn.disabled = State.chatBusy || empty; // reuse .btn-primary:disabled styling
                                },

                                // Render a new message bubble (html content is trusted/escaped by caller)
                                addMessage(role, html) {
                                        const wrap = document.createElement('div');
                                        wrap.className = 'msg ' + role;
                                        const bubble = document.createElement('div');
                                        bubble.className = 'bubble';
                                        bubble.innerHTML = html;
                                        wrap.appendChild(bubble);
                                        UI.elements.chatMessages.appendChild(wrap);
                                        UI.elements.chatMessages.scrollTop = UI.elements.chatMessages.scrollHeight;
                                },

                                // Show a temporary "Thinking..." bubble with animated dots
                                showBotThinking() {
                                        const wrap = document.createElement('div');
                                        wrap.className = 'msg bot';
                                        const bubble = document.createElement('div');
                                        bubble.className = 'bubble';
                                        bubble.innerHTML = `<span class="typing">Thinking<span class="dots"><i></i><i></i><i></i></span></span>`;
                                        wrap.appendChild(bubble);
                                        UI.elements.chatMessages.appendChild(wrap);
                                        UI.elements.chatMessages.scrollTop = UI.elements.chatMessages.scrollHeight;
                                        return { bubble, stop: () => { wrap.remove(); } };
                                },

                                // Send handler: push user msg, stream bot reply, maintain chatHistory window
                                async handleSend() {
                                        const text = UI.elements.chatText.value.trim();
                                        if (!text) return;

                                        this.addMessage('user', Utils.escapeHtml(text));
                                        State.chatHistory.push({ role: 'user', content: text });
                                        UI.elements.chatText.value = '';
                                        State.chatBusy = true;
                                        this.refreshSend();

                                        const thinking = this.showBotThinking();
                                        await Utils.nextFrame(); // ensure typing anim paints

                                        let stopped = false;
                                        let chatRaf = null;
                                        let chatBuf = '';
                                        const messagesEl = UI.elements.chatMessages;            //  cache refs
                                        const bubbleEl = thinking.bubble;

                                        try {
                                                const chatFlush = () => {
                                                        if (bubbleEl.innerHTML !== chatBuf) {
                                                                bubbleEl.innerHTML = chatBuf;
                                                        }
                                                        messagesEl.scrollTop = messagesEl.scrollHeight;
                                                        chatRaf = null;
                                                        stopped = true;
                                                };

                                                const final = await this.chatQuery(text, (_delta, full) => {
                                                        chatBuf = Utils.escapeHtml(full).replace(/\n/g, '<br>');
                                                        if (!chatRaf) chatRaf = requestAnimationFrame(chatFlush);
                                                });

                                                // 🔧 guarantee last frame: cancel pending RAF and write final HTML once
                                                if (chatRaf) { cancelAnimationFrame(chatRaf); chatRaf = null; }
                                                const finalHtml = Utils.escapeHtml(final).replace(/\n/g, '<br>');
                                                if (bubbleEl.innerHTML !== finalHtml) {
                                                        bubbleEl.innerHTML = finalHtml;
                                                        messagesEl.scrollTop = messagesEl.scrollHeight;
                                                }
                                                stopped = true;

                                                State.chatHistory.push({ role: 'assistant', content: final });
                                                // Keep only the latest 3 exchanges (6 messages)
                                                if (State.chatHistory.length > 6) {
                                                        State.chatHistory.splice(0, State.chatHistory.length - 6);
                                                }
                                        } catch (e) {
                                                bubbleEl.innerHTML = `<em>Sorry, I couldn't complete that: ${Utils.escapeHtml(e.message)}</em>`;
                                                console.error('[chat] error:', e);
                                                // Roll back last user entry if request failed early
                                                if (State.chatHistory.length && State.chatHistory[State.chatHistory.length - 1].role === 'user') {
                                                        State.chatHistory.pop();
                                                }
                                        } finally {
                                                // If no delta ever arrived (error before stream), remove the typing bubble
                                                if (!stopped && thinking.stop) thinking.stop();
                                                State.chatBusy = false;
                                                this.refreshSend();
                                                UI.elements.chatText.focus();
                                                if (chatRaf) { cancelAnimationFrame(chatRaf); chatRaf = null; }
                                        }
                                }

                        };

                        // Comments namespace
                        const Comments = {
                                // ==========================================================
                                // COMMENTS: LOCAL STORAGE PERSISTENCE
                                // - saveComment stores a timestamped entry under a fixed key
                                // - clearComment resets the field and counter
                                // ==========================================================
                                saveComment() {
                                        const key = 'aml-summary-comments';
                                        const existing = JSON.parse(localStorage.getItem(key) || '[]');
                                        const entry = {
                                                ts: new Date().toISOString(),
                                                alertId: State.ALERT_ID,
                                                comment: UI.elements.commentsEl.value.trim(),
                                                summary: UI.elements.summaryEl.textContent.trim()
                                        };
                                        if (!entry.comment) {
                                                UI.showToast('Nothing to save');
                                                return;
                                        }
                                        existing.push(entry);
                                        localStorage.setItem(key, JSON.stringify(existing));
                                        UI.showToast('Comment saved locally');
                                },

                                clearComment() {
                                        UI.elements.commentsEl.value = '';
                                        UI.elements.commentsEl.dispatchEvent(new Event('input'));
                                        UI.showToast('Cleared');
                                }
                        };

                        // Initialization namespace
                        const Init = {
                                // ==========================================================
                                // ALERT ID RESOLUTION (URL first, then VA message bus)
                                // - URL ?alertId=... is used initially; if VA later provides a parameter value, it will replace the URL one.
                                // NOTE: Assumes `va.messagingUtil` is available (running inside SAS VA).
                                // ==========================================================
                                checkAlertId() {
                                        console.log('[id] init: waiting for alert id (from VA or URL)');

                                        // 1) If an alertId is provided via URL use it
                                        const urlAlertId = new URLSearchParams(location.search).get('alertId');
                                        if (urlAlertId) {
                                                State.ALERT_ID = urlAlertId;
                                                State.ALERT_ID_SOURCE = 'url';
                                                console.log('[id] Using URL parameter ?alertId=', State.ALERT_ID);
                                                State.resolveAlertIdReady?.(State.ALERT_ID);
                                                UI.elements.summarizeBtn.disabled = false;
                                                Summary.startPrefetch();
                                                console.log('[id] summarizeBtn enabled (source=url)');
                                        }

                                        // 2) Primary path: get alert id from VA (parameter preferred, else data cell)
                                        va.messagingUtil.setOnDataReceivedCallback(function (vaMsgObj) {
                                                console.log('[id] VA message received:', vaMsgObj);

                                                // Prefer first parameter value if available
                                                const paramVal = vaMsgObj?.parameters?.[0]?.value;

                                                console.log('[id] candidates -> paramVal:', paramVal);

                                                if (paramVal != null) {  // Only override if VA actually has a value
                                                        State.ALERT_ID = String(paramVal);

                                                        State.ALERT_ID_SOURCE = 'va-parameter';
                                                        console.log(`[id] Using ${State.ALERT_ID_SOURCE}: ${State.ALERT_ID}`);
                                                        State.resolveAlertIdReady?.(State.ALERT_ID);          // resolve the waiters (first time)
                                                        UI.elements.summarizeBtn.disabled = false;            // enable the button now that we have it
                                                        Summary.startPrefetch();
                                                        console.log(`[id] summarizeBtn enabled (source=${State.ALERT_ID_SOURCE})`);
                                                }
                                        });
                                },

                                setupComments() {
                                        // ==========================================================
                                        // COMMENTS UX
                                        // - Auto-resize textarea
                                        // - Enforce character limit
                                        // ==========================================================

                                        UI.elements.commentsEl.addEventListener('input', () => Utils.autoResize(UI.elements.commentsEl));
                                        window.addEventListener('load', () => Utils.autoResize(UI.elements.commentsEl));
                                        UI.elements.commentsEl.addEventListener('input', () => {
                                                if (UI.elements.commentsEl.value.length > Config.COMMENT_LIMIT) {
                                                        UI.elements.commentsEl.value = UI.elements.commentsEl.value.slice(0, Config.COMMENT_LIMIT);
                                                }
                                                UI.elements.charCountEl.textContent = `${UI.elements.commentsEl.value.length} / ${Config.COMMENT_LIMIT}`;
                                        });
                                        // Initialize count on load
                                        UI.elements.commentsEl.dispatchEvent(new Event('input'));
                                },

                                bindEvents() {
                                        // Wire up Summary actions
                                        UI.elements.summarizeBtn.addEventListener('click', () => Summary.summarize());
                                        UI.elements.saveBtn.addEventListener('click', () => Comments.saveComment());    // Saves to localStorage only (per-browser, per-user). No server persistence.
                                        UI.elements.clearBtn.addEventListener('click', () => Comments.clearComment());

                                        // initialize + update on typing
                                        Chat.refreshSend();
                                        UI.elements.chatText.addEventListener('input', () => Chat.refreshSend());

                                        // Keyboard + click bindings for chat send
                                        UI.elements.chatSendBtn.addEventListener('click', () => Chat.handleSend());
                                        UI.elements.chatText.addEventListener('keydown', (e) => {
                                                if (e.key === 'Enter' && !e.shiftKey) {
                                                        e.preventDefault();
                                                        Chat.handleSend();
                                                }
                                        });

                                        // click anywhere on the toggle to switch
                                        UI.elements.toggleEl.addEventListener('click', () => UI.setView(!UI.elements.cardEl.classList.contains('show-chat')));
                                },

                                init() {
                                        UI.init();
                                        this.checkAlertId();
                                        this.setupComments();
                                        this.bindEvents();

                                        // Seed with a welcome message (helps discoverability)
                                        Chat.addMessage('bot',
                                                "Hi! I am a friendly chatbot that will use the alert data and my general AML knowledge to help you. What's on your mind?");

                                        // default to Summary view
                                        UI.setView(false);
                                }
                        };

                        // Initialize the application
                        Init.init();

                })();
        </script>
</body>

</html>
