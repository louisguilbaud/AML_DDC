<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>VA Parameter Echo</title>
    <script src="./javascripts/sas/util/messagingUtil.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.4.2/mammoth.browser.min.js"></script>
    <!-- PDF.js library for PDF text extraction -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <style>
        body {
            font: 14px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Arial;
            margin: 16px;
        }

        pre {
            background: #fafafa;
            border: 1px solid #eee;
            padding: 12px;
            border-radius: 10px;
            white-space: pre-wrap
        }

        .file-section {
            margin-top: 20px;
        }

        .file-count {
            color: #777;
            margin-left: 8px;
        }

        .processing-status {
            color: #0066cc;
            font-style: italic;
        }
    </style>
</head>

<body>
    <h1>VA Parameter Echo</h1>
    <pre id="out">Waiting for VA parameters…</pre>

    <div class="file-section">
        <label for="fileSelect">Document</label>
        <select id="fileSelect">
            <option value="">— select a file —</option>
        </select>
        <small id="fileCount" class="file-count"></small>
    </div>

    <div class="text-section" style="margin-top: 20px;">
        <h3>File Content</h3>
        <pre id="fileContent" style="max-height: 400px; overflow-y: auto; background: #f5f5f5;">Select a file to view its content...</pre>
    </div>

    <script>
        /**
         * VA Document Summarizer Application
         * Modular architecture for maintainability and future development
         */
        const DocumentSummarizerApp = (() => {
            
            // =============================================================================
            // CONFIGURATION
            // =============================================================================
            const CONFIG = {
                SAS_SERVER: 'https://sasserver.demo.sas.com',
                SAS_AUTH: {
                    CLIENT_ID: 'sas.cli',  // Default SAS CLI client ID
                    CLIENT_SECRET: '',     // Usually empty for CLI client
                    TOKEN_ENDPOINT: '/SASLogon/oauth/token'
                },
                PARAMETER_INDEXES: {
                    alertId: 0,
                    openaiKey: 1,
                    sasUser: 2,
                    sasPass: 3
                },
                VA_RETRY_INTERVAL: 1000,
                ELEMENTS: {
                    output: 'out',
                    fileSelect: 'fileSelect',
                    fileCount: 'fileCount',
                    fileContent: 'fileContent'
                },
                PDF: {
                    WORKER_SRC: 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js'
                }
            };

            // Initialize PDF.js worker
            if (typeof pdfjsLib !== 'undefined') {
                pdfjsLib.GlobalWorkerOptions.workerSrc = CONFIG.PDF.WORKER_SRC;
            }

            // =============================================================================
            // UTILITIES
            // =============================================================================
            const Utils = {
                /**
                 * Get parameter value by index from VA parameters array
                 */
                getParamByIndex(params, index) {
                    return (Array.isArray(params) && params[index]) ? params[index].value : undefined;
                },

                /**
                 * Create query string from object
                 */
                createQueryString(obj) {
                    return new URLSearchParams(obj).toString();
                },

                /**
                 * Log with consistent formatting
                 */
                log(category, message, data = null) {
                    const logMessage = `[${category}] ${message}`;
                    if (data) {
                        console.log(logMessage, data);
                    } else {
                        console.log(logMessage);
                    }
                }
            };

            // =============================================================================
            // UI MANAGER
            // =============================================================================
            const UIManager = {
                /**
                 * Update the main output display
                 */
                updateOutput(message, append = false) {
                    const element = document.getElementById(CONFIG.ELEMENTS.output);
                    if (element) {
                        element.textContent = append ? element.textContent + message : message;
                    }
                },

                /**
                 * Append to the main output display
                 */
                appendOutput(message) {
                    this.updateOutput(`\n${message}`, true);
                },

                /**
                 * Populate the file dropdown with files
                 */
                populateFileDropdown(files) {
                    const selectEl = document.getElementById(CONFIG.ELEMENTS.fileSelect);
                    const countEl = document.getElementById(CONFIG.ELEMENTS.fileCount);
                    
                    if (!selectEl || !countEl) return;

                    // Clear and add default option
                    selectEl.innerHTML = '<option value="">— select a file —</option>';
                    
                    // Add file options
                    files.forEach(file => {
                        const id = file.id || file.fileId;
                        const name = file.name || file.fileName || id;
                        const option = document.createElement('option');
                        option.value = id;
                        option.textContent = name;
                        selectEl.appendChild(option);
                    });

                    // Update count display
                    const countText = files.length ? `(${files.length} files)` : '(no files)';
                    countEl.textContent = countText;
                    
                    return countText;
                },

                /**
                 * Show error state
                 */
                showError(message) {
                    this.appendOutput(`\nError: ${message}`);
                    const countEl = document.getElementById(CONFIG.ELEMENTS.fileCount);
                    if (countEl) {
                        countEl.textContent = '(error loading files)';
                    }
                },

                /**
                 * Display file content in the content area
                 */
                displayFileContent(content, loading = false, status = null) {
                    const contentEl = document.getElementById(CONFIG.ELEMENTS.fileContent);
                    if (contentEl) {
                        if (loading) {
                            const statusText = status ? ` - ${status}` : '';
                            contentEl.innerHTML = `<span class="processing-status">Loading file content${statusText}...</span>`;
                        } else {
                            contentEl.textContent = content;
                        }
                    }
                },

                /**
                 * Setup event listeners for UI interactions
                 */
                setupEventListeners() {
                    const fileSelect = document.getElementById(CONFIG.ELEMENTS.fileSelect);
                    if (fileSelect) {
                        fileSelect.addEventListener('change', (event) => {
                            const fileId = event.target.value;
                            if (fileId) {
                                Utils.log('UI', `File selected: ${fileId}`);
                                // Trigger file content loading - will be handled by App
                                if (window.DocumentSummarizerApp && window.DocumentSummarizerApp._onFileSelected) {
                                    window.DocumentSummarizerApp._onFileSelected(fileId);
                                }
                            } else {
                                this.displayFileContent('Select a file to view its content...');
                            }
                        });
                    }
                }
            };

            // =============================================================================
            // API SERVICE
            // =============================================================================
            const APIService = {
                // Store token for reuse
                _accessToken: null,
                
                /**
                 * Get SAS access token using OAuth2 password grant
                 */
                async getSASToken(username, password) {
                    const url = `${CONFIG.SAS_SERVER}${CONFIG.SAS_AUTH.TOKEN_ENDPOINT}`;
                    
                    Utils.log('AUTH', `Getting SAS token from: ${url}`);
                    
                    try {
                        // Create basic auth header
                        const credentials = btoa(`${CONFIG.SAS_AUTH.CLIENT_ID}:${CONFIG.SAS_AUTH.CLIENT_SECRET}`);
                        
                        // Prepare form data
                        const formData = new URLSearchParams({
                            'grant_type': 'password',
                            'username': username,
                            'password': password
                        });

                        const response = await fetch(url, {
                            method: 'POST',
                            headers: {
                                'Authorization': `Basic ${credentials}`,
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Accept': 'application/json'
                            },
                            body: formData
                        });

                        if (!response.ok) {
                            throw new Error(`Authentication failed: HTTP ${response.status} ${response.statusText}`);
                        }

                        const data = await response.json();
                        Utils.log('AUTH', 'Token received successfully');
                        
                        // Cache the token
                        this._accessToken = data.access_token;
                        
                        return data.access_token;
                    } catch (error) {
                        Utils.log('AUTH', 'Token request failed', error);
                        throw new Error(`Failed to get SAS token: ${error.message}`);
                    }
                },

                /**
                 * Get current access token (cached or fetch new one)
                 */
                async getAccessToken(username, password) {
                    if (!this._accessToken) {
                        this._accessToken = await this.getSASToken(username, password);
                    }
                    return this._accessToken;
                },

                /**
                 * Clear cached token (useful for re-authentication)
                 */
                clearToken() {
                    this._accessToken = null;
                    Utils.log('AUTH', 'Token cache cleared');
                },

                /**
                 * Fetch files for a given alert ID (now with authentication)
                 */
                async fetchAlertFiles(alertId, username = null, password = null) {
                    const url = `${CONFIG.SAS_SERVER}/svi-datahub/documents/alerts/${encodeURIComponent(alertId)}/files`;
                    
                    Utils.log('API', `Fetching files from: ${url}`);
                    UIManager.appendOutput('Fetching files from SAS API...');

                    try {
                        let headers = {
                            'Accept': 'application/json'
                        };

                        // Add authentication if credentials provided
                        if (username && password) {
                            try {
                                const token = await this.getAccessToken(username, password);
                                headers['Authorization'] = `Bearer ${token}`;
                                Utils.log('API', 'Using authenticated request');
                            } catch (authError) {
                                Utils.log('API', 'Authentication failed, trying unauthenticated request', authError);
                                UIManager.appendOutput('\nAuthentication failed, trying without auth...');
                            }
                        }

                        const response = await fetch(url, {
                            method: 'GET',
                            headers: headers
                        });
                        
                        Utils.log('API', `Response status: ${response.status}`);
                        
                        if (!response.ok) {
                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        }

                        const data = await response.json();
                        Utils.log('API', 'Full response received', data);
                        
                        // Normalize response - handle different possible structures
                        const files = Array.isArray(data) ? data : (data.items || data.files || []);
                        
                        Utils.log('FILES', `Parsed ${files.length} files`, files[0]);
                        
                        return files;
                    } catch (error) {
                        Utils.log('API', 'Fetch failed', error);
                        throw error;
                    }
                },

                /**
                 * Get raw file content from SAS
                 */
                async getFileContent(alertId, fileId, username, password) {
                    const url = `${CONFIG.SAS_SERVER}/svi-datahub/documents/alerts/${encodeURIComponent(alertId)}/files/${encodeURIComponent(fileId)}/content`;
                    
                    Utils.log('API', `Fetching file content: ${url}`);
                    
                    try {
                        const token = await this.getAccessToken(username, password);
                        
                        const response = await fetch(url, {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json',
                                'Authorization': `Bearer ${token}`
                            }
                        });
                        
                        if (!response.ok) {
                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        }
                        
                        const contentType = response.headers.get('Content-Type') || '';
                        Utils.log('API', `File content type: ${contentType}`);
                        
                        // Read response as arrayBuffer (single read)
                        const arrayBuffer = await response.arrayBuffer();
                        
                        // Return both content and content type for processing
                        return {
                            contentType: contentType,
                            arrayBuffer: arrayBuffer
                        };
                        
                    } catch (error) {
                        Utils.log('API', 'File content fetch failed', error);
                        throw error;
                    }
                },

                /**
                 * Extract text from PDF using PDF.js
                 */
                async extractTextFromPDF(arrayBuffer, onProgress = null) {
                    if (typeof pdfjsLib === 'undefined') {
                        throw new Error('PDF.js library not loaded');
                    }

                    try {
                        Utils.log('PDF', 'Loading PDF document');
                        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
                        const numPages = pdf.numPages;
                        
                        Utils.log('PDF', `PDF has ${numPages} pages`);
                        
                        let fullText = '';
                        
                        for (let pageNum = 1; pageNum <= numPages; pageNum++) {
                            if (onProgress) {
                                onProgress(`Processing page ${pageNum} of ${numPages}`);
                            }
                            
                            Utils.log('PDF', `Processing page ${pageNum}`);
                            
                            try {
                                const page = await pdf.getPage(pageNum);
                                const textContent = await page.getTextContent();
                                
                                const pageText = textContent.items
                                    .map(item => item.str)
                                    .join(' ')
                                    .trim();
                                
                                if (pageText) {
                                    fullText += `\n--- Page ${pageNum} ---\n${pageText}\n`;
                                } else {
                                    fullText += `\n--- Page ${pageNum} ---\n[No text content on this page]\n`;
                                }
                                
                                // Clean up page resources
                                page.cleanup();
                                
                            } catch (pageError) {
                                Utils.log('PDF', `Error processing page ${pageNum}`, pageError);
                                fullText += `\n--- Page ${pageNum} ---\n[Error reading page: ${pageError.message}]\n`;
                            }
                        }
                        
                        // Clean up PDF document
                        pdf.destroy();
                        
                        return fullText.trim() || '[No text content could be extracted from this PDF]';
                        
                    } catch (error) {
                        Utils.log('PDF', 'PDF processing failed', error);
                        throw new Error(`PDF text extraction failed: ${error.message}`);
                    }
                },

                /**
                 * Extract text from file based on content type
                 */
                async extractTextFromFile(fileData, onProgress = null) {
                    const { contentType, arrayBuffer } = fileData;
                    
                    try {
                        // Handle PDF files using PDF.js
                        if (contentType.includes('pdf')) {
                            Utils.log('EXTRACT', 'Processing PDF document');
                            return await this.extractTextFromPDF(arrayBuffer, onProgress);
                        }
                        
                        // Handle Word documents using mammoth
                        else if (contentType.includes('wordprocessingml.document') || 
                                contentType.includes('msword') || 
                                contentType.includes('word')) {
                            
                            Utils.log('EXTRACT', 'Processing Word document');
                            if (typeof mammoth !== 'undefined') {
                                if (onProgress) {
                                    onProgress('Extracting text from Word document');
                                }
                                const result = await mammoth.extractRawText({ arrayBuffer });
                                return result.value;
                            } else {
                                return `[WORD DOCUMENT DETECTED]\nContent type: ${contentType}\nFile size: ${arrayBuffer.byteLength} bytes\nMammoth.js not loaded - cannot extract text`;
                            }
                        }
                        
                        // Handle plain text files
                        else if (contentType.includes('text/plain') || contentType.includes('text/')) {
                            Utils.log('EXTRACT', 'Processing text file');
                            if (onProgress) {
                                onProgress('Reading text file');
                            }
                            const decoder = new TextDecoder('utf-8');
                            return decoder.decode(arrayBuffer);
                        }
                        
                        // Default: try to decode as text
                        else {
                            Utils.log('EXTRACT', `Unknown content type: ${contentType}, trying text decode`);
                            if (onProgress) {
                                onProgress('Attempting to read as text file');
                            }
                            const decoder = new TextDecoder('utf-8');
                            return decoder.decode(arrayBuffer);
                        }
                        
                    } catch (error) {
                        Utils.log('EXTRACT', 'Text extraction failed', error);
                        return `[ERROR EXTRACTING TEXT]\nContent type: ${contentType}\nError: ${error.message}\nFile size: ${arrayBuffer.byteLength} bytes`;
                    }
                },

                /**
                 * Future: Add other authenticated API methods here
                 * e.g., downloadFile, uploadFile, etc.
                 */
            };

            // =============================================================================
            // VA INTEGRATION
            // =============================================================================
            const VAIntegration = {
                /**
                 * Extract parameters from VA message object
                 */
                extractParameters(vaMsgObj) {
                    const params = vaMsgObj?.parameters || [];
                    const indexes = CONFIG.PARAMETER_INDEXES;
                    
                    return {
                        alertId: Utils.getParamByIndex(params, indexes.alertId),
                        openaiKey: Utils.getParamByIndex(params, indexes.openaiKey),
                        sasUser: Utils.getParamByIndex(params, indexes.sasUser),
                        sasPass: Utils.getParamByIndex(params, indexes.sasPass)
                    };
                },

                /**
                 * Handle incoming VA parameters
                 */
                async handleVAMessage(vaMsgObj) {
                    const params = this.extractParameters(vaMsgObj);
                    
                    Utils.log('VA', 'Parameters received', {
                        alertId: params.alertId,
                        hasOpenAI: !!params.openaiKey,
                        sasUser: params.sasUser,
                        hasPass: !!params.sasPass
                    });

                    // Update UI with parameter status
                    const paramStatus = [
                        `Alert ID: ${params.alertId || 'missing'}`,
                        `OpenAI Key: ${params.openaiKey ? 'present' : 'missing'}`,
                        `SAS User: ${params.sasUser || 'missing'}`,
                        `SAS Pass: ${params.sasPass ? 'present' : 'missing'}`
                    ].join('\n');
                    
                    UIManager.updateOutput(`Received parameters:\n${paramStatus}`);

                    // Store parameters for file operations
                    App.setCurrentParams(params);

                    // If we have the required parameters, fetch files
                    if (params.alertId && params.openaiKey && params.sasUser && params.sasPass) {
                        try {
                            const files = await APIService.fetchAlertFiles(
                                params.alertId, 
                                params.sasUser, 
                                params.sasPass
                            );
                            const countText = UIManager.populateFileDropdown(files);
                            UIManager.appendOutput(`\nAPI Response: ${countText}`);
                        } catch (error) {
                            UIManager.showError(error.message);
                        }
                    } else {
                        UIManager.appendOutput('\nMissing required parameters - cannot fetch files');
                    }
                },

                /**
                 * Initialize VA integration with retry logic
                 */
                initialize() {
                    const tryConnect = () => {
                        if (window.va && va.messagingUtil && typeof va.messagingUtil.setOnDataReceivedCallback === 'function') {
                            va.messagingUtil.setOnDataReceivedCallback(this.handleVAMessage.bind(this));
                            Utils.log('VA', 'Listener attached successfully');
                            UIManager.updateOutput('VA listener attached, waiting for data...');
                        } else {
                            Utils.log('VA', 'Not ready, retrying...');
                            UIManager.updateOutput('VA not ready, retrying...');
                            setTimeout(tryConnect, CONFIG.VA_RETRY_INTERVAL);
                        }
                    };

                    tryConnect();
                }
            };

            // =============================================================================
            // MAIN APPLICATION
            // =============================================================================
            const App = {
                // Store current parameters for file operations
                _currentParams: null,
                
                /**
                 * Initialize the entire application
                 */
                init() {
                    Utils.log('APP', 'Initializing Document Summarizer App');
                    
                    try {
                        // Check if PDF.js is loaded
                        if (typeof pdfjsLib !== 'undefined') {
                            Utils.log('APP', 'PDF.js loaded successfully');
                        } else {
                            Utils.log('APP', 'Warning: PDF.js not loaded - PDF support will be limited');
                        }
                        
                        // Setup UI event listeners
                        UIManager.setupEventListeners();
                        
                        // Initialize VA integration
                        VAIntegration.initialize();
                        
                        // Expose file selection handler globally
                        window.DocumentSummarizerApp = window.DocumentSummarizerApp || {};
                        window.DocumentSummarizerApp._onFileSelected = this.handleFileSelection.bind(this);
                        
                    } catch (error) {
                        Utils.log('APP', 'Initialization error', error);
                        UIManager.updateOutput(`Error: ${error.message}`);
                    }
                },

                /**
                 * Store current parameters for later use
                 */
                setCurrentParams(params) {
                    this._currentParams = params;
                },

                /**
                 * Handle file selection from dropdown
                 */
                async handleFileSelection(fileId) {
                    if (!this._currentParams) {
                        UIManager.displayFileContent('Error: No parameters available for file loading');
                        return;
                    }
                    
                    const { alertId, sasUser, sasPass } = this._currentParams;
                    
                    if (!alertId || !sasUser || !sasPass) {
                        UIManager.displayFileContent('Error: Missing required parameters for file loading');
                        return;
                    }
                    
                    try {
                        Utils.log('APP', `Loading content for file: ${fileId}`);
                        UIManager.displayFileContent('', true); // Show loading state
                        
                        // Get file content
                        const fileData = await APIService.getFileContent(alertId, fileId, sasUser, sasPass);
                        
                        // Extract text from file with progress callback
                        const extractedText = await APIService.extractTextFromFile(fileData, (status) => {
                            UIManager.displayFileContent('', true, status);
                        });
                        
                        // Display the extracted text
                        UIManager.displayFileContent(extractedText);
                        Utils.log('APP', 'File content loaded successfully');
                        
                    } catch (error) {
                        Utils.log('APP', 'File loading failed', error);
                        UIManager.displayFileContent(`Error loading file content: ${error.message}`);
                    }
                },

                /**
                 * Get selected file ID from dropdown
                 */
                getSelectedFileId() {
                    const selectEl = document.getElementById(CONFIG.ELEMENTS.fileSelect);
                    return selectEl ? selectEl.value : null;
                },

                /**
                 * Future: Add main app methods here
                 * e.g., summarizeSelectedFile(), downloadFile(), etc.
                 */
            };

            // =============================================================================
            // PUBLIC API
            // =============================================================================
            return {
                init: App.init.bind(App),
                getSelectedFileId: App.getSelectedFileId.bind(App),
                
                // Authentication methods
                async getSASToken(username, password) {
                    return APIService.getSASToken(username, password);
                },
                clearToken() {
                    return APIService.clearToken();
                },
                
                // File content methods
                async getFileContent(alertId, fileId, username, password) {
                    return APIService.getFileContent(alertId, fileId, username, password);
                },
                async extractTextFromFile(fileData) {
                    return APIService.extractTextFromFile(fileData);
                },
                async extractTextFromPDF(arrayBuffer, onProgress = null) {
                    return APIService.extractTextFromPDF(arrayBuffer, onProgress);
                },
                
                // Text cleaning methods
                cleanTextForLLM(text, options = {}) {
                    return Utils.cleanTextForLLM(text, options);
                },
                
                // Expose modules for testing/debugging
                _modules: {
                    Utils,
                    UIManager,
                    APIService,
                    VAIntegration,
                    CONFIG
                }
            };
        })();

        // =============================================================================
        // APPLICATION STARTUP
        // =============================================================================
        DocumentSummarizerApp.init();
    </script>

</body>

</html>
