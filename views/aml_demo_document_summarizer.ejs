<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>VA Parameter Echo</title>
    <!-- Same path you use in your VA environment -->
    <script src="./javascripts/sas/util/messagingUtil.js"></script>
    <style>
        body {
            font: 14px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Arial;
            margin: 16px;
        }

        pre {
            background: #fafafa;
            border: 1px solid #eee;
            padding: 12px;
            border-radius: 10px;
            white-space: pre-wrap
        }
    </style>
</head>

<body>
    <h1>VA Parameter Echo</h1>
    <pre id="out">Waiting for VA parameters…</pre>

    <!-- ADD: dropdown + count -->
    <label for="fileSelect">Document</label>
    <select id="fileSelect">
        <option value="">— select a file —</option>
    </select>
    <small id="fileCount" style="color:#777;margin-left:8px"></small>

    <script>
        (function () {
            // 0: ALERT_ID, 1: OPENAI_API_KEY, 2: SAS_USERNAME, 3: SAS_PASSWORD
            const IDX = { alertId: 0, openaiKey: 1, sasUser: 2, sasPass: 3 };

            // Helpers
            const getByIndex = (params, i) => (Array.isArray(params) && params[i]) ? params[i].value : undefined;
            const qs = (obj) => new URLSearchParams(obj).toString();

            function onVA(vaMsgObj) {
                const params = vaMsgObj?.parameters || [];

                const alertId = getByIndex(params, IDX.alertId);
                const openaiKey = getByIndex(params, IDX.openaiKey);
                const sasUser = getByIndex(params, IDX.sasUser);
                const sasPass = getByIndex(params, IDX.sasPass);

                console.log('[DDC] by index:', { alertId, hasOpenAI: !!openaiKey, sasUser, hasPass: !!sasPass });

                // Update the display to show we received parameters
                document.getElementById('out').textContent = `Received parameters:\nAlert ID: ${alertId || 'missing'}\nOpenAI Key: ${openaiKey ? 'present' : 'missing'}\nSAS User: ${sasUser || 'missing'}\nSAS Pass: ${sasPass ? 'present' : 'missing'}`;

                // Example: call your endpoints with everything as query params
                if (alertId && openaiKey && sasUser && sasPass) {
                    const query = qs({ openaiKey, sasUser, sasPass });

                    // list files
                    fetch(`/api/alerts/${encodeURIComponent(alertId)}/files?${query}`)
                        .then(r => r.json())
                        .then(j => {
                            // normalize response
                            const files = Array.isArray(j) ? j : (j.items || j.files || []);
                            const sel = document.getElementById('fileSelect');
                            const countEl = document.getElementById('fileCount');

                            // populate dropdown
                            sel.innerHTML = '<option value="">— select a file —</option>';
                            files.forEach(f => {
                                const id = f.id || f.fileId;
                                const name = f.name || f.fileName || id;
                                const opt = document.createElement('option');
                                opt.value = id;
                                opt.textContent = `${name} (${id})`;
                                sel.appendChild(opt);
                            });

                            // show count
                            countEl.textContent = files.length ? `(${files.length} files)` : '(no files)';
                            console.log('[FILES]', { count: files.length, sample: files[0] });
                        })
                        .catch(err => console.error('[FILES] error', err));
                }
            }

            // Attach VA callback
            function initVA() {
                if (window.va && va.messagingUtil && typeof va.messagingUtil.setOnDataReceivedCallback === 'function') {
                    va.messagingUtil.setOnDataReceivedCallback(onVA);
                    console.log('VA listener attached');
                    document.getElementById('out').textContent = 'VA listener attached, waiting for data...';
                } else {
                    console.log('VA not ready, retrying...');
                    document.getElementById('out').textContent = 'VA not ready, retrying...';
                    setTimeout(initVA, 1000); // Try again in 1 second
                }
            }

            // Start the initialization
            try {
                initVA();
            } catch (e) {
                console.error('Error initializing VA:', e);
                document.getElementById('out').textContent = `Error: ${e.message}`;
            }
        })();
    </script>

</body>

</html>
